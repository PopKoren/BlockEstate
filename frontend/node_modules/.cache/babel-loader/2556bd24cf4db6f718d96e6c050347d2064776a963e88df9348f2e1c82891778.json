{"ast":null,"code":"// src/utilsApp/web3.js\n\nimport Web3 from 'web3';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\nexport const initializeWeb3 = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\n  }\n  try {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    return new Web3(window.ethereum);\n  } catch (error) {\n    console.error('Web3 initialization error:', error);\n    if (error.code === 4001) {\n      throw new Error('Please connect your wallet to use this application');\n    }\n    throw error;\n  }\n};\nexport const initializeContract = async web3 => {\n  if (!web3) {\n    throw new Error('Web3 instance is required');\n  }\n  try {\n    const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n\n    // Simple contract validation\n    const code = await web3.eth.getCode(CONTRACT_ADDRESS);\n    if (code === '0x' || code === '0x0') {\n      throw new Error('No contract found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\n    }\n    return contract;\n  } catch (error) {\n    throw new Error(`Contract initialization failed: ${error.message}`);\n  }\n};\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed');\n  }\n  try {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    if (!accounts || accounts.length === 0) {\n      throw new Error('No accounts found. Please unlock MetaMask.');\n    }\n    return accounts[0];\n  } catch (error) {\n    console.error('Wallet connection error:', error);\n    if (error.code === 4001) {\n      throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\n    }\n    throw new Error('Failed to connect wallet: ' + error.message);\n  }\n};\nexport const switchToHardhatNetwork = async () => {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: Web3.utils.toHex(31337)\n      }] // Using proper hex conversion\n    });\n  } catch (switchError) {\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: Web3.utils.toHex(31337),\n            chainName: 'Hardhat Local Network',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['http://127.0.0.1:8545'],\n            blockExplorerUrls: null\n          }]\n        });\n      } catch (addError) {\n        throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\n      }\n    } else {\n      throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\n    }\n  }\n};\nexport const formatPrice = (web3Instance, priceInWei) => {\n  if (!web3Instance || !priceInWei) return '0';\n  try {\n    return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\n  } catch (error) {\n    console.error('Price formatting error:', error);\n    return '0';\n  }\n};\n\n// export const validatePropertyData = (property) => {\n//     if (!property.id || !property.id.trim()) {\n//         throw new Error('Property ID is required');\n//     }\n//     if (!property.title || !property.title.trim()) {\n//         throw new Error('Property title is required');\n//     }\n//     if (!property.price) {\n//         throw new Error('Property price is required');\n//     }\n\n//     const price = parseFloat(property.price);\n//     if (isNaN(price) || price <= 0) {\n//         throw new Error('Please enter a valid price greater than 0');\n//     }\n\n//     return true;\n// };\n\nexport const validateTransaction = async (web3, account, value) => {\n  try {\n    const balance = await web3.eth.getBalance(account);\n    const gasPrice = await web3.eth.getGasPrice();\n    const estimatedGas = '500000'; // Safe estimate for most transactions\n\n    const totalCost = web3.utils.toBN(value).add(web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas)));\n    if (web3.utils.toBN(balance).lt(totalCost)) {\n      throw new Error('Insufficient funds for transaction and gas fees');\n    }\n    return {\n      gasPrice,\n      estimatedGas\n    };\n  } catch (error) {\n    throw new Error(`Transaction validation failed: ${error.message}`);\n  }\n};\n\n// Property validation and utilities\nexport const validatePropertyData = async (property, contract) => {\n  if (!property.id || !property.id.trim()) {\n    throw new Error('Property ID is required');\n  }\n\n  // Check for existing property ID\n  if (contract) {\n    const properties = await contract.methods.getAllProperties().call();\n    if (properties.some(p => p.id === property.id)) {\n      throw new Error('Property ID already exists');\n    }\n  }\n\n  // Title validation\n  if (!property.title || !property.title.trim()) {\n    throw new Error('Property title is required');\n  }\n  if (property.title.includes('\\n')) {\n    throw new Error('Title must be a single line');\n  }\n\n  // Description validation\n  if (property.description) {\n    const descriptionLines = property.description.split('\\n').length;\n    if (descriptionLines > 4) {\n      throw new Error('Description cannot exceed 4 lines');\n    }\n  }\n\n  // Location validation\n  const validCities = ['Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion', 'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva', 'Holon', 'Bnei Brak'];\n  if (!validCities.includes(property.location)) {\n    throw new Error('Please select a valid city from the list');\n  }\n\n  // Price validation\n  if (!property.price) {\n    throw new Error('Property price is required');\n  }\n  const price = parseFloat(property.price);\n  if (isNaN(price) || price <= 0) {\n    throw new Error('Please enter a valid price greater than 0');\n  }\n  return true;\n};\nexport const checkPropertyAvailability = async (propertyId, contract) => {\n  try {\n    const property = await contract.methods.properties(propertyId).call();\n    return {\n      exists: property.owner !== '0x0000000000000000000000000000000000000000',\n      isActive: property.isActive,\n      owner: property.owner\n    };\n  } catch (error) {\n    console.error('Error checking property availability:', error);\n    throw new Error('Failed to check property availability');\n  }\n};\nexport const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\n  try {\n    const gasEstimate = await contract.methods.createContract(contractId, propertyId).estimateGas({\n      from: account,\n      value: value\n    });\n\n    // Add 20% buffer to gas estimate\n    return Math.ceil(gasEstimate * 1.2);\n  } catch (error) {\n    if (error.message.includes('Property must be verified')) {\n      throw new Error('This property must be verified before purchase');\n    }\n    throw new Error('Failed to estimate gas for the transaction');\n  }\n};","map":{"version":3,"names":["Web3","CONTRACT_ADDRESS","CONTRACT_ABI","initializeWeb3","window","ethereum","Error","request","method","error","console","code","initializeContract","web3","contract","eth","Contract","getCode","message","connectWallet","accounts","length","switchToHardhatNetwork","params","chainId","utils","toHex","switchError","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","formatPrice","web3Instance","priceInWei","fromWei","toString","validateTransaction","account","value","balance","getBalance","gasPrice","getGasPrice","estimatedGas","totalCost","toBN","add","mul","lt","validatePropertyData","property","id","trim","properties","methods","getAllProperties","call","some","p","title","includes","description","descriptionLines","split","validCities","location","price","parseFloat","isNaN","checkPropertyAvailability","propertyId","exists","owner","isActive","calculatePropertyPurchaseGas","contractId","gasEstimate","createContract","estimateGas","from","Math","ceil"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/web3.js"],"sourcesContent":["// src/utilsApp/web3.js\r\n\r\nimport Web3 from 'web3';\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\r\n\r\nexport const initializeWeb3 = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\r\n    }\r\n\r\n    try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        return new Web3(window.ethereum);\r\n    } catch (error) {\r\n        console.error('Web3 initialization error:', error);\r\n        if (error.code === 4001) {\r\n            throw new Error('Please connect your wallet to use this application');\r\n        }\r\n        throw error;\r\n    }\r\n};\r\nexport const initializeContract = async (web3) => {\r\n    if (!web3) {\r\n        throw new Error('Web3 instance is required');\r\n    }\r\n    \r\n    try {\r\n        const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n        \r\n        // Simple contract validation\r\n        const code = await web3.eth.getCode(CONTRACT_ADDRESS);\r\n        if (code === '0x' || code === '0x0') {\r\n            throw new Error('No contract found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\r\n        }\r\n        \r\n        return contract;\r\n    } catch (error) {\r\n        throw new Error(`Contract initialization failed: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed');\r\n    }\r\n\r\n    try {\r\n        const accounts = await window.ethereum.request({\r\n            method: 'eth_requestAccounts'\r\n        });\r\n\r\n        if (!accounts || accounts.length === 0) {\r\n            throw new Error('No accounts found. Please unlock MetaMask.');\r\n        }\r\n\r\n        return accounts[0];\r\n    } catch (error) {\r\n        console.error('Wallet connection error:', error);\r\n        if (error.code === 4001) {\r\n            throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\r\n        }\r\n        throw new Error('Failed to connect wallet: ' + error.message);\r\n    }\r\n};\r\n\r\nexport const switchToHardhatNetwork = async () => {\r\n    try {\r\n        await window.ethereum.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [{ chainId: Web3.utils.toHex(31337) }] // Using proper hex conversion\r\n        });\r\n    } catch (switchError) {\r\n        if (switchError.code === 4902) {\r\n            try {\r\n                await window.ethereum.request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{\r\n                        chainId: Web3.utils.toHex(31337),\r\n                        chainName: 'Hardhat Local Network',\r\n                        nativeCurrency: {\r\n                            name: 'ETH',\r\n                            symbol: 'ETH',\r\n                            decimals: 18\r\n                        },\r\n                        rpcUrls: ['http://127.0.0.1:8545'],\r\n                        blockExplorerUrls: null\r\n                    }]\r\n                });\r\n            } catch (addError) {\r\n                throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\r\n            }\r\n        } else {\r\n            throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const formatPrice = (web3Instance, priceInWei) => {\r\n    if (!web3Instance || !priceInWei) return '0';\r\n    try {\r\n        return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\r\n    } catch (error) {\r\n        console.error('Price formatting error:', error);\r\n        return '0';\r\n    }\r\n};\r\n\r\n// export const validatePropertyData = (property) => {\r\n//     if (!property.id || !property.id.trim()) {\r\n//         throw new Error('Property ID is required');\r\n//     }\r\n//     if (!property.title || !property.title.trim()) {\r\n//         throw new Error('Property title is required');\r\n//     }\r\n//     if (!property.price) {\r\n//         throw new Error('Property price is required');\r\n//     }\r\n\r\n//     const price = parseFloat(property.price);\r\n//     if (isNaN(price) || price <= 0) {\r\n//         throw new Error('Please enter a valid price greater than 0');\r\n//     }\r\n\r\n//     return true;\r\n// };\r\n\r\n\r\nexport const validateTransaction = async (web3, account, value) => {\r\n    try {\r\n        const balance = await web3.eth.getBalance(account);\r\n        const gasPrice = await web3.eth.getGasPrice();\r\n        const estimatedGas = '500000'; // Safe estimate for most transactions\r\n        \r\n        const totalCost = web3.utils.toBN(value).add(\r\n            web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas))\r\n        );\r\n        \r\n        if (web3.utils.toBN(balance).lt(totalCost)) {\r\n            throw new Error('Insufficient funds for transaction and gas fees');\r\n        }\r\n        \r\n        return {\r\n            gasPrice,\r\n            estimatedGas\r\n        };\r\n    } catch (error) {\r\n        throw new Error(`Transaction validation failed: ${error.message}`);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n// Property validation and utilities\r\nexport const validatePropertyData = async (property, contract) => {\r\n    if (!property.id || !property.id.trim()) {\r\n        throw new Error('Property ID is required');\r\n    }\r\n\r\n    // Check for existing property ID\r\n    if (contract) {\r\n        const properties = await contract.methods.getAllProperties().call();\r\n        if (properties.some(p => p.id === property.id)) {\r\n            throw new Error('Property ID already exists');\r\n        }\r\n    }\r\n\r\n    // Title validation\r\n    if (!property.title || !property.title.trim()) {\r\n        throw new Error('Property title is required');\r\n    }\r\n    if (property.title.includes('\\n')) {\r\n        throw new Error('Title must be a single line');\r\n    }\r\n\r\n    // Description validation\r\n    if (property.description) {\r\n        const descriptionLines = property.description.split('\\n').length;\r\n        if (descriptionLines > 4) {\r\n            throw new Error('Description cannot exceed 4 lines');\r\n        }\r\n    }\r\n\r\n    // Location validation\r\n    const validCities = [\r\n        'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n        'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n        'Holon', 'Bnei Brak'\r\n    ];\r\n    \r\n    if (!validCities.includes(property.location)) {\r\n        throw new Error('Please select a valid city from the list');\r\n    }\r\n\r\n    // Price validation\r\n    if (!property.price) {\r\n        throw new Error('Property price is required');\r\n    }\r\n\r\n    const price = parseFloat(property.price);\r\n    if (isNaN(price) || price <= 0) {\r\n        throw new Error('Please enter a valid price greater than 0');\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nexport const checkPropertyAvailability = async (propertyId, contract) => {\r\n    try {\r\n        const property = await contract.methods.properties(propertyId).call();\r\n        return {\r\n            exists: property.owner !== '0x0000000000000000000000000000000000000000',\r\n            isActive: property.isActive,\r\n            owner: property.owner\r\n        };\r\n    } catch (error) {\r\n        console.error('Error checking property availability:', error);\r\n        throw new Error('Failed to check property availability');\r\n    }\r\n};\r\n\r\nexport const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\r\n    try {\r\n        const gasEstimate = await contract.methods\r\n            .createContract(contractId, propertyId)\r\n            .estimateGas({\r\n                from: account,\r\n                value: value\r\n            });\r\n\r\n        // Add 20% buffer to gas estimate\r\n        return Math.ceil(gasEstimate * 1.2);\r\n    } catch (error) {\r\n        if (error.message.includes('Property must be verified')) {\r\n            throw new Error('This property must be verified before purchase');\r\n        }\r\n        throw new Error('Failed to estimate gas for the transaction');\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}