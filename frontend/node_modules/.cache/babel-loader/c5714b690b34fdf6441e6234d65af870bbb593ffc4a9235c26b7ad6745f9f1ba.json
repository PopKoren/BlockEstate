{"ast":null,"code":"// src/utils/web3.js\n\nimport Web3 from 'web3';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\nexport const initializeWeb3 = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\n  }\n  try {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    return new Web3(window.ethereum);\n  } catch (error) {\n    console.error('Web3 initialization error:', error);\n    if (error.code === 4001) {\n      throw new Error('Please connect your wallet to use this application');\n    }\n    throw error;\n  }\n};\nexport const initializeContract = async web3 => {\n  if (!web3) {\n    throw new Error('Web3 instance is required');\n  }\n  try {\n    const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n\n    // Verify contract deployment\n    const code = await web3.eth.getCode(CONTRACT_ADDRESS);\n    if (code === '0x' || code === '0x0') {\n      throw new Error('Contract not found at the specified address');\n    }\n\n    // Verify contract methods\n    if (!contract.methods.createProperty) {\n      throw new Error('Contract does not contain required methods');\n    }\n    return contract;\n  } catch (error) {\n    console.error('Contract initialization error:', error);\n    throw new Error(`Failed to initialize contract: ${error.message}`);\n  }\n};\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed');\n  }\n  try {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    if (!accounts || accounts.length === 0) {\n      throw new Error('No accounts found. Please unlock MetaMask.');\n    }\n    return accounts[0];\n  } catch (error) {\n    console.error('Wallet connection error:', error);\n    if (error.code === 4001) {\n      throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\n    }\n    throw new Error('Failed to connect wallet: ' + error.message);\n  }\n};\nexport const switchToHardhatNetwork = async () => {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: Web3.utils.toHex(31337)\n      }]\n    });\n  } catch (switchError) {\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: Web3.utils.toHex(31337),\n            chainName: 'Hardhat Local Network',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['http://127.0.0.1:8545'],\n            blockExplorerUrls: null\n          }]\n        });\n      } catch (addError) {\n        throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\n      }\n    } else {\n      throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\n    }\n  }\n};\nexport const formatPrice = (web3Instance, priceInWei) => {\n  if (!web3Instance || !priceInWei) return '0';\n  try {\n    return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\n  } catch (error) {\n    console.error('Price formatting error:', error);\n    return '0';\n  }\n};\nexport const checkPropertyAvailability = async (propertyId, contract) => {\n  try {\n    // First, try to get all properties\n    const allProperties = await contract.methods.getAllProperties().call();\n\n    // Find the specific property\n    const property = allProperties.find(p => p.id === propertyId);\n    if (!property) {\n      throw new Error('Property not found');\n    }\n    return {\n      exists: true,\n      isActive: property.isActive,\n      owner: property.owner\n    };\n  } catch (error) {\n    console.error('Property availability check error:', error);\n    throw new Error('Failed to check property availability');\n  }\n};","map":{"version":3,"names":["Web3","CONTRACT_ADDRESS","CONTRACT_ABI","initializeWeb3","window","ethereum","Error","request","method","error","console","code","initializeContract","web3","contract","eth","Contract","getCode","methods","createProperty","message","connectWallet","accounts","length","switchToHardhatNetwork","params","chainId","utils","toHex","switchError","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","formatPrice","web3Instance","priceInWei","fromWei","toString","checkPropertyAvailability","propertyId","allProperties","getAllProperties","call","property","find","p","id","exists","isActive","owner"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/web3.js"],"sourcesContent":["\r\n\r\n\r\n// src/utils/web3.js\r\n\r\nimport Web3 from 'web3';\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\r\n\r\nexport const initializeWeb3 = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\r\n    }\r\n\r\n    try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        return new Web3(window.ethereum);\r\n    } catch (error) {\r\n        console.error('Web3 initialization error:', error);\r\n        if (error.code === 4001) {\r\n            throw new Error('Please connect your wallet to use this application');\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const initializeContract = async (web3) => {\r\n    if (!web3) {\r\n        throw new Error('Web3 instance is required');\r\n    }\r\n    \r\n    try {\r\n        const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n        \r\n        // Verify contract deployment\r\n        const code = await web3.eth.getCode(CONTRACT_ADDRESS);\r\n        if (code === '0x' || code === '0x0') {\r\n            throw new Error('Contract not found at the specified address');\r\n        }\r\n        \r\n        // Verify contract methods\r\n        if (!contract.methods.createProperty) {\r\n            throw new Error('Contract does not contain required methods');\r\n        }\r\n        \r\n        return contract;\r\n    } catch (error) {\r\n        console.error('Contract initialization error:', error);\r\n        throw new Error(`Failed to initialize contract: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed');\r\n    }\r\n\r\n    try {\r\n        const accounts = await window.ethereum.request({\r\n            method: 'eth_requestAccounts'\r\n        });\r\n\r\n        if (!accounts || accounts.length === 0) {\r\n            throw new Error('No accounts found. Please unlock MetaMask.');\r\n        }\r\n\r\n        return accounts[0];\r\n    } catch (error) {\r\n        console.error('Wallet connection error:', error);\r\n        if (error.code === 4001) {\r\n            throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\r\n        }\r\n        throw new Error('Failed to connect wallet: ' + error.message);\r\n    }\r\n};\r\n\r\nexport const switchToHardhatNetwork = async () => {\r\n    try {\r\n        await window.ethereum.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [{ chainId: Web3.utils.toHex(31337) }]\r\n        });\r\n    } catch (switchError) {\r\n        if (switchError.code === 4902) {\r\n            try {\r\n                await window.ethereum.request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{\r\n                        chainId: Web3.utils.toHex(31337),\r\n                        chainName: 'Hardhat Local Network',\r\n                        nativeCurrency: {\r\n                            name: 'ETH',\r\n                            symbol: 'ETH',\r\n                            decimals: 18\r\n                        },\r\n                        rpcUrls: ['http://127.0.0.1:8545'],\r\n                        blockExplorerUrls: null\r\n                    }]\r\n                });\r\n            } catch (addError) {\r\n                throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\r\n            }\r\n        } else {\r\n            throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\r\n        }\r\n    }\r\n};\r\n\r\nexport const formatPrice = (web3Instance, priceInWei) => {\r\n    if (!web3Instance || !priceInWei) return '0';\r\n    try {\r\n        return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\r\n    } catch (error) {\r\n        console.error('Price formatting error:', error);\r\n        return '0';\r\n    }\r\n};\r\n\r\nexport const checkPropertyAvailability = async (propertyId, contract) => {\r\n    try {\r\n        // First, try to get all properties\r\n        const allProperties = await contract.methods.getAllProperties().call();\r\n        \r\n        // Find the specific property\r\n        const property = allProperties.find(p => p.id === propertyId);\r\n        \r\n        if (!property) {\r\n            throw new Error('Property not found');\r\n        }\r\n\r\n        return {\r\n            exists: true,\r\n            isActive: property.isActive,\r\n            owner: property.owner\r\n        };\r\n    } catch (error) {\r\n        console.error('Property availability check error:', error);\r\n        throw new Error('Failed to check property availability');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}