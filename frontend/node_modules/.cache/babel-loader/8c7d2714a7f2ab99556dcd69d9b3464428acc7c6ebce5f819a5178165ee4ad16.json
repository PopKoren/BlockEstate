{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Card, CardHeader, CardContent } from './components/ui/card';\n// import { Button } from './components/ui/button';\n// import { Input } from './components/ui/input';\n// import { Alert, AlertDescription } from './components/ui/alert';\n// import { Building, Wallet, Plus, RefreshCw, AlertCircle, Loader2  ,MapPin, DollarSign} from 'lucide-react';\n// import { Textarea } from './components/ui/textarea';\n// import { ScrollArea } from './components/ui/scroll-area';\n// import ContractDetails from './components/ui/ContractDetails';\n// import { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice, validatePropertyData } from './utilsApp/web3';\n// import { displayErrorMessage } from './utilsApp/errors';\n// import './styles.css';\n\n// const RealEstateApp = () => {\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [isProcessing, setIsProcessing] = useState(false);\n//     const [account, setAccount] = useState('');\n//     const [contract, setContract] = useState(null);\n//     const [web3Instance, setWeb3Instance] = useState(null);\n//     const [properties, setProperties] = useState([]);\n//     const [error, setError] = useState('');\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n//     const [newProperty, setNewProperty] = useState({\n//         id: '',\n//         title: '',\n//         description: '',\n//         location: '',\n//         price: '',\n//         documents: []\n//     });\n\n//     const loadProperties = async (contractInstance = contract) => {\n//         try {\n//             if (!contractInstance) throw new Error('Contract not initialized');\n//             const results = await contractInstance.methods.getAllProperties().call();\n//             setProperties(results || []);\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\n//         }\n//     };\n\n//     const handleAccountChange = async (accounts) => {\n//         if (accounts.length > 0) {\n//             setAccount(accounts[0]);\n//             await loadProperties(contract);\n//         } else {\n//             setAccount('');\n//             setProperties([]);\n//             setError('Please connect your wallet');\n//         }\n//     };\n\n//     const handleChainChange = () => {\n//         window.location.reload();\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n//         setNewProperty(prev => ({\n//             ...prev,\n//             [name]: value\n//         }));\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         setIsProcessing(true);\n//         setError('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             validatePropertyData(newProperty);\n//             const priceInWei = web3Instance.utils.toWei(newProperty.price, 'ether');\n\n//             await contract.methods.createProperty(\n//                 newProperty.id,\n//                 newProperty.title,\n//                 newProperty.description,\n//                 priceInWei,\n//                 newProperty.location,\n//                 []\n//             ).send({\n//                 from: account,\n//                 gas: 500000\n//             });\n\n//             await loadProperties();\n//             setNewProperty({\n//                 id: '',\n//                 title: '',\n//                 description: '',\n//                 location: '',\n//                 price: '',\n//                 documents: []\n//             });\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Property Creation Error'));\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     // const handlePurchase = async (propertyId) => {\n//     //     setIsProcessing(true);\n//     //     setError('');\n\n//     //     try {\n//     //     // Validate connection and requirements\n//     //     if (!contract || !account || !web3Instance) {\n//     //         throw new Error('Please ensure your wallet is connected');\n//     //     }\n\n//     //     // Find the property\n//     //     const property = properties.find(p => p.id === propertyId);\n//     //     if (!property) {\n//     //         throw new Error('Property not found');\n//     //     }\n\n//     //     // Verify user has sufficient balance\n//     //     const balance = await web3Instance.eth.getBalance(account);\n//     //     if (BigInt(balance) < BigInt(property.price)) {\n//     //         throw new Error('Insufficient funds to complete the purchase');\n//     //     }\n\n//     //     const contractId = `${propertyId}-${Date.now()}`;\n\n//     //     // Get gas estimation with try-catch\n//     //     let gasEstimate;\n//     //     try {\n//     //         gasEstimate = await contract.methods\n//     //             .createContract(contractId, propertyId)\n//     //             .estimateGas({\n//     //                 from: account,\n//     //                 value: property.price\n//     //             });\n//     //     } catch (gasError) {\n//     //         console.error('Gas estimation error:', gasError);\n//     //         // Check for specific error messages\n//     //         if (gasError.message.includes('Property must be verified')) {\n//     //             throw new Error('This property must be verified before purchase');\n//     //         }\n//     //         throw new Error('Failed to estimate gas. The transaction may fail.');\n//     //     }\n\n//     //     // Get current gas price\n//     //     const gasPrice = await web3Instance.eth.getGasPrice();\n\n//     //     // Add 20% buffer to gas estimate\n//     //     const gasLimit = Math.ceil(gasEstimate * 1.2);\n\n//     //     // Execute the transaction with specific parameters\n//     //     const transaction = await contract.methods\n//     //         .createContract(contractId, propertyId)\n//     //         .send({\n//     //             from: account,\n//     //             value: property.price,\n//     //             gas: gasLimit,\n//     //             gasPrice: gasPrice,\n//     //             maxFeePerGas: null, // Let MetaMask handle this\n//     //             maxPriorityFeePerGas: null // Let MetaMask handle this\n//     //         });\n\n//     //     // Wait for transaction receipt\n//     //     const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\n\n//     //     if (!receipt.status) {\n//     //         throw new Error('Transaction failed. Please check the transaction on block explorer.');\n//     //     }\n\n//     //     // Reload properties and show success\n//     //     await loadProperties();\n//     //     setError('Purchase completed successfully!');\n\n//     //   } catch (err) {\n//     //     console.error('Purchase error:', err);\n\n//     //     // Handle specific error cases\n//     //     if (err.message.includes('User denied transaction')) {\n//     //         setError('Transaction was cancelled by user');\n//     //     } else if (err.message.includes('insufficient funds')) {\n//     //         setError('Insufficient funds to complete the purchase');\n//     //     } else if (err.message.includes('Property must be verified')) {\n//     //         setError('This property must be verified before purchase. Please contact the administrator.');\n//     //     } else {\n//     //         setError(`Failed to purchase property: ${err.message}`);\n//     //     }\n//     //   } finally {\n//     //     setIsProcessing(false);\n//     //   }\n//     // };\n//     const handlePurchase = async (propertyId) => {\n//         setIsProcessing(true);\n//         setError('');\n\n//         try {\n//             if (!contract || !account) {\n//                 throw new Error('Please connect your wallet first');\n//             }\n\n//             const property = properties.find(p => p.id === propertyId);\n//             if (!property) {\n//                 throw new Error('Property not found');\n//             }\n\n//             // Check if property is active\n//             if (!property.isActive) {\n//                 throw new Error('Property is not available for purchase');\n//             }\n\n//             // Check if sender is not the owner\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\n//                 throw new Error('You cannot purchase your own property');\n//             }\n\n//             const contractId = `${propertyId}-${Date.now()}`;\n\n//             // Convert price to string to avoid BigInt issues\n//             const propertyPrice = property.price.toString();\n\n//             // Log transaction details for debugging\n//             console.log('Transaction details:', {\n//                 contractId,\n//                 propertyId,\n//                 price: propertyPrice,\n//                 from: account\n//             });\n\n//             const transaction = await contract.methods\n//                 .createContract(contractId, propertyId)\n//                 .send({\n//                     from: account,\n//                     value: propertyPrice,\n//                     gas: 500000,\n//                     gasPrice: await web3Instance.eth.getGasPrice()\n//                 });\n\n//             console.log('Transaction successful:', transaction);\n//             await loadProperties();\n//             setError('Purchase completed successfully!');\n\n//         } catch (err) {\n//             console.error('Detailed purchase error:', err);\n//             if (err.message.includes('insufficient funds')) {\n//                 setError('You do not have enough funds to complete this purchase');\n//             } else if (err.message.includes('Property is not available')) {\n//                 setError('This property is not available for purchase');\n//             } else if (err.message.includes('own property')) {\n//                 setError('You cannot purchase your own property');\n//             } else {\n//                 setError('Failed to complete purchase. Please check your wallet and try again.');\n//             }\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     const initializeBlockchain = async () => {\n//         setIsLoading(true);\n//         setError('');\n\n//         try {\n//             setConnectionStatus('Initializing Web3...');\n//             const web3 = await initializeWeb3();\n//             setWeb3Instance(web3);\n\n//             // Get accounts after web3 initialization\n//             const accounts = await web3.eth.getAccounts();\n//             if (accounts.length > 0) {\n//                 setAccount(accounts[0]);\n//             }\n\n//             setConnectionStatus('Checking network...');\n//             const chainId = await web3.eth.getChainId();\n\n//             if (chainId !== 31337) {\n//                 setConnectionStatus('Switching to Hardhat network...');\n//                 await switchToHardhatNetwork();\n//             }\n\n//             setConnectionStatus('Initializing contract...');\n//             const contractInstance = await initializeContract(web3);\n//             setContract(contractInstance);\n\n//             await loadProperties(contractInstance);\n//             setConnectionStatus('Connected');\n\n//         } catch (err) {\n//             console.error('Initialization error:', err);\n//             setError(displayErrorMessage(err, 'Initialization Error'));\n//             setConnectionStatus('Connection failed');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const init = async () => {\n//             await initializeBlockchain();\n//             if (window.ethereum) {\n//                 window.ethereum.on('chainChanged', () => {\n//                     window.location.reload();\n//                 });\n\n//                 window.ethereum.on('accountsChanged', handleAccountChange);\n//             }\n//         };\n//         init();\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountChange);\n//                 window.ethereum.removeListener('chainChanged', handleChainChange);\n//             }\n//         };\n//     }, []);\n\n//     if (isLoading) {\n//         return (\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\n//                 <div className=\"text-center\">\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"container mx-auto p-4 min-h-screen\">\n//             <Card className=\"mb-6\">\n//                 <CardHeader>\n//                     <div className=\"flex justify-between items-center\">\n//                         <h1 className=\"text-2xl font-bold\">Real Estate- Buy/Sell</h1>\n//                         <div className=\"flex gap-2\">\n//                             <Button \n//                                 onClick={() => loadProperties()} \n//                                 disabled={!contract || isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\n//                                 Refresh\n//                             </Button>\n//                             <Button \n//                                 //onClick={connectWallet}\n//                                 onClick={async () => {\n//                                     try {\n//                                         const { address, web3Instance } = await connectWallet();\n//                                         setAccount(address);\n//                                         setWeb3Instance(web3Instance);\n//                                         await loadProperties(contract);\n//                                     } catch (err) {\n//                                         setError(err.message);\n//                                     }\n//                                 }}\n\n//                                 ///////\n//                                 disabled={isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <Wallet className=\"h-4 w-4\" />\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\n//                             </Button>\n//                         </div>\n//                     </div>\n//                 </CardHeader>\n//             </Card>\n\n//             {error && (\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\n//                     <AlertCircle className=\"h-4 w-4\" />\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             <div className=\"grid md:grid-cols-2 gap-6\">\n//                 <Card>\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Plus className=\"h-5 w-5\" />\n//                             List New Property\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent>\n//                         <form onSubmit={handleSubmit} className=\"space-y-4\">\n//                             <Input\n//                                 name=\"id\"\n//                                 placeholder=\"Property ID\"\n//                                 value={newProperty.id}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Input\n//                                 name=\"title\"\n//                                 placeholder=\"Property Title\"\n//                                 value={newProperty.title}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Textarea\n//                                 name=\"description\"\n//                                 placeholder=\"Property Description\"\n//                                 value={newProperty.description}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                                 className=\"min-h-[100px]\"\n//                             />\n//                             <Input\n//                                 name=\"location\"\n//                                 placeholder=\"Location\"\n//                                 value={newProperty.location}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Input\n//                                 name=\"price\"\n//                                 type=\"number\"\n//                                 step=\"0.01\"\n//                                 placeholder=\"Price (ETH)\"\n//                                 value={newProperty.price}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Button \n//                                 type=\"submit\" \n//                                 disabled={isProcessing || !contract}\n//                                 className=\"w-full\"\n//                             >\n//                                 {isProcessing ? (\n//                                     <div className=\"flex items-center justify-center gap-2\">\n//                                         <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                         Processing...\n//                                     </div>\n//                                 ) : 'List Property'}\n//                             </Button>\n//                         </form>\n//                     </CardContent>\n//                 </Card>\n\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Building className=\"h-5 w-5\" />\n//                             Listed Properties\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent className=\"p-0\">\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n//                             <div className=\"space-y-4 p-6\">\n//                                 {properties.length === 0 ? (\n//                                     <div className=\"text-center text-gray-500 py-8\">\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n//                                         <p>No properties listed yet</p>\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\n//                                     </div>\n//                                 ) : (\n//                                     properties.map((property, index) => (\n//                                         <Card key={index} className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\n//                                             <div className=\"space-y-3\">\n//                                                 <div className=\"flex justify-between items-start\">\n//                                                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n//                                                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n//                                                         property.isActive \n//                                                             ? 'bg-green-100 text-green-700'\n//                                                             : 'bg-red-100 text-red-700'\n//                                                     }`}>\n//                                                         {property.isActive ? 'Active' : 'Sold'}\n//                                                     </span>\n//                                                 </div>\n\n//                                                 <div className=\"text-sm space-y-2\">\n//                                                     <p className=\"text-gray-600 italic\">{property.description}</p>\n\n//                                                     <div className=\"grid grid-cols-2 gap-4\">\n//                                                         <div>\n//                                                             <p className=\"font-medium text-gray-600\">Location</p>\n//                                                             <p>{property.location}</p>\n//                                                         </div>\n//                                                         <div>\n//                                                             <p className=\"font-medium text-gray-600\">Price</p>\n//                                                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\n//                                                         </div>\n//                                                     </div>\n\n//                                                     <div>\n//                                                         <p className=\"font-medium text-gray-600\">Owner</p>\n//                                                         <p className=\"truncate text-xs\">{property.owner}</p>\n//                                                     </div>\n\n//                                                     <div className=\"flex justify-between items-center pt-2\">\n//                                                         <p className=\"text-xs text-gray-500\">\n//                                                      Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\n//                                                         </p>\n//                                                           <ContractDetails \n//                                                           property={property}\n//                                                           formatPrice={(price) => formatPrice(web3Instance, price)}\n//                                                            />\n//                                                       </div>\n//                                                 </div>\n\n//                                                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\n//                                                     <Button \n//                                                         onClick={() => handlePurchase(property.id)}\n//                                                         disabled={isProcessing}\n//                                                         className=\"w-full mt-4\"\n//                                                         variant=\"outline\"\n//                                                     >\n//                                                         {isProcessing ? (\n//                                                             <div className=\"flex items-center justify-center gap-2\">\n//                                                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                                                 Processing Purchase...\n//                                                             </div>\n//                                                         ) : 'Purchase Property'}\n//                                                     </Button>\n//                                                 )}\n//                                             </div>\n//                                         </Card>\n//                                     ))\n//                                 )}\n//                             </div>\n//                         </ScrollArea>\n//                     </CardContent>\n//                 </Card>\n//             </div>\n//         </div>\n//     );\n// };\n// export default RealEstateApp;","map":{"version":3,"names":[],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/RealEstateApp.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Card, CardHeader, CardContent } from './components/ui/card';\r\n// import { Button } from './components/ui/button';\r\n// import { Input } from './components/ui/input';\r\n// import { Alert, AlertDescription } from './components/ui/alert';\r\n// import { Building, Wallet, Plus, RefreshCw, AlertCircle, Loader2  ,MapPin, DollarSign} from 'lucide-react';\r\n// import { Textarea } from './components/ui/textarea';\r\n// import { ScrollArea } from './components/ui/scroll-area';\r\n// import ContractDetails from './components/ui/ContractDetails';\r\n// import { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice, validatePropertyData } from './utilsApp/web3';\r\n// import { displayErrorMessage } from './utilsApp/errors';\r\n// import './styles.css';\r\n\r\n// const RealEstateApp = () => {\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [isProcessing, setIsProcessing] = useState(false);\r\n//     const [account, setAccount] = useState('');\r\n//     const [contract, setContract] = useState(null);\r\n//     const [web3Instance, setWeb3Instance] = useState(null);\r\n//     const [properties, setProperties] = useState([]);\r\n//     const [error, setError] = useState('');\r\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n//     const [newProperty, setNewProperty] = useState({\r\n//         id: '',\r\n//         title: '',\r\n//         description: '',\r\n//         location: '',\r\n//         price: '',\r\n//         documents: []\r\n//     });\r\n\r\n//     const loadProperties = async (contractInstance = contract) => {\r\n//         try {\r\n//             if (!contractInstance) throw new Error('Contract not initialized');\r\n//             const results = await contractInstance.methods.getAllProperties().call();\r\n//             setProperties(results || []);\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\r\n//         }\r\n//     };\r\n\r\n//     const handleAccountChange = async (accounts) => {\r\n//         if (accounts.length > 0) {\r\n//             setAccount(accounts[0]);\r\n//             await loadProperties(contract);\r\n//         } else {\r\n//             setAccount('');\r\n//             setProperties([]);\r\n//             setError('Please connect your wallet');\r\n//         }\r\n//     };\r\n\r\n//     const handleChainChange = () => {\r\n//         window.location.reload();\r\n//     };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setNewProperty(prev => ({\r\n//             ...prev,\r\n//             [name]: value\r\n//         }));\r\n//     };\r\n   \r\n   \r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n\r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n\r\n//             validatePropertyData(newProperty);\r\n//             const priceInWei = web3Instance.utils.toWei(newProperty.price, 'ether');\r\n\r\n//             await contract.methods.createProperty(\r\n//                 newProperty.id,\r\n//                 newProperty.title,\r\n//                 newProperty.description,\r\n//                 priceInWei,\r\n//                 newProperty.location,\r\n//                 []\r\n//             ).send({\r\n//                 from: account,\r\n//                 gas: 500000\r\n//             });\r\n\r\n//             await loadProperties();\r\n//             setNewProperty({\r\n//                 id: '',\r\n//                 title: '',\r\n//                 description: '',\r\n//                 location: '',\r\n//                 price: '',\r\n//                 documents: []\r\n//             });\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Property Creation Error'));\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n\r\n//     // const handlePurchase = async (propertyId) => {\r\n//     //     setIsProcessing(true);\r\n//     //     setError('');\r\n\r\n//     //     try {\r\n//     //     // Validate connection and requirements\r\n//     //     if (!contract || !account || !web3Instance) {\r\n//     //         throw new Error('Please ensure your wallet is connected');\r\n//     //     }\r\n\r\n//     //     // Find the property\r\n//     //     const property = properties.find(p => p.id === propertyId);\r\n//     //     if (!property) {\r\n//     //         throw new Error('Property not found');\r\n//     //     }\r\n\r\n//     //     // Verify user has sufficient balance\r\n//     //     const balance = await web3Instance.eth.getBalance(account);\r\n//     //     if (BigInt(balance) < BigInt(property.price)) {\r\n//     //         throw new Error('Insufficient funds to complete the purchase');\r\n//     //     }\r\n\r\n//     //     const contractId = `${propertyId}-${Date.now()}`;\r\n\r\n//     //     // Get gas estimation with try-catch\r\n//     //     let gasEstimate;\r\n//     //     try {\r\n//     //         gasEstimate = await contract.methods\r\n//     //             .createContract(contractId, propertyId)\r\n//     //             .estimateGas({\r\n//     //                 from: account,\r\n//     //                 value: property.price\r\n//     //             });\r\n//     //     } catch (gasError) {\r\n//     //         console.error('Gas estimation error:', gasError);\r\n//     //         // Check for specific error messages\r\n//     //         if (gasError.message.includes('Property must be verified')) {\r\n//     //             throw new Error('This property must be verified before purchase');\r\n//     //         }\r\n//     //         throw new Error('Failed to estimate gas. The transaction may fail.');\r\n//     //     }\r\n\r\n//     //     // Get current gas price\r\n//     //     const gasPrice = await web3Instance.eth.getGasPrice();\r\n        \r\n//     //     // Add 20% buffer to gas estimate\r\n//     //     const gasLimit = Math.ceil(gasEstimate * 1.2);\r\n\r\n//     //     // Execute the transaction with specific parameters\r\n//     //     const transaction = await contract.methods\r\n//     //         .createContract(contractId, propertyId)\r\n//     //         .send({\r\n//     //             from: account,\r\n//     //             value: property.price,\r\n//     //             gas: gasLimit,\r\n//     //             gasPrice: gasPrice,\r\n//     //             maxFeePerGas: null, // Let MetaMask handle this\r\n//     //             maxPriorityFeePerGas: null // Let MetaMask handle this\r\n//     //         });\r\n\r\n//     //     // Wait for transaction receipt\r\n//     //     const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\r\n        \r\n//     //     if (!receipt.status) {\r\n//     //         throw new Error('Transaction failed. Please check the transaction on block explorer.');\r\n//     //     }\r\n\r\n//     //     // Reload properties and show success\r\n//     //     await loadProperties();\r\n//     //     setError('Purchase completed successfully!');\r\n        \r\n//     //   } catch (err) {\r\n//     //     console.error('Purchase error:', err);\r\n        \r\n//     //     // Handle specific error cases\r\n//     //     if (err.message.includes('User denied transaction')) {\r\n//     //         setError('Transaction was cancelled by user');\r\n//     //     } else if (err.message.includes('insufficient funds')) {\r\n//     //         setError('Insufficient funds to complete the purchase');\r\n//     //     } else if (err.message.includes('Property must be verified')) {\r\n//     //         setError('This property must be verified before purchase. Please contact the administrator.');\r\n//     //     } else {\r\n//     //         setError(`Failed to purchase property: ${err.message}`);\r\n//     //     }\r\n//     //   } finally {\r\n//     //     setIsProcessing(false);\r\n//     //   }\r\n//     // };\r\n//     const handlePurchase = async (propertyId) => {\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n    \r\n//         try {\r\n//             if (!contract || !account) {\r\n//                 throw new Error('Please connect your wallet first');\r\n//             }\r\n    \r\n//             const property = properties.find(p => p.id === propertyId);\r\n//             if (!property) {\r\n//                 throw new Error('Property not found');\r\n//             }\r\n    \r\n//             // Check if property is active\r\n//             if (!property.isActive) {\r\n//                 throw new Error('Property is not available for purchase');\r\n//             }\r\n    \r\n//             // Check if sender is not the owner\r\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\r\n//                 throw new Error('You cannot purchase your own property');\r\n//             }\r\n    \r\n//             const contractId = `${propertyId}-${Date.now()}`;\r\n    \r\n//             // Convert price to string to avoid BigInt issues\r\n//             const propertyPrice = property.price.toString();\r\n            \r\n//             // Log transaction details for debugging\r\n//             console.log('Transaction details:', {\r\n//                 contractId,\r\n//                 propertyId,\r\n//                 price: propertyPrice,\r\n//                 from: account\r\n//             });\r\n    \r\n//             const transaction = await contract.methods\r\n//                 .createContract(contractId, propertyId)\r\n//                 .send({\r\n//                     from: account,\r\n//                     value: propertyPrice,\r\n//                     gas: 500000,\r\n//                     gasPrice: await web3Instance.eth.getGasPrice()\r\n//                 });\r\n    \r\n//             console.log('Transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setError('Purchase completed successfully!');\r\n            \r\n//         } catch (err) {\r\n//             console.error('Detailed purchase error:', err);\r\n//             if (err.message.includes('insufficient funds')) {\r\n//                 setError('You do not have enough funds to complete this purchase');\r\n//             } else if (err.message.includes('Property is not available')) {\r\n//                 setError('This property is not available for purchase');\r\n//             } else if (err.message.includes('own property')) {\r\n//                 setError('You cannot purchase your own property');\r\n//             } else {\r\n//                 setError('Failed to complete purchase. Please check your wallet and try again.');\r\n//             }\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n   \r\n\r\n\r\n\r\n//     const initializeBlockchain = async () => {\r\n//         setIsLoading(true);\r\n//         setError('');\r\n        \r\n//         try {\r\n//             setConnectionStatus('Initializing Web3...');\r\n//             const web3 = await initializeWeb3();\r\n//             setWeb3Instance(web3);\r\n    \r\n//             // Get accounts after web3 initialization\r\n//             const accounts = await web3.eth.getAccounts();\r\n//             if (accounts.length > 0) {\r\n//                 setAccount(accounts[0]);\r\n//             }\r\n    \r\n//             setConnectionStatus('Checking network...');\r\n//             const chainId = await web3.eth.getChainId();\r\n            \r\n//             if (chainId !== 31337) {\r\n//                 setConnectionStatus('Switching to Hardhat network...');\r\n//                 await switchToHardhatNetwork();\r\n//             }\r\n    \r\n//             setConnectionStatus('Initializing contract...');\r\n//             const contractInstance = await initializeContract(web3);\r\n//             setContract(contractInstance);\r\n            \r\n//             await loadProperties(contractInstance);\r\n//             setConnectionStatus('Connected');\r\n            \r\n//         } catch (err) {\r\n//             console.error('Initialization error:', err);\r\n//             setError(displayErrorMessage(err, 'Initialization Error'));\r\n//             setConnectionStatus('Connection failed');\r\n//         } finally {\r\n//             setIsLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             await initializeBlockchain();\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.on('chainChanged', () => {\r\n//                     window.location.reload();\r\n//                 });\r\n                \r\n//                 window.ethereum.on('accountsChanged', handleAccountChange);\r\n//             }\r\n//         };\r\n//         init();\r\n        \r\n//         return () => {\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.removeListener('accountsChanged', handleAccountChange);\r\n//                 window.ethereum.removeListener('chainChanged', handleChainChange);\r\n//             }\r\n//         };\r\n//     }, []);\r\n\r\n\r\n    \r\n\r\n\r\n\r\n//     if (isLoading) {\r\n//         return (\r\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n//                 <div className=\"text-center\">\r\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n//         <div className=\"container mx-auto p-4 min-h-screen\">\r\n//             <Card className=\"mb-6\">\r\n//                 <CardHeader>\r\n//                     <div className=\"flex justify-between items-center\">\r\n//                         <h1 className=\"text-2xl font-bold\">Real Estate- Buy/Sell</h1>\r\n//                         <div className=\"flex gap-2\">\r\n//                             <Button \r\n//                                 onClick={() => loadProperties()} \r\n//                                 disabled={!contract || isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\r\n//                                 Refresh\r\n//                             </Button>\r\n//                             <Button \r\n//                                 //onClick={connectWallet}\r\n//                                 onClick={async () => {\r\n//                                     try {\r\n//                                         const { address, web3Instance } = await connectWallet();\r\n//                                         setAccount(address);\r\n//                                         setWeb3Instance(web3Instance);\r\n//                                         await loadProperties(contract);\r\n//                                     } catch (err) {\r\n//                                         setError(err.message);\r\n//                                     }\r\n//                                 }}\r\n\r\n//                                 ///////\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <Wallet className=\"h-4 w-4\" />\r\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n//                             </Button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardHeader>\r\n//             </Card>\r\n\r\n//             {error && (\r\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\r\n//                     <AlertCircle className=\"h-4 w-4\" />\r\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             <div className=\"grid md:grid-cols-2 gap-6\">\r\n//                 <Card>\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Plus className=\"h-5 w-5\" />\r\n//                             List New Property\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent>\r\n//                         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//                             <Input\r\n//                                 name=\"id\"\r\n//                                 placeholder=\"Property ID\"\r\n//                                 value={newProperty.id}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"title\"\r\n//                                 placeholder=\"Property Title\"\r\n//                                 value={newProperty.title}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Textarea\r\n//                                 name=\"description\"\r\n//                                 placeholder=\"Property Description\"\r\n//                                 value={newProperty.description}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"min-h-[100px]\"\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"location\"\r\n//                                 placeholder=\"Location\"\r\n//                                 value={newProperty.location}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"price\"\r\n//                                 type=\"number\"\r\n//                                 step=\"0.01\"\r\n//                                 placeholder=\"Price (ETH)\"\r\n//                                 value={newProperty.price}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Button \r\n//                                 type=\"submit\" \r\n//                                 disabled={isProcessing || !contract}\r\n//                                 className=\"w-full\"\r\n//                             >\r\n//                                 {isProcessing ? (\r\n//                                     <div className=\"flex items-center justify-center gap-2\">\r\n//                                         <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                         Processing...\r\n//                                     </div>\r\n//                                 ) : 'List Property'}\r\n//                             </Button>\r\n//                         </form>\r\n//                     </CardContent>\r\n//                 </Card>\r\n\r\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Building className=\"h-5 w-5\" />\r\n//                             Listed Properties\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent className=\"p-0\">\r\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n//                             <div className=\"space-y-4 p-6\">\r\n//                                 {properties.length === 0 ? (\r\n//                                     <div className=\"text-center text-gray-500 py-8\">\r\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n//                                         <p>No properties listed yet</p>\r\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\r\n//                                     </div>\r\n//                                 ) : (\r\n//                                     properties.map((property, index) => (\r\n//                                         <Card key={index} className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\r\n//                                             <div className=\"space-y-3\">\r\n//                                                 <div className=\"flex justify-between items-start\">\r\n//                                                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\r\n//                                                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n//                                                         property.isActive \r\n//                                                             ? 'bg-green-100 text-green-700'\r\n//                                                             : 'bg-red-100 text-red-700'\r\n//                                                     }`}>\r\n//                                                         {property.isActive ? 'Active' : 'Sold'}\r\n//                                                     </span>\r\n//                                                 </div>\r\n                                                \r\n//                                                 <div className=\"text-sm space-y-2\">\r\n//                                                     <p className=\"text-gray-600 italic\">{property.description}</p>\r\n                                                    \r\n//                                                     <div className=\"grid grid-cols-2 gap-4\">\r\n//                                                         <div>\r\n//                                                             <p className=\"font-medium text-gray-600\">Location</p>\r\n//                                                             <p>{property.location}</p>\r\n//                                                         </div>\r\n//                                                         <div>\r\n//                                                             <p className=\"font-medium text-gray-600\">Price</p>\r\n//                                                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\r\n//                                                         </div>\r\n//                                                     </div>\r\n\r\n\r\n//                                                     <div>\r\n//                                                         <p className=\"font-medium text-gray-600\">Owner</p>\r\n//                                                         <p className=\"truncate text-xs\">{property.owner}</p>\r\n//                                                     </div>\r\n                                                    \r\n                                                        \r\n\r\n\r\n//                                                     <div className=\"flex justify-between items-center pt-2\">\r\n//                                                         <p className=\"text-xs text-gray-500\">\r\n//                                                      Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\r\n//                                                         </p>\r\n//                                                           <ContractDetails \r\n//                                                           property={property}\r\n//                                                           formatPrice={(price) => formatPrice(web3Instance, price)}\r\n//                                                            />\r\n//                                                       </div>\r\n//                                                 </div>\r\n\r\n//                                                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\r\n//                                                     <Button \r\n//                                                         onClick={() => handlePurchase(property.id)}\r\n//                                                         disabled={isProcessing}\r\n//                                                         className=\"w-full mt-4\"\r\n//                                                         variant=\"outline\"\r\n//                                                     >\r\n//                                                         {isProcessing ? (\r\n//                                                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                                                 Processing Purchase...\r\n//                                                             </div>\r\n//                                                         ) : 'Purchase Property'}\r\n//                                                     </Button>\r\n//                                                 )}\r\n//                                             </div>\r\n//                                         </Card>\r\n//                                     ))\r\n//                                 )}\r\n//                             </div>\r\n//                         </ScrollArea>\r\n//                     </CardContent>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default RealEstateApp;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}