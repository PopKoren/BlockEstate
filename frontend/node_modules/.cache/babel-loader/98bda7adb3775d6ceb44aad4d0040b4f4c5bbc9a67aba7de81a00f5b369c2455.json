{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evyatar\\\\Documents\\\\Smart contract\\\\website\\\\BlockEstate\\\\frontend\\\\src\\\\real-estate-package\\\\RealEstateApp.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Card, CardHeader, CardContent } from './components/ui/card';\n// import { Button } from './components/ui/button';\n// import { Alert, AlertDescription } from './components/ui/alert';\n// import { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\n// import { ScrollArea } from './components/ui/scroll-area';\n// import ContractDetails from './components/ui/ContractDetails';\n// import PropertyForm from './components/ui/PropertyForm';\n\n// // Web3 Utilities\n// import { \n//     initializeWeb3, \n//     initializeContract, \n//     connectWallet, \n//     switchToHardhatNetwork, \n//     formatPrice,\n//     checkPropertyAvailability\n// } from './utilsApp/web3';\n\n// // Error Handling Utilities\n// import { \n//     validatePropertyData,\n//     validateTransaction,\n//     calculatePropertyPurchaseGas,\n//     displayErrorMessage,\n//     validatePropertyFormData\n// } from './utilsApp/errors';\n\n// const RealEstateApp = () => {\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [isProcessing, setIsProcessing] = useState(false);\n//     const [account, setAccount] = useState('');\n//     const [contract, setContract] = useState(null);\n//     const [web3Instance, setWeb3Instance] = useState(null);\n//     const [properties, setProperties] = useState([]);\n//     const [error, setError] = useState('');\n//     const [success, setSuccess] = useState('');\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n\n//     const initializeBlockchain = async () => {\n//         setIsLoading(true);\n//         setError('');\n\n//         try {\n//             setConnectionStatus('Initializing Web3...');\n//             const web3 = await initializeWeb3();\n//             setWeb3Instance(web3);\n\n//             const accounts = await web3.eth.getAccounts();\n//             if (accounts.length > 0) {\n//                 setAccount(accounts[0]);\n//             }\n\n//             setConnectionStatus('Checking network...');\n//             const chainId = await web3.eth.getChainId();\n\n//             if (chainId !== 31337) {\n//                 setConnectionStatus('Switching to Hardhat network...');\n//                 await switchToHardhatNetwork();\n//             }\n\n//             setConnectionStatus('Initializing contract...');\n//             const contractInstance = await initializeContract(web3);\n//             setContract(contractInstance);\n\n//             await loadProperties(contractInstance);\n//             setConnectionStatus('Connected');\n\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Initialization Error'));\n//             setConnectionStatus('Connection failed');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     const loadProperties = async (contractInstance = contract) => {\n//         try {\n//             if (!contractInstance) throw new Error('Contract not initialized');\n//             const results = await contractInstance.methods.getAllProperties().call();\n//             setProperties(results || []);\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\n//         }\n//     };\n//     const handlePropertySubmit = async (propertyData) => {\n//         console.log('Starting property submission:', propertyData);\n//         setIsProcessing(true);\n//         setError('');\n//         setSuccess('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             // Validate property data\n//             await validatePropertyData(propertyData, contract);\n\n//             // Convert price to Wei with proper BigInt handling\n//             const priceString = propertyData.price.toString();\n//             const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\n\n//             // Ensure price is handled as string to avoid BigInt mixing\n//             const transaction = await contract.methods.createProperty(\n//                 propertyData.id,\n//                 propertyData.title,\n//                 propertyData.description,\n//                 priceInWei.toString(), // Convert to string to avoid BigInt mixing\n//                 propertyData.location,\n//                 []\n//             ).send({\n//                 from: account,\n//                 gas: 500000,\n//                 gasPrice: (await web3Instance.eth.getGasPrice()).toString() // Convert gas price to string\n//             });\n\n//             console.log('Transaction successful:', transaction);\n//             await loadProperties();\n//             setSuccess(`Property listed successfully! Transaction hash: ${transaction.transactionHash}`);\n//         } catch (err) {\n//             console.error('Property submission error:', err);\n//             setError(err.message || 'An unexpected error occurred');\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     const handlePurchase = async (propertyId) => {\n//         setIsProcessing(true);\n//         setError('');\n//         setSuccess('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             const allProperties = await contract.methods.getAllProperties().call();\n//             const property = allProperties.find(p => p.id === propertyId);\n\n//             if (!property) {\n//                 throw new Error('Property not found');\n//             }\n\n//             if (!property.isActive) {\n//                 throw new Error('This property is no longer available for purchase');\n//             }\n\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\n//                 throw new Error('You cannot purchase your own property');\n//             }\n\n//             // Ensure we have a valid price value\n//             if (!property.price) {\n//                 throw new Error('Invalid property price');\n//             }\n\n//             const contractId = `${propertyId}-${Date.now()}`;\n//             const propertyPrice = property.price.toString();\n\n//             // Check balance using Web3's utils\n//             const balance = await web3Instance.eth.getBalance(account);\n//             const balanceInEther = web3Instance.utils.fromWei(balance, 'ether');\n//             const priceInEther = web3Instance.utils.fromWei(propertyPrice, 'ether');\n\n//             if (Number(balanceInEther) < Number(priceInEther)) {\n//                 throw new Error('Insufficient funds to complete this purchase');\n//             }\n\n//             // Execute the purchase transaction\n//             const transaction = await contract.methods\n//                 .createContract(contractId, propertyId)\n//                 .send({\n//                     from: account,\n//                     value: propertyPrice,\n//                     gas: '500000',\n//                     gasPrice: await web3Instance.eth.getGasPrice()\n//                 });\n\n//             console.log('Purchase transaction successful:', transaction);\n//             await loadProperties();\n//             setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\n\n//         } catch (err) {\n//             console.error('Purchase error:', err);\n//             setError(err.message || 'Failed to complete purchase. Please try again.');\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const init = async () => {\n//             await initializeBlockchain();\n//         };\n\n//         init();\n\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//             window.ethereum.on('chainChanged', () => window.location.reload());\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//                 window.ethereum.removeListener('chainChanged', () => window.location.reload());\n//             }\n//         };\n//     }, []);\n\n//     const handleAccountsChanged = async (accounts) => {\n//         if (accounts.length > 0) {\n//             setAccount(accounts[0]);\n//             await loadProperties(contract);\n//         } else {\n//             setAccount('');\n//             setProperties([]);\n//             setError('Please connect your wallet');\n//         }\n//     };\n\n//     // Render loading state\n//     if (isLoading) {\n//         return (\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\n//                 <div className=\"text-center\">\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"container mx-auto p-4 min-h-screen\">\n//             <Card className=\"mb-6\">\n//                 <CardHeader>\n//                     <div className=\"flex justify-between items-center\">\n//                         <h1 className=\"text-2xl font-bold\">Real Estate Marketplace</h1>\n//                         <div className=\"flex gap-2\">\n//                             <Button \n//                                 onClick={() => loadProperties()} \n//                                 disabled={!contract || isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\n//                                 Refresh\n//                             </Button>\n//                             <Button \n//                                 onClick={async () => {\n//                                     try {\n//                                         const address = await connectWallet();\n//                                         setAccount(address);\n//                                         await loadProperties(contract);\n//                                     } catch (err) {\n//                                         setError(displayErrorMessage(err, 'Wallet Connection Error'));\n//                                     }\n//                                 }}\n//                                 disabled={isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <Wallet className=\"h-4 w-4\" />\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\n//                             </Button>\n//                         </div>\n//                     </div>\n//                 </CardHeader>\n//             </Card>\n\n//             {error && (\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\n//                     <AlertCircle className=\"h-4 w-4\" />\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             {success && (\n//                 <Alert className=\"mb-6 bg-green-50 border-green-200\">\n//                     <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             <div className=\"grid md:grid-cols-2 gap-6\">\n//                 <PropertyForm \n//                     onSubmit={handlePropertySubmit}\n//                     contract={contract}\n//                     isProcessing={isProcessing}\n//                 />\n\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Building className=\"h-5 w-5\" />\n//                             Listed Properties\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent className=\"p-0\">\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n//                             <div className=\"space-y-4 p-6\">\n//                                 {properties.length === 0 ? (\n//                                     <div className=\"text-center text-gray-500 py-8\">\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n//                                         <p>No properties listed yet</p>\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\n//                                     </div>\n//                                 ) : (\n//                                     properties.map((property, index) => (\n//                                         <PropertyCard\n//                                             key={index}\n//                                             property={property}\n//                                             account={account}\n//                                             onPurchase={handlePurchase}\n//                                             isProcessing={isProcessing}\n//                                             web3Instance={web3Instance}\n//                                             formatPrice={formatPrice}\n//                                         />\n//                                     ))\n//                                 )}\n//                             </div>\n//                         </ScrollArea>\n//                     </CardContent>\n//                 </Card>\n//             </div>\n//         </div>\n//     );\n// };\n\n// const PropertyCard = ({ property, account, onPurchase, isProcessing, web3Instance, formatPrice }) => {\n//     return (\n//         <Card className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\n//             <div className=\"space-y-3\">\n//                 <div className=\"flex justify-between items-start\">\n//                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n//                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n//                         property.isActive \n//                             ? 'bg-green-100 text-green-700'\n//                             : 'bg-red-100 text-red-700'\n//                     }`}>\n//                         {property.isActive ? 'Active' : 'Sold'}\n//                     </span>\n//                 </div>\n\n//                 <div className=\"text-sm space-y-2\">\n//                     <p className=\"text-gray-600 italic\">{property.description}</p>\n\n//                     <div className=\"grid grid-cols-2 gap-4\">\n//                         <div>\n//                             <p className=\"font-medium text-gray-600\">Location</p>\n//                             <p>{property.location}</p>\n//                         </div>\n//                         <div>\n//                             <p className=\"font-medium text-gray-600\">Price</p>\n//                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\n//                         </div>\n//                     </div>\n\n//                     <div>\n//                         <p className=\"font-medium text-gray-600\">Owner</p>\n//                         <p className=\"truncate text-xs\">{property.owner}</p>\n//                     </div>\n\n//                     <div className=\"flex justify-between items-center pt-2\">\n//                         <p className=\"text-xs text-gray-500\">\n//                             Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\n//                         </p>\n//                         <ContractDetails \n//                             property={property}\n//                             formatPrice={(price) => formatPrice(web3Instance, price)}\n//                         />\n//                     </div>\n//                 </div>\n\n//                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\n//                     <Button \n//                         onClick={() => onPurchase(property.id)}\n//                         disabled={isProcessing}\n//                         className=\"w-full mt-4\"\n//                         variant=\"outline\"\n//                     >\n//                         {isProcessing ? (\n//                             <div className=\"flex items-center justify-center gap-2\">\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                 Processing Purchase...\n//                             </div>\n//                         ) : 'Purchase Property'}\n//                     </Button>\n//                 )}\n//             </div>\n//         </Card>\n//     );\n// };\n\n// export default RealEstateApp;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Card, CardHeader, CardContent } from './components/ui/card';\nimport { Button } from './components/ui/button';\nimport { Alert, AlertDescription } from './components/ui/alert';\nimport { Building, Wallet, ArrowLeft, AlertCircle, Loader2, DollarSign, MapPin } from 'lucide-react';\nimport PropertyForm from './components/ui/PropertyForm';\nimport { ScrollArea } from './components/ui/scroll-area';\nimport { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice } from './utilsApp/web3';\nimport { displayErrorMessage } from './utilsApp/errors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealEstateApp = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [account, setAccount] = useState('');\n  const [contract, setContract] = useState(null);\n  const [web3Instance, setWeb3Instance] = useState(null);\n  const [myProperties, setMyProperties] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n  const [showListingForm, setShowListingForm] = useState(false);\n  const initializeBlockchain = async () => {\n    setIsLoading(true);\n    setError('');\n    try {\n      setConnectionStatus('Initializing Web3...');\n      const web3 = await initializeWeb3();\n      setWeb3Instance(web3);\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        await loadMyProperties(accounts[0], web3);\n      }\n      setConnectionStatus('Checking network...');\n      const chainId = await web3.eth.getChainId();\n      if (chainId !== 31337) {\n        setConnectionStatus('Switching to Hardhat network...');\n        await switchToHardhatNetwork();\n      }\n      setConnectionStatus('Initializing contract...');\n      const contractInstance = await initializeContract(web3);\n      setContract(contractInstance);\n      setConnectionStatus('Connected');\n    } catch (err) {\n      setError(displayErrorMessage(err, 'Initialization Error'));\n      setConnectionStatus('Connection failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadMyProperties = async (currentAccount, web3) => {\n    try {\n      const contractInstance = await initializeContract(web3);\n      const properties = await contractInstance.methods.getAllProperties().call();\n      const myProps = properties.filter(prop => prop.owner.toLowerCase() === currentAccount.toLowerCase()).map(prop => ({\n        ...prop,\n        price: formatPrice(web3, prop.price)\n      }));\n      setMyProperties(myProps);\n    } catch (err) {\n      setError('Failed to load your properties');\n    }\n  };\n  const handlePropertySubmit = async propertyData => {\n    setIsProcessing(true);\n    setError('');\n    setSuccess('');\n    try {\n      if (!contract || !account || !web3Instance) {\n        throw new Error('Please connect your wallet before listing a property');\n      }\n\n      // Check if property ID already exists\n      const properties = await contract.methods.getAllProperties().call();\n      const propertyExists = properties.some(prop => prop.id.toLowerCase() === propertyData.id.toLowerCase());\n      if (propertyExists) {\n        setError('This Property ID is already in use. Please choose a different unique identifier for your property listing.');\n        return;\n      }\n\n      // Image validation\n      if (!propertyData.image) {\n        setError('Please upload an image for your property listing');\n        return;\n      }\n\n      // Convert price to Wei\n      const priceInWei = web3Instance.utils.toWei(propertyData.price.toString(), 'ether');\n\n      // Store image data (in a real application, you'd upload to IPFS or similar)\n      const propertyWithImage = {\n        ...propertyData,\n        image: propertyData.image\n      };\n\n      // Create property on blockchain\n      await contract.methods.createProperty(propertyData.id, propertyData.title, propertyData.description, priceInWei, propertyData.location, [propertyData.image] // Store image URL/hash in documents array\n      ).send({\n        from: account,\n        gas: 500000\n      });\n      await loadMyProperties(account, web3Instance);\n      setSuccess('Your property has been successfully listed!');\n      setShowListingForm(false);\n    } catch (err) {\n      if (err.message.includes('User denied')) {\n        setError('Transaction was cancelled. Please try again if you want to list your property.');\n      } else if (err.message.includes('insufficient funds')) {\n        setError('Your wallet has insufficient funds to complete this transaction.');\n      } else if (err.message.includes('gas')) {\n        setError('Transaction failed due to gas estimation. Please try again with a different price.');\n      } else {\n        setError('Failed to list your property. Please check your inputs and try again.');\n      }\n      console.error('Property listing error:', err);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  useEffect(() => {\n    initializeBlockchain();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', () => window.location.reload());\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', () => window.location.reload());\n      }\n    };\n  }, []);\n  const handleAccountsChanged = async accounts => {\n    if (accounts.length > 0) {\n      setAccount(accounts[0]);\n      await loadMyProperties(accounts[0], web3Instance);\n    } else {\n      setAccount('');\n      setMyProperties([]);\n      setError('Please connect your wallet');\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4 min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"h-8 w-8 animate-spin mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2\",\n          children: \"Connecting to Blockchain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: connectionStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center flex-wrap gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => navigate('/menu'),\n              variant: \"outline\",\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n                className: \"h-4 w-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 33\n              }, this), \"Back to Menu\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-2xl font-bold\",\n              children: \"Sell Your Property\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2 flex-wrap\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: async () => {\n                try {\n                  const address = await connectWallet();\n                  setAccount(address);\n                  await loadMyProperties(address, web3Instance);\n                } catch (err) {\n                  setError(displayErrorMessage(err, 'Wallet Connection Error'));\n                }\n              },\n              disabled: isProcessing,\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(Wallet, {\n                className: \"h-4 w-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 33\n              }, this), account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"destructive\",\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n        className: \"h-4 w-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n        className: \"ml-2\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"mb-6 bg-green-50 border-green-200\",\n      children: /*#__PURE__*/_jsxDEV(AlertDescription, {\n        className: \"text-green-800\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid md:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold\",\n            children: \"List New Property\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(PropertyForm, {\n            onSubmit: handlePropertySubmit,\n            contract: contract,\n            isProcessing: isProcessing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold\",\n            children: \"My Listed Properties\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(ScrollArea, {\n            className: \"h-[600px]\",\n            children: myProperties.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center py-8\",\n              children: [/*#__PURE__*/_jsxDEV(Building, {\n                className: \"h-12 w-12 mx-auto text-gray-400 mb-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 677,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600\",\n                children: \"No properties listed yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: myProperties.map((property, index) => /*#__PURE__*/_jsxDEV(Card, {\n                className: \"p-4\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"space-y-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"font-semibold\",\n                    children: property.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm text-gray-600\",\n                    children: [\"ID: \", property.id]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 686,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-sm text-gray-600\",\n                    children: property.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 687,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center gap-2 text-sm\",\n                    children: [/*#__PURE__*/_jsxDEV(MapPin, {\n                      className: \"h-4 w-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 689,\n                      columnNumber: 53\n                    }, this), property.location]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 688,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center gap-2 text-sm font-medium\",\n                    children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n                      className: \"h-4 w-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 693,\n                      columnNumber: 53\n                    }, this), property.price, \" ETH\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 692,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center gap-2\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `px-2 py-1 rounded-full text-xs ${property.isActive ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`,\n                      children: property.isActive ? 'Active' : 'Sold'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 697,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 696,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 684,\n                  columnNumber: 45\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 605,\n    columnNumber: 9\n  }, this);\n};\n_s(RealEstateApp, \"GHmMTSc53hKBXdFdbsjMSGywUL0=\", false, function () {\n  return [useNavigate];\n});\n_c = RealEstateApp;\nexport default RealEstateApp;\nvar _c;\n$RefreshReg$(_c, \"RealEstateApp\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Card","CardHeader","CardContent","Button","Alert","AlertDescription","Building","Wallet","ArrowLeft","AlertCircle","Loader2","DollarSign","MapPin","PropertyForm","ScrollArea","initializeWeb3","initializeContract","connectWallet","switchToHardhatNetwork","formatPrice","displayErrorMessage","jsxDEV","_jsxDEV","RealEstateApp","_s","navigate","isLoading","setIsLoading","isProcessing","setIsProcessing","account","setAccount","contract","setContract","web3Instance","setWeb3Instance","myProperties","setMyProperties","error","setError","success","setSuccess","connectionStatus","setConnectionStatus","showListingForm","setShowListingForm","initializeBlockchain","web3","accounts","eth","getAccounts","length","loadMyProperties","chainId","getChainId","contractInstance","err","currentAccount","properties","methods","getAllProperties","call","myProps","filter","prop","owner","toLowerCase","map","price","handlePropertySubmit","propertyData","Error","propertyExists","some","id","image","priceInWei","utils","toWei","toString","propertyWithImage","createProperty","title","description","location","send","from","gas","message","includes","console","window","ethereum","on","handleAccountsChanged","reload","removeListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","variant","address","disabled","slice","onSubmit","property","index","isActive","_c","$RefreshReg$"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/RealEstateApp.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Card, CardHeader, CardContent } from './components/ui/card';\r\n// import { Button } from './components/ui/button';\r\n// import { Alert, AlertDescription } from './components/ui/alert';\r\n// import { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\r\n// import { ScrollArea } from './components/ui/scroll-area';\r\n// import ContractDetails from './components/ui/ContractDetails';\r\n// import PropertyForm from './components/ui/PropertyForm';\r\n\r\n// // Web3 Utilities\r\n// import { \r\n//     initializeWeb3, \r\n//     initializeContract, \r\n//     connectWallet, \r\n//     switchToHardhatNetwork, \r\n//     formatPrice,\r\n//     checkPropertyAvailability\r\n// } from './utilsApp/web3';\r\n\r\n// // Error Handling Utilities\r\n// import { \r\n//     validatePropertyData,\r\n//     validateTransaction,\r\n//     calculatePropertyPurchaseGas,\r\n//     displayErrorMessage,\r\n//     validatePropertyFormData\r\n// } from './utilsApp/errors';\r\n\r\n// const RealEstateApp = () => {\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [isProcessing, setIsProcessing] = useState(false);\r\n//     const [account, setAccount] = useState('');\r\n//     const [contract, setContract] = useState(null);\r\n//     const [web3Instance, setWeb3Instance] = useState(null);\r\n//     const [properties, setProperties] = useState([]);\r\n//     const [error, setError] = useState('');\r\n//     const [success, setSuccess] = useState('');\r\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n\r\n//     const initializeBlockchain = async () => {\r\n//         setIsLoading(true);\r\n//         setError('');\r\n        \r\n//         try {\r\n//             setConnectionStatus('Initializing Web3...');\r\n//             const web3 = await initializeWeb3();\r\n//             setWeb3Instance(web3);\r\n\r\n//             const accounts = await web3.eth.getAccounts();\r\n//             if (accounts.length > 0) {\r\n//                 setAccount(accounts[0]);\r\n//             }\r\n\r\n//             setConnectionStatus('Checking network...');\r\n//             const chainId = await web3.eth.getChainId();\r\n            \r\n//             if (chainId !== 31337) {\r\n//                 setConnectionStatus('Switching to Hardhat network...');\r\n//                 await switchToHardhatNetwork();\r\n//             }\r\n\r\n//             setConnectionStatus('Initializing contract...');\r\n//             const contractInstance = await initializeContract(web3);\r\n//             setContract(contractInstance);\r\n            \r\n//             await loadProperties(contractInstance);\r\n//             setConnectionStatus('Connected');\r\n            \r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Initialization Error'));\r\n//             setConnectionStatus('Connection failed');\r\n//         } finally {\r\n//             setIsLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const loadProperties = async (contractInstance = contract) => {\r\n//         try {\r\n//             if (!contractInstance) throw new Error('Contract not initialized');\r\n//             const results = await contractInstance.methods.getAllProperties().call();\r\n//             setProperties(results || []);\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\r\n//         }\r\n//     };\r\n//     const handlePropertySubmit = async (propertyData) => {\r\n//         console.log('Starting property submission:', propertyData);\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n//         setSuccess('');\r\n    \r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n    \r\n//             // Validate property data\r\n//             await validatePropertyData(propertyData, contract);\r\n    \r\n//             // Convert price to Wei with proper BigInt handling\r\n//             const priceString = propertyData.price.toString();\r\n//             const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\r\n            \r\n//             // Ensure price is handled as string to avoid BigInt mixing\r\n//             const transaction = await contract.methods.createProperty(\r\n//                 propertyData.id,\r\n//                 propertyData.title,\r\n//                 propertyData.description,\r\n//                 priceInWei.toString(), // Convert to string to avoid BigInt mixing\r\n//                 propertyData.location,\r\n//                 []\r\n//             ).send({\r\n//                 from: account,\r\n//                 gas: 500000,\r\n//                 gasPrice: (await web3Instance.eth.getGasPrice()).toString() // Convert gas price to string\r\n//             });\r\n    \r\n//             console.log('Transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setSuccess(`Property listed successfully! Transaction hash: ${transaction.transactionHash}`);\r\n//         } catch (err) {\r\n//             console.error('Property submission error:', err);\r\n//             setError(err.message || 'An unexpected error occurred');\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n//     const handlePurchase = async (propertyId) => {\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n//         setSuccess('');\r\n    \r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n    \r\n//             const allProperties = await contract.methods.getAllProperties().call();\r\n//             const property = allProperties.find(p => p.id === propertyId);\r\n            \r\n//             if (!property) {\r\n//                 throw new Error('Property not found');\r\n//             }\r\n    \r\n//             if (!property.isActive) {\r\n//                 throw new Error('This property is no longer available for purchase');\r\n//             }\r\n    \r\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\r\n//                 throw new Error('You cannot purchase your own property');\r\n//             }\r\n    \r\n//             // Ensure we have a valid price value\r\n//             if (!property.price) {\r\n//                 throw new Error('Invalid property price');\r\n//             }\r\n    \r\n//             const contractId = `${propertyId}-${Date.now()}`;\r\n//             const propertyPrice = property.price.toString();\r\n            \r\n//             // Check balance using Web3's utils\r\n//             const balance = await web3Instance.eth.getBalance(account);\r\n//             const balanceInEther = web3Instance.utils.fromWei(balance, 'ether');\r\n//             const priceInEther = web3Instance.utils.fromWei(propertyPrice, 'ether');\r\n            \r\n//             if (Number(balanceInEther) < Number(priceInEther)) {\r\n//                 throw new Error('Insufficient funds to complete this purchase');\r\n//             }\r\n    \r\n//             // Execute the purchase transaction\r\n//             const transaction = await contract.methods\r\n//                 .createContract(contractId, propertyId)\r\n//                 .send({\r\n//                     from: account,\r\n//                     value: propertyPrice,\r\n//                     gas: '500000',\r\n//                     gasPrice: await web3Instance.eth.getGasPrice()\r\n//                 });\r\n    \r\n//             console.log('Purchase transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\r\n            \r\n//         } catch (err) {\r\n//             console.error('Purchase error:', err);\r\n//             setError(err.message || 'Failed to complete purchase. Please try again.');\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             await initializeBlockchain();\r\n//         };\r\n        \r\n//         init();\r\n        \r\n//         if (window.ethereum) {\r\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n//             window.ethereum.on('chainChanged', () => window.location.reload());\r\n//         }\r\n\r\n//         return () => {\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n//                 window.ethereum.removeListener('chainChanged', () => window.location.reload());\r\n//             }\r\n//         };\r\n//     }, []);\r\n\r\n//     const handleAccountsChanged = async (accounts) => {\r\n//         if (accounts.length > 0) {\r\n//             setAccount(accounts[0]);\r\n//             await loadProperties(contract);\r\n//         } else {\r\n//             setAccount('');\r\n//             setProperties([]);\r\n//             setError('Please connect your wallet');\r\n//         }\r\n//     };\r\n\r\n//     // Render loading state\r\n//     if (isLoading) {\r\n//         return (\r\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n//                 <div className=\"text-center\">\r\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n//     return (\r\n//         <div className=\"container mx-auto p-4 min-h-screen\">\r\n//             <Card className=\"mb-6\">\r\n//                 <CardHeader>\r\n//                     <div className=\"flex justify-between items-center\">\r\n//                         <h1 className=\"text-2xl font-bold\">Real Estate Marketplace</h1>\r\n//                         <div className=\"flex gap-2\">\r\n//                             <Button \r\n//                                 onClick={() => loadProperties()} \r\n//                                 disabled={!contract || isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\r\n//                                 Refresh\r\n//                             </Button>\r\n//                             <Button \r\n//                                 onClick={async () => {\r\n//                                     try {\r\n//                                         const address = await connectWallet();\r\n//                                         setAccount(address);\r\n//                                         await loadProperties(contract);\r\n//                                     } catch (err) {\r\n//                                         setError(displayErrorMessage(err, 'Wallet Connection Error'));\r\n//                                     }\r\n//                                 }}\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <Wallet className=\"h-4 w-4\" />\r\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n//                             </Button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardHeader>\r\n//             </Card>\r\n\r\n//             {error && (\r\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\r\n//                     <AlertCircle className=\"h-4 w-4\" />\r\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             {success && (\r\n//                 <Alert className=\"mb-6 bg-green-50 border-green-200\">\r\n//                     <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             <div className=\"grid md:grid-cols-2 gap-6\">\r\n//                 <PropertyForm \r\n//                     onSubmit={handlePropertySubmit}\r\n//                     contract={contract}\r\n//                     isProcessing={isProcessing}\r\n//                 />\r\n\r\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Building className=\"h-5 w-5\" />\r\n//                             Listed Properties\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent className=\"p-0\">\r\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n//                             <div className=\"space-y-4 p-6\">\r\n//                                 {properties.length === 0 ? (\r\n//                                     <div className=\"text-center text-gray-500 py-8\">\r\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n//                                         <p>No properties listed yet</p>\r\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\r\n//                                     </div>\r\n//                                 ) : (\r\n//                                     properties.map((property, index) => (\r\n//                                         <PropertyCard\r\n//                                             key={index}\r\n//                                             property={property}\r\n//                                             account={account}\r\n//                                             onPurchase={handlePurchase}\r\n//                                             isProcessing={isProcessing}\r\n//                                             web3Instance={web3Instance}\r\n//                                             formatPrice={formatPrice}\r\n//                                         />\r\n//                                     ))\r\n//                                 )}\r\n//                             </div>\r\n//                         </ScrollArea>\r\n//                     </CardContent>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const PropertyCard = ({ property, account, onPurchase, isProcessing, web3Instance, formatPrice }) => {\r\n//     return (\r\n//         <Card className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\r\n//             <div className=\"space-y-3\">\r\n//                 <div className=\"flex justify-between items-start\">\r\n//                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\r\n//                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n//                         property.isActive \r\n//                             ? 'bg-green-100 text-green-700'\r\n//                             : 'bg-red-100 text-red-700'\r\n//                     }`}>\r\n//                         {property.isActive ? 'Active' : 'Sold'}\r\n//                     </span>\r\n//                 </div>\r\n                \r\n//                 <div className=\"text-sm space-y-2\">\r\n//                     <p className=\"text-gray-600 italic\">{property.description}</p>\r\n                    \r\n//                     <div className=\"grid grid-cols-2 gap-4\">\r\n//                         <div>\r\n//                             <p className=\"font-medium text-gray-600\">Location</p>\r\n//                             <p>{property.location}</p>\r\n//                         </div>\r\n//                         <div>\r\n//                             <p className=\"font-medium text-gray-600\">Price</p>\r\n//                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <p className=\"font-medium text-gray-600\">Owner</p>\r\n//                         <p className=\"truncate text-xs\">{property.owner}</p>\r\n//                     </div>\r\n\r\n//                     <div className=\"flex justify-between items-center pt-2\">\r\n//                         <p className=\"text-xs text-gray-500\">\r\n//                             Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\r\n//                         </p>\r\n//                         <ContractDetails \r\n//                             property={property}\r\n//                             formatPrice={(price) => formatPrice(web3Instance, price)}\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\r\n//                     <Button \r\n//                         onClick={() => onPurchase(property.id)}\r\n//                         disabled={isProcessing}\r\n//                         className=\"w-full mt-4\"\r\n//                         variant=\"outline\"\r\n//                     >\r\n//                         {isProcessing ? (\r\n//                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                 Processing Purchase...\r\n//                             </div>\r\n//                         ) : 'Purchase Property'}\r\n//                     </Button>\r\n//                 )}\r\n//             </div>\r\n//         </Card>\r\n//     );\r\n// };\r\n\r\n// export default RealEstateApp;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Card, CardHeader, CardContent } from './components/ui/card';\r\nimport { Button } from './components/ui/button';\r\nimport { Alert, AlertDescription } from './components/ui/alert';\r\nimport { Building, Wallet, ArrowLeft, AlertCircle, Loader2, DollarSign, MapPin } from 'lucide-react';\r\nimport PropertyForm from './components/ui/PropertyForm';\r\nimport { ScrollArea } from './components/ui/scroll-area';\r\n\r\nimport { \r\n    initializeWeb3, \r\n    initializeContract, \r\n    connectWallet, \r\n    switchToHardhatNetwork, \r\n    formatPrice \r\n} from './utilsApp/web3';\r\n\r\nimport { displayErrorMessage } from './utilsApp/errors';\r\n\r\nconst RealEstateApp = () => {\r\n    const navigate = useNavigate();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [account, setAccount] = useState('');\r\n    const [contract, setContract] = useState(null);\r\n    const [web3Instance, setWeb3Instance] = useState(null);\r\n    const [myProperties, setMyProperties] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n    const [showListingForm, setShowListingForm] = useState(false);\r\n\r\n    const initializeBlockchain = async () => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        try {\r\n            setConnectionStatus('Initializing Web3...');\r\n            const web3 = await initializeWeb3();\r\n            setWeb3Instance(web3);\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n            if (accounts.length > 0) {\r\n                setAccount(accounts[0]);\r\n                await loadMyProperties(accounts[0], web3);\r\n            }\r\n\r\n            setConnectionStatus('Checking network...');\r\n            const chainId = await web3.eth.getChainId();\r\n            \r\n            if (chainId !== 31337) {\r\n                setConnectionStatus('Switching to Hardhat network...');\r\n                await switchToHardhatNetwork();\r\n            }\r\n\r\n            setConnectionStatus('Initializing contract...');\r\n            const contractInstance = await initializeContract(web3);\r\n            setContract(contractInstance);\r\n            setConnectionStatus('Connected');\r\n            \r\n        } catch (err) {\r\n            setError(displayErrorMessage(err, 'Initialization Error'));\r\n            setConnectionStatus('Connection failed');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadMyProperties = async (currentAccount, web3) => {\r\n        try {\r\n            const contractInstance = await initializeContract(web3);\r\n            const properties = await contractInstance.methods.getAllProperties().call();\r\n            \r\n            const myProps = properties.filter(prop => \r\n                prop.owner.toLowerCase() === currentAccount.toLowerCase()\r\n            ).map(prop => ({\r\n                ...prop,\r\n                price: formatPrice(web3, prop.price)\r\n            }));\r\n            \r\n            setMyProperties(myProps);\r\n        } catch (err) {\r\n            setError('Failed to load your properties');\r\n        }\r\n    };\r\n\r\n    const handlePropertySubmit = async (propertyData) => {\r\n        setIsProcessing(true);\r\n        setError('');\r\n        setSuccess('');\r\n    \r\n        try {\r\n            if (!contract || !account || !web3Instance) {\r\n                throw new Error('Please connect your wallet before listing a property');\r\n            }\r\n    \r\n            // Check if property ID already exists\r\n            const properties = await contract.methods.getAllProperties().call();\r\n            const propertyExists = properties.some(prop => \r\n                prop.id.toLowerCase() === propertyData.id.toLowerCase()\r\n            );\r\n            \r\n            if (propertyExists) {\r\n                setError('This Property ID is already in use. Please choose a different unique identifier for your property listing.');\r\n                return;\r\n            }\r\n    \r\n            // Image validation\r\n            if (!propertyData.image) {\r\n                setError('Please upload an image for your property listing');\r\n                return;\r\n            }\r\n    \r\n            // Convert price to Wei\r\n            const priceInWei = web3Instance.utils.toWei(propertyData.price.toString(), 'ether');\r\n    \r\n            // Store image data (in a real application, you'd upload to IPFS or similar)\r\n            const propertyWithImage = {\r\n                ...propertyData,\r\n                image: propertyData.image\r\n            };\r\n    \r\n            // Create property on blockchain\r\n            await contract.methods.createProperty(\r\n                propertyData.id,\r\n                propertyData.title,\r\n                propertyData.description,\r\n                priceInWei,\r\n                propertyData.location,\r\n                [propertyData.image] // Store image URL/hash in documents array\r\n            ).send({\r\n                from: account,\r\n                gas: 500000\r\n            });\r\n    \r\n            await loadMyProperties(account, web3Instance);\r\n            setSuccess('Your property has been successfully listed!');\r\n            setShowListingForm(false);\r\n    \r\n        } catch (err) {\r\n            if (err.message.includes('User denied')) {\r\n                setError('Transaction was cancelled. Please try again if you want to list your property.');\r\n            } else if (err.message.includes('insufficient funds')) {\r\n                setError('Your wallet has insufficient funds to complete this transaction.');\r\n            } else if (err.message.includes('gas')) {\r\n                setError('Transaction failed due to gas estimation. Please try again with a different price.');\r\n            } else {\r\n                setError('Failed to list your property. Please check your inputs and try again.');\r\n            }\r\n            console.error('Property listing error:', err);\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        initializeBlockchain();\r\n        \r\n        if (window.ethereum) {\r\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n            window.ethereum.on('chainChanged', () => window.location.reload());\r\n        }\r\n\r\n        return () => {\r\n            if (window.ethereum) {\r\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n                window.ethereum.removeListener('chainChanged', () => window.location.reload());\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const handleAccountsChanged = async (accounts) => {\r\n        if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n            await loadMyProperties(accounts[0], web3Instance);\r\n        } else {\r\n            setAccount('');\r\n            setMyProperties([]);\r\n            setError('Please connect your wallet');\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n                    <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n                    <p className=\"text-gray-600\">{connectionStatus}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4 min-h-screen\">\r\n            <Card className=\"mb-6\">\r\n                <CardHeader>\r\n                    <div className=\"flex justify-between items-center flex-wrap gap-4\">\r\n                        <div className=\"flex items-center gap-4\">\r\n                            <Button \r\n                                onClick={() => navigate('/menu')} \r\n                                variant=\"outline\"\r\n                                className=\"flex items-center gap-2\"\r\n                            >\r\n                                <ArrowLeft className=\"h-4 w-4\" />\r\n                                Back to Menu\r\n                            </Button>\r\n                            <h1 className=\"text-2xl font-bold\">Sell Your Property</h1>\r\n                        </div>\r\n                        <div className=\"flex gap-2 flex-wrap\">\r\n                            <Button \r\n                                onClick={async () => {\r\n                                    try {\r\n                                        const address = await connectWallet();\r\n                                        setAccount(address);\r\n                                        await loadMyProperties(address, web3Instance);\r\n                                    } catch (err) {\r\n                                        setError(displayErrorMessage(err, 'Wallet Connection Error'));\r\n                                    }\r\n                                }}\r\n                                disabled={isProcessing}\r\n                                className=\"flex items-center gap-2\"\r\n                            >\r\n                                <Wallet className=\"h-4 w-4\" />\r\n                                {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </CardHeader>\r\n            </Card>\r\n\r\n            {error && (\r\n                <Alert variant=\"destructive\" className=\"mb-6\">\r\n                    <AlertCircle className=\"h-4 w-4\" />\r\n                    <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n                </Alert>\r\n            )}\r\n\r\n            {success && (\r\n                <Alert className=\"mb-6 bg-green-50 border-green-200\">\r\n                    <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\r\n                </Alert>\r\n            )}\r\n\r\n            <div className=\"grid md:grid-cols-2 gap-6\">\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h2 className=\"text-xl font-semibold\">List New Property</h2>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <PropertyForm \r\n                            onSubmit={handlePropertySubmit}\r\n                            contract={contract}\r\n                            isProcessing={isProcessing}\r\n                        />\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h2 className=\"text-xl font-semibold\">My Listed Properties</h2>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <ScrollArea className=\"h-[600px]\">\r\n                            {myProperties.length === 0 ? (\r\n                                <div className=\"text-center py-8\">\r\n                                    <Building className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\r\n                                    <p className=\"text-gray-600\">No properties listed yet</p>\r\n                                </div>\r\n                            ) : (\r\n                                <div className=\"space-y-4\">\r\n                                    {myProperties.map((property, index) => (\r\n                                        <Card key={index} className=\"p-4\">\r\n                                            <div className=\"space-y-2\">\r\n                                                <h3 className=\"font-semibold\">{property.title}</h3>\r\n                                                <p className=\"text-sm text-gray-600\">ID: {property.id}</p>\r\n                                                <p className=\"text-sm text-gray-600\">{property.description}</p>\r\n                                                <div className=\"flex items-center gap-2 text-sm\">\r\n                                                    <MapPin className=\"h-4 w-4\" />\r\n                                                    {property.location}\r\n                                                </div>\r\n                                                <div className=\"flex items-center gap-2 text-sm font-medium\">\r\n                                                    <DollarSign className=\"h-4 w-4\" />\r\n                                                    {property.price} ETH\r\n                                                </div>\r\n                                                <div className=\"flex items-center gap-2\">\r\n                                                    <span className={`px-2 py-1 rounded-full text-xs ${\r\n                                                        property.isActive \r\n                                                            ? 'bg-green-100 text-green-700' \r\n                                                            : 'bg-red-100 text-red-700'\r\n                                                    }`}>\r\n                                                        {property.isActive ? 'Active' : 'Sold'}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Card>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </ScrollArea>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RealEstateApp;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}