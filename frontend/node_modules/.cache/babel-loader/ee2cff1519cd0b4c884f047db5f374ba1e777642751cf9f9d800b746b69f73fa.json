{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evyatar\\\\Documents\\\\Smart contract\\\\website\\\\BlockEstate\\\\frontend\\\\src\\\\real-estate-package\\\\RealEstateApp.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Card, CardHeader, CardContent } from './components/ui/card';\n// import { Button } from './components/ui/button';\n// import { Input } from './components/ui/input';\n// import { Alert, AlertDescription } from './components/ui/alert';\n// import { Building, Wallet, Plus, RefreshCw, AlertCircle, Loader2  ,MapPin, DollarSign} from 'lucide-react';\n// import { Textarea } from './components/ui/textarea';\n// import { ScrollArea } from './components/ui/scroll-area';\n// import ContractDetails from './components/ui/ContractDetails';\n// import { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice, validatePropertyData } from './utilsApp/web3';\n// import { displayErrorMessage } from './utilsApp/errors';\n// import './styles.css';\n\n// const RealEstateApp = () => {\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [isProcessing, setIsProcessing] = useState(false);\n//     const [account, setAccount] = useState('');\n//     const [contract, setContract] = useState(null);\n//     const [web3Instance, setWeb3Instance] = useState(null);\n//     const [properties, setProperties] = useState([]);\n//     const [error, setError] = useState('');\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n//     const [newProperty, setNewProperty] = useState({\n//         id: '',\n//         title: '',\n//         description: '',\n//         location: '',\n//         price: '',\n//         documents: []\n//     });\n\n//     const loadProperties = async (contractInstance = contract) => {\n//         try {\n//             if (!contractInstance) throw new Error('Contract not initialized');\n//             const results = await contractInstance.methods.getAllProperties().call();\n//             setProperties(results || []);\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\n//         }\n//     };\n\n//     const handleAccountChange = async (accounts) => {\n//         if (accounts.length > 0) {\n//             setAccount(accounts[0]);\n//             await loadProperties(contract);\n//         } else {\n//             setAccount('');\n//             setProperties([]);\n//             setError('Please connect your wallet');\n//         }\n//     };\n\n//     const handleChainChange = () => {\n//         window.location.reload();\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n//         setNewProperty(prev => ({\n//             ...prev,\n//             [name]: value\n//         }));\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         setIsProcessing(true);\n//         setError('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             validatePropertyData(newProperty);\n//             const priceInWei = web3Instance.utils.toWei(newProperty.price, 'ether');\n\n//             await contract.methods.createProperty(\n//                 newProperty.id,\n//                 newProperty.title,\n//                 newProperty.description,\n//                 priceInWei,\n//                 newProperty.location,\n//                 []\n//             ).send({\n//                 from: account,\n//                 gas: 500000\n//             });\n\n//             await loadProperties();\n//             setNewProperty({\n//                 id: '',\n//                 title: '',\n//                 description: '',\n//                 location: '',\n//                 price: '',\n//                 documents: []\n//             });\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Property Creation Error'));\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     // const handlePurchase = async (propertyId) => {\n//     //     setIsProcessing(true);\n//     //     setError('');\n\n//     //     try {\n//     //     // Validate connection and requirements\n//     //     if (!contract || !account || !web3Instance) {\n//     //         throw new Error('Please ensure your wallet is connected');\n//     //     }\n\n//     //     // Find the property\n//     //     const property = properties.find(p => p.id === propertyId);\n//     //     if (!property) {\n//     //         throw new Error('Property not found');\n//     //     }\n\n//     //     // Verify user has sufficient balance\n//     //     const balance = await web3Instance.eth.getBalance(account);\n//     //     if (BigInt(balance) < BigInt(property.price)) {\n//     //         throw new Error('Insufficient funds to complete the purchase');\n//     //     }\n\n//     //     const contractId = `${propertyId}-${Date.now()}`;\n\n//     //     // Get gas estimation with try-catch\n//     //     let gasEstimate;\n//     //     try {\n//     //         gasEstimate = await contract.methods\n//     //             .createContract(contractId, propertyId)\n//     //             .estimateGas({\n//     //                 from: account,\n//     //                 value: property.price\n//     //             });\n//     //     } catch (gasError) {\n//     //         console.error('Gas estimation error:', gasError);\n//     //         // Check for specific error messages\n//     //         if (gasError.message.includes('Property must be verified')) {\n//     //             throw new Error('This property must be verified before purchase');\n//     //         }\n//     //         throw new Error('Failed to estimate gas. The transaction may fail.');\n//     //     }\n\n//     //     // Get current gas price\n//     //     const gasPrice = await web3Instance.eth.getGasPrice();\n\n//     //     // Add 20% buffer to gas estimate\n//     //     const gasLimit = Math.ceil(gasEstimate * 1.2);\n\n//     //     // Execute the transaction with specific parameters\n//     //     const transaction = await contract.methods\n//     //         .createContract(contractId, propertyId)\n//     //         .send({\n//     //             from: account,\n//     //             value: property.price,\n//     //             gas: gasLimit,\n//     //             gasPrice: gasPrice,\n//     //             maxFeePerGas: null, // Let MetaMask handle this\n//     //             maxPriorityFeePerGas: null // Let MetaMask handle this\n//     //         });\n\n//     //     // Wait for transaction receipt\n//     //     const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\n\n//     //     if (!receipt.status) {\n//     //         throw new Error('Transaction failed. Please check the transaction on block explorer.');\n//     //     }\n\n//     //     // Reload properties and show success\n//     //     await loadProperties();\n//     //     setError('Purchase completed successfully!');\n\n//     //   } catch (err) {\n//     //     console.error('Purchase error:', err);\n\n//     //     // Handle specific error cases\n//     //     if (err.message.includes('User denied transaction')) {\n//     //         setError('Transaction was cancelled by user');\n//     //     } else if (err.message.includes('insufficient funds')) {\n//     //         setError('Insufficient funds to complete the purchase');\n//     //     } else if (err.message.includes('Property must be verified')) {\n//     //         setError('This property must be verified before purchase. Please contact the administrator.');\n//     //     } else {\n//     //         setError(`Failed to purchase property: ${err.message}`);\n//     //     }\n//     //   } finally {\n//     //     setIsProcessing(false);\n//     //   }\n//     // };\n//     const handlePurchase = async (propertyId) => {\n//         setIsProcessing(true);\n//         setError('');\n\n//         try {\n//             if (!contract || !account) {\n//                 throw new Error('Please connect your wallet first');\n//             }\n\n//             const property = properties.find(p => p.id === propertyId);\n//             if (!property) {\n//                 throw new Error('Property not found');\n//             }\n\n//             // Check if property is active\n//             if (!property.isActive) {\n//                 throw new Error('Property is not available for purchase');\n//             }\n\n//             // Check if sender is not the owner\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\n//                 throw new Error('You cannot purchase your own property');\n//             }\n\n//             const contractId = `${propertyId}-${Date.now()}`;\n\n//             // Convert price to string to avoid BigInt issues\n//             const propertyPrice = property.price.toString();\n\n//             // Log transaction details for debugging\n//             console.log('Transaction details:', {\n//                 contractId,\n//                 propertyId,\n//                 price: propertyPrice,\n//                 from: account\n//             });\n\n//             const transaction = await contract.methods\n//                 .createContract(contractId, propertyId)\n//                 .send({\n//                     from: account,\n//                     value: propertyPrice,\n//                     gas: 500000,\n//                     gasPrice: await web3Instance.eth.getGasPrice()\n//                 });\n\n//             console.log('Transaction successful:', transaction);\n//             await loadProperties();\n//             setError('Purchase completed successfully!');\n\n//         } catch (err) {\n//             console.error('Detailed purchase error:', err);\n//             if (err.message.includes('insufficient funds')) {\n//                 setError('You do not have enough funds to complete this purchase');\n//             } else if (err.message.includes('Property is not available')) {\n//                 setError('This property is not available for purchase');\n//             } else if (err.message.includes('own property')) {\n//                 setError('You cannot purchase your own property');\n//             } else {\n//                 setError('Failed to complete purchase. Please check your wallet and try again.');\n//             }\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     const initializeBlockchain = async () => {\n//         setIsLoading(true);\n//         setError('');\n\n//         try {\n//             setConnectionStatus('Initializing Web3...');\n//             const web3 = await initializeWeb3();\n//             setWeb3Instance(web3);\n\n//             // Get accounts after web3 initialization\n//             const accounts = await web3.eth.getAccounts();\n//             if (accounts.length > 0) {\n//                 setAccount(accounts[0]);\n//             }\n\n//             setConnectionStatus('Checking network...');\n//             const chainId = await web3.eth.getChainId();\n\n//             if (chainId !== 31337) {\n//                 setConnectionStatus('Switching to Hardhat network...');\n//                 await switchToHardhatNetwork();\n//             }\n\n//             setConnectionStatus('Initializing contract...');\n//             const contractInstance = await initializeContract(web3);\n//             setContract(contractInstance);\n\n//             await loadProperties(contractInstance);\n//             setConnectionStatus('Connected');\n\n//         } catch (err) {\n//             console.error('Initialization error:', err);\n//             setError(displayErrorMessage(err, 'Initialization Error'));\n//             setConnectionStatus('Connection failed');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const init = async () => {\n//             await initializeBlockchain();\n//             if (window.ethereum) {\n//                 window.ethereum.on('chainChanged', () => {\n//                     window.location.reload();\n//                 });\n\n//                 window.ethereum.on('accountsChanged', handleAccountChange);\n//             }\n//         };\n//         init();\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountChange);\n//                 window.ethereum.removeListener('chainChanged', handleChainChange);\n//             }\n//         };\n//     }, []);\n\n//     if (isLoading) {\n//         return (\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\n//                 <div className=\"text-center\">\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"container mx-auto p-4 min-h-screen\">\n//             <Card className=\"mb-6\">\n//                 <CardHeader>\n//                     <div className=\"flex justify-between items-center\">\n//                         <h1 className=\"text-2xl font-bold\">Real Estate- Buy/Sell</h1>\n//                         <div className=\"flex gap-2\">\n//                             <Button \n//                                 onClick={() => loadProperties()} \n//                                 disabled={!contract || isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\n//                                 Refresh\n//                             </Button>\n//                             <Button \n//                                 //onClick={connectWallet}\n//                                 onClick={async () => {\n//                                     try {\n//                                         const { address, web3Instance } = await connectWallet();\n//                                         setAccount(address);\n//                                         setWeb3Instance(web3Instance);\n//                                         await loadProperties(contract);\n//                                     } catch (err) {\n//                                         setError(err.message);\n//                                     }\n//                                 }}\n\n//                                 ///////\n//                                 disabled={isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <Wallet className=\"h-4 w-4\" />\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\n//                             </Button>\n//                         </div>\n//                     </div>\n//                 </CardHeader>\n//             </Card>\n\n//             {error && (\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\n//                     <AlertCircle className=\"h-4 w-4\" />\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             <div className=\"grid md:grid-cols-2 gap-6\">\n//                 <Card>\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Plus className=\"h-5 w-5\" />\n//                             List New Property\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent>\n//                         <form onSubmit={handleSubmit} className=\"space-y-4\">\n//                             <Input\n//                                 name=\"id\"\n//                                 placeholder=\"Property ID\"\n//                                 value={newProperty.id}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Input\n//                                 name=\"title\"\n//                                 placeholder=\"Property Title\"\n//                                 value={newProperty.title}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Textarea\n//                                 name=\"description\"\n//                                 placeholder=\"Property Description\"\n//                                 value={newProperty.description}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                                 className=\"min-h-[100px]\"\n//                             />\n//                             <Input\n//                                 name=\"location\"\n//                                 placeholder=\"Location\"\n//                                 value={newProperty.location}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Input\n//                                 name=\"price\"\n//                                 type=\"number\"\n//                                 step=\"0.01\"\n//                                 placeholder=\"Price (ETH)\"\n//                                 value={newProperty.price}\n//                                 onChange={handleInputChange}\n//                                 required\n//                                 disabled={isProcessing}\n//                             />\n//                             <Button \n//                                 type=\"submit\" \n//                                 disabled={isProcessing || !contract}\n//                                 className=\"w-full\"\n//                             >\n//                                 {isProcessing ? (\n//                                     <div className=\"flex items-center justify-center gap-2\">\n//                                         <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                         Processing...\n//                                     </div>\n//                                 ) : 'List Property'}\n//                             </Button>\n//                         </form>\n//                     </CardContent>\n//                 </Card>\n\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Building className=\"h-5 w-5\" />\n//                             Listed Properties\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent className=\"p-0\">\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n//                             <div className=\"space-y-4 p-6\">\n//                                 {properties.length === 0 ? (\n//                                     <div className=\"text-center text-gray-500 py-8\">\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n//                                         <p>No properties listed yet</p>\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\n//                                     </div>\n//                                 ) : (\n//                                     properties.map((property, index) => (\n//                                         <Card key={index} className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\n//                                             <div className=\"space-y-3\">\n//                                                 <div className=\"flex justify-between items-start\">\n//                                                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n//                                                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n//                                                         property.isActive \n//                                                             ? 'bg-green-100 text-green-700'\n//                                                             : 'bg-red-100 text-red-700'\n//                                                     }`}>\n//                                                         {property.isActive ? 'Active' : 'Sold'}\n//                                                     </span>\n//                                                 </div>\n\n//                                                 <div className=\"text-sm space-y-2\">\n//                                                     <p className=\"text-gray-600 italic\">{property.description}</p>\n\n//                                                     <div className=\"grid grid-cols-2 gap-4\">\n//                                                         <div>\n//                                                             <p className=\"font-medium text-gray-600\">Location</p>\n//                                                             <p>{property.location}</p>\n//                                                         </div>\n//                                                         <div>\n//                                                             <p className=\"font-medium text-gray-600\">Price</p>\n//                                                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\n//                                                         </div>\n//                                                     </div>\n\n//                                                     <div>\n//                                                         <p className=\"font-medium text-gray-600\">Owner</p>\n//                                                         <p className=\"truncate text-xs\">{property.owner}</p>\n//                                                     </div>\n\n//                                                     <div className=\"flex justify-between items-center pt-2\">\n//                                                         <p className=\"text-xs text-gray-500\">\n//                                                      Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\n//                                                         </p>\n//                                                           <ContractDetails \n//                                                           property={property}\n//                                                           formatPrice={(price) => formatPrice(web3Instance, price)}\n//                                                            />\n//                                                       </div>\n//                                                 </div>\n\n//                                                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\n//                                                     <Button \n//                                                         onClick={() => handlePurchase(property.id)}\n//                                                         disabled={isProcessing}\n//                                                         className=\"w-full mt-4\"\n//                                                         variant=\"outline\"\n//                                                     >\n//                                                         {isProcessing ? (\n//                                                             <div className=\"flex items-center justify-center gap-2\">\n//                                                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                                                 Processing Purchase...\n//                                                             </div>\n//                                                         ) : 'Purchase Property'}\n//                                                     </Button>\n//                                                 )}\n//                                             </div>\n//                                         </Card>\n//                                     ))\n//                                 )}\n//                             </div>\n//                         </ScrollArea>\n//                     </CardContent>\n//                 </Card>\n//             </div>\n//         </div>\n//     );\n// };\n// export default RealEstateApp;\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardContent } from './components/ui/card';\nimport { Button } from './components/ui/button';\nimport { Alert, AlertDescription } from './components/ui/alert';\nimport { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\nimport { ScrollArea } from './components/ui/scroll-area';\nimport ContractDetails from './components/ui/ContractDetails';\nimport PropertyForm from './components/ui/PropertyForm';\n\n// Web3 Utilities\nimport { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice, checkPropertyAvailability } from './utilsApp/web3';\n\n// Error Handling Utilities\nimport { validatePropertyData, validateTransaction, calculatePropertyPurchaseGas, displayErrorMessage, validatePropertyFormData } from './utilsApp/errors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealEstateApp = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [account, setAccount] = useState('');\n  const [contract, setContract] = useState(null);\n  const [web3Instance, setWeb3Instance] = useState(null);\n  const [properties, setProperties] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n  const initializeBlockchain = async () => {\n    setIsLoading(true);\n    setError('');\n    try {\n      setConnectionStatus('Initializing Web3...');\n      const web3 = await initializeWeb3();\n      setWeb3Instance(web3);\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n      }\n      setConnectionStatus('Checking network...');\n      const chainId = await web3.eth.getChainId();\n      if (chainId !== 31337) {\n        setConnectionStatus('Switching to Hardhat network...');\n        await switchToHardhatNetwork();\n      }\n      setConnectionStatus('Initializing contract...');\n      const contractInstance = await initializeContract(web3);\n      setContract(contractInstance);\n      await loadProperties(contractInstance);\n      setConnectionStatus('Connected');\n    } catch (err) {\n      setError(displayErrorMessage(err, 'Initialization Error'));\n      setConnectionStatus('Connection failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadProperties = async (contractInstance = contract) => {\n    try {\n      if (!contractInstance) throw new Error('Contract not initialized');\n      const results = await contractInstance.methods.getAllProperties().call();\n      setProperties(results || []);\n    } catch (err) {\n      setError(displayErrorMessage(err, 'Failed to load properties'));\n    }\n  };\n  const handlePropertySubmit = async propertyData => {\n    console.log('Starting property submission:', propertyData);\n    setIsProcessing(true);\n    setError('');\n    setSuccess('');\n    if (!window.ethereum) {\n      setError('MetaMask is not installed. Please install MetaMask to continue.');\n      setIsProcessing(false);\n      return;\n    }\n    if (!contract) {\n      setError('Smart contract is not initialized. Please wait for the connection.');\n      setIsProcessing(false);\n      return;\n    }\n    if (!account) {\n      setError('Please connect your wallet first.');\n      setIsProcessing(false);\n      return;\n    }\n    try {\n      // First, validate the property data\n      console.log('Validating property data...');\n      await validatePropertyData(propertyData, contract);\n\n      // Convert the price to Wei with proper string handling\n      const priceString = propertyData.price.toString();\n      console.log('Converting price to Wei:', priceString);\n      const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\n\n      // Get the current gas price\n      const gasPrice = await web3Instance.eth.getGasPrice();\n      console.log('Current gas price:', gasPrice);\n\n      // Prepare the transaction\n      const transaction = contract.methods.createProperty(propertyData.id, propertyData.title, propertyData.description, priceInWei, propertyData.location, []);\n\n      // Estimate gas\n      const gasEstimate = await transaction.estimateGas({\n        from: account\n      });\n      console.log('Estimated gas:', gasEstimate);\n\n      // Send the transaction\n      console.log('Sending transaction...');\n      const result = await transaction.send({\n        from: account,\n        gas: Math.floor(gasEstimate * 1.2),\n        // Add 20% buffer\n        gasPrice: gasPrice\n      });\n      console.log('Transaction successful:', result);\n      await loadProperties();\n      setSuccess(`Property listed successfully! Transaction hash: ${result.transactionHash}`);\n    } catch (error) {\n      console.error('Detailed error:', error);\n      if (error.code === 4001) {\n        setError('Transaction was rejected by user.');\n      } else if (error.message.includes('insufficient funds')) {\n        setError('Insufficient funds to complete this transaction.');\n      } else if (error.message.includes('already exists')) {\n        setError('A property with this ID already exists.');\n      } else {\n        setError(`Transaction failed: ${error.message}`);\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const handlePurchase = async propertyId => {\n    setIsProcessing(true);\n    setError('');\n    setSuccess('');\n    try {\n      if (!contract || !account || !web3Instance) {\n        throw new Error('Please connect your wallet first');\n      }\n\n      // Check property availability\n      const availability = await checkPropertyAvailability(propertyId, contract);\n      if (!availability.exists || !availability.isActive) {\n        throw new Error('Property is not available for purchase');\n      }\n      if (availability.owner.toLowerCase() === account.toLowerCase()) {\n        throw new Error('You cannot purchase your own property');\n      }\n      const property = properties.find(p => p.id === propertyId);\n      if (!property) {\n        throw new Error('Property not found');\n      }\n\n      // Validate transaction and calculate gas\n      await validateTransaction(web3Instance, account, property.price.toString());\n      const contractId = `${propertyId}-${Date.now()}`;\n      const gasLimit = await calculatePropertyPurchaseGas(contract, propertyId, contractId, account, property.price.toString());\n\n      // Execute purchase\n      const transaction = await contract.methods.createContract(contractId, propertyId).send({\n        from: account,\n        value: property.price.toString(),\n        gas: gasLimit,\n        gasPrice: await web3Instance.eth.getGasPrice()\n      });\n      await loadProperties();\n      setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\n    } catch (err) {\n      setError(displayErrorMessage(err, 'Purchase Error'));\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      await initializeBlockchain();\n    };\n    init();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', () => window.location.reload());\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', () => window.location.reload());\n      }\n    };\n  }, []);\n  const handleAccountsChanged = async accounts => {\n    if (accounts.length > 0) {\n      setAccount(accounts[0]);\n      await loadProperties(contract);\n    } else {\n      setAccount('');\n      setProperties([]);\n      setError('Please connect your wallet');\n    }\n  };\n\n  // Render loading state\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4 min-h-screen flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Loader2, {\n          className: \"h-8 w-8 animate-spin mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2\",\n          children: \"Connecting to Blockchain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: connectionStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-6\",\n      children: /*#__PURE__*/_jsxDEV(CardHeader, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-2xl font-bold\",\n            children: \"Real Estate Marketplace\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => loadProperties(),\n              disabled: !contract || isProcessing,\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n                className: `h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 33\n              }, this), \"Refresh\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: async () => {\n                try {\n                  const address = await connectWallet();\n                  setAccount(address);\n                  await loadProperties(contract);\n                } catch (err) {\n                  setError(displayErrorMessage(err, 'Wallet Connection Error'));\n                }\n              },\n              disabled: isProcessing,\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(Wallet, {\n                className: \"h-4 w-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 33\n              }, this), account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"destructive\",\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n        className: \"h-4 w-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n        className: \"ml-2\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"mb-6 bg-green-50 border-green-200\",\n      children: /*#__PURE__*/_jsxDEV(AlertDescription, {\n        className: \"text-green-800\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid md:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(PropertyForm, {\n        onSubmit: handlePropertySubmit,\n        contract: contract,\n        isProcessing: isProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: \"h-[calc(100vh-12rem)]\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(Building, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 29\n            }, this), \"Listed Properties\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-0\",\n          children: /*#__PURE__*/_jsxDEV(ScrollArea, {\n            className: \"h-[calc(100vh-16rem)]\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4 p-6\",\n              children: properties.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center text-gray-500 py-8\",\n                children: [/*#__PURE__*/_jsxDEV(Building, {\n                  className: \"h-12 w-12 mx-auto mb-4 opacity-50\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 889,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No properties listed yet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 890,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm mt-2\",\n                  children: \"Create your first property listing to get started\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 891,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 37\n              }, this) : properties.map((property, index) => /*#__PURE__*/_jsxDEV(PropertyCard, {\n                property: property,\n                account: account,\n                onPurchase: handlePurchase,\n                isProcessing: isProcessing,\n                web3Instance: web3Instance,\n                formatPrice: formatPrice\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 895,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 886,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 822,\n    columnNumber: 9\n  }, this);\n};\n_s(RealEstateApp, \"b7Z0L0BE08kEm4g4/x7euQCL2d0=\");\n_c = RealEstateApp;\nconst PropertyCard = ({\n  property,\n  account,\n  onPurchase,\n  isProcessing,\n  web3Instance,\n  formatPrice\n}) => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"p-4 hover:shadow-lg transition-shadow duration-200\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-lg\",\n          children: property.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `px-2 py-1 rounded-full text-xs font-medium ${property.isActive ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`,\n          children: property.isActive ? 'Active' : 'Sold'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 italic\",\n          children: property.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium text-gray-600\",\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 935,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: property.location\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium text-gray-600\",\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [formatPrice(web3Instance, property.price), \" ETH\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium text-gray-600\",\n            children: \"Owner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 945,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"truncate text-xs\",\n            children: property.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center pt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500\",\n            children: [\"Listed: \", new Date(Number(property.createdAt) * 1000).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ContractDetails, {\n            property: property,\n            formatPrice: price => formatPrice(web3Instance, price)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 17\n      }, this), property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => onPurchase(property.id),\n        disabled: isProcessing,\n        className: \"w-full mt-4\",\n        variant: \"outline\",\n        children: isProcessing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Loader2, {\n            className: \"h-4 w-4 animate-spin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 33\n          }, this), \"Processing Purchase...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 29\n        }, this) : 'Purchase Property'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 917,\n    columnNumber: 9\n  }, this);\n};\n_c2 = PropertyCard;\nexport default RealEstateApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"RealEstateApp\");\n$RefreshReg$(_c2, \"PropertyCard\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardHeader","CardContent","Button","Alert","AlertDescription","Building","Wallet","RefreshCw","AlertCircle","Loader2","ScrollArea","ContractDetails","PropertyForm","initializeWeb3","initializeContract","connectWallet","switchToHardhatNetwork","formatPrice","checkPropertyAvailability","validatePropertyData","validateTransaction","calculatePropertyPurchaseGas","displayErrorMessage","validatePropertyFormData","jsxDEV","_jsxDEV","RealEstateApp","_s","isLoading","setIsLoading","isProcessing","setIsProcessing","account","setAccount","contract","setContract","web3Instance","setWeb3Instance","properties","setProperties","error","setError","success","setSuccess","connectionStatus","setConnectionStatus","initializeBlockchain","web3","accounts","eth","getAccounts","length","chainId","getChainId","contractInstance","loadProperties","err","Error","results","methods","getAllProperties","call","handlePropertySubmit","propertyData","console","log","window","ethereum","priceString","price","toString","priceInWei","utils","toWei","gasPrice","getGasPrice","transaction","createProperty","id","title","description","location","gasEstimate","estimateGas","from","result","send","gas","Math","floor","transactionHash","code","message","includes","handlePurchase","propertyId","availability","exists","isActive","owner","toLowerCase","property","find","p","contractId","Date","now","gasLimit","createContract","value","init","on","handleAccountsChanged","reload","removeListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","address","slice","variant","onSubmit","map","index","PropertyCard","onPurchase","_c","Number","createdAt","toLocaleDateString","_c2","$RefreshReg$"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/RealEstateApp.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Card, CardHeader, CardContent } from './components/ui/card';\r\n// import { Button } from './components/ui/button';\r\n// import { Input } from './components/ui/input';\r\n// import { Alert, AlertDescription } from './components/ui/alert';\r\n// import { Building, Wallet, Plus, RefreshCw, AlertCircle, Loader2  ,MapPin, DollarSign} from 'lucide-react';\r\n// import { Textarea } from './components/ui/textarea';\r\n// import { ScrollArea } from './components/ui/scroll-area';\r\n// import ContractDetails from './components/ui/ContractDetails';\r\n// import { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork, formatPrice, validatePropertyData } from './utilsApp/web3';\r\n// import { displayErrorMessage } from './utilsApp/errors';\r\n// import './styles.css';\r\n\r\n// const RealEstateApp = () => {\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [isProcessing, setIsProcessing] = useState(false);\r\n//     const [account, setAccount] = useState('');\r\n//     const [contract, setContract] = useState(null);\r\n//     const [web3Instance, setWeb3Instance] = useState(null);\r\n//     const [properties, setProperties] = useState([]);\r\n//     const [error, setError] = useState('');\r\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n//     const [newProperty, setNewProperty] = useState({\r\n//         id: '',\r\n//         title: '',\r\n//         description: '',\r\n//         location: '',\r\n//         price: '',\r\n//         documents: []\r\n//     });\r\n\r\n//     const loadProperties = async (contractInstance = contract) => {\r\n//         try {\r\n//             if (!contractInstance) throw new Error('Contract not initialized');\r\n//             const results = await contractInstance.methods.getAllProperties().call();\r\n//             setProperties(results || []);\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\r\n//         }\r\n//     };\r\n\r\n//     const handleAccountChange = async (accounts) => {\r\n//         if (accounts.length > 0) {\r\n//             setAccount(accounts[0]);\r\n//             await loadProperties(contract);\r\n//         } else {\r\n//             setAccount('');\r\n//             setProperties([]);\r\n//             setError('Please connect your wallet');\r\n//         }\r\n//     };\r\n\r\n//     const handleChainChange = () => {\r\n//         window.location.reload();\r\n//     };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setNewProperty(prev => ({\r\n//             ...prev,\r\n//             [name]: value\r\n//         }));\r\n//     };\r\n   \r\n   \r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n\r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n\r\n//             validatePropertyData(newProperty);\r\n//             const priceInWei = web3Instance.utils.toWei(newProperty.price, 'ether');\r\n\r\n//             await contract.methods.createProperty(\r\n//                 newProperty.id,\r\n//                 newProperty.title,\r\n//                 newProperty.description,\r\n//                 priceInWei,\r\n//                 newProperty.location,\r\n//                 []\r\n//             ).send({\r\n//                 from: account,\r\n//                 gas: 500000\r\n//             });\r\n\r\n//             await loadProperties();\r\n//             setNewProperty({\r\n//                 id: '',\r\n//                 title: '',\r\n//                 description: '',\r\n//                 location: '',\r\n//                 price: '',\r\n//                 documents: []\r\n//             });\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Property Creation Error'));\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n\r\n//     // const handlePurchase = async (propertyId) => {\r\n//     //     setIsProcessing(true);\r\n//     //     setError('');\r\n\r\n//     //     try {\r\n//     //     // Validate connection and requirements\r\n//     //     if (!contract || !account || !web3Instance) {\r\n//     //         throw new Error('Please ensure your wallet is connected');\r\n//     //     }\r\n\r\n//     //     // Find the property\r\n//     //     const property = properties.find(p => p.id === propertyId);\r\n//     //     if (!property) {\r\n//     //         throw new Error('Property not found');\r\n//     //     }\r\n\r\n//     //     // Verify user has sufficient balance\r\n//     //     const balance = await web3Instance.eth.getBalance(account);\r\n//     //     if (BigInt(balance) < BigInt(property.price)) {\r\n//     //         throw new Error('Insufficient funds to complete the purchase');\r\n//     //     }\r\n\r\n//     //     const contractId = `${propertyId}-${Date.now()}`;\r\n\r\n//     //     // Get gas estimation with try-catch\r\n//     //     let gasEstimate;\r\n//     //     try {\r\n//     //         gasEstimate = await contract.methods\r\n//     //             .createContract(contractId, propertyId)\r\n//     //             .estimateGas({\r\n//     //                 from: account,\r\n//     //                 value: property.price\r\n//     //             });\r\n//     //     } catch (gasError) {\r\n//     //         console.error('Gas estimation error:', gasError);\r\n//     //         // Check for specific error messages\r\n//     //         if (gasError.message.includes('Property must be verified')) {\r\n//     //             throw new Error('This property must be verified before purchase');\r\n//     //         }\r\n//     //         throw new Error('Failed to estimate gas. The transaction may fail.');\r\n//     //     }\r\n\r\n//     //     // Get current gas price\r\n//     //     const gasPrice = await web3Instance.eth.getGasPrice();\r\n        \r\n//     //     // Add 20% buffer to gas estimate\r\n//     //     const gasLimit = Math.ceil(gasEstimate * 1.2);\r\n\r\n//     //     // Execute the transaction with specific parameters\r\n//     //     const transaction = await contract.methods\r\n//     //         .createContract(contractId, propertyId)\r\n//     //         .send({\r\n//     //             from: account,\r\n//     //             value: property.price,\r\n//     //             gas: gasLimit,\r\n//     //             gasPrice: gasPrice,\r\n//     //             maxFeePerGas: null, // Let MetaMask handle this\r\n//     //             maxPriorityFeePerGas: null // Let MetaMask handle this\r\n//     //         });\r\n\r\n//     //     // Wait for transaction receipt\r\n//     //     const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\r\n        \r\n//     //     if (!receipt.status) {\r\n//     //         throw new Error('Transaction failed. Please check the transaction on block explorer.');\r\n//     //     }\r\n\r\n//     //     // Reload properties and show success\r\n//     //     await loadProperties();\r\n//     //     setError('Purchase completed successfully!');\r\n        \r\n//     //   } catch (err) {\r\n//     //     console.error('Purchase error:', err);\r\n        \r\n//     //     // Handle specific error cases\r\n//     //     if (err.message.includes('User denied transaction')) {\r\n//     //         setError('Transaction was cancelled by user');\r\n//     //     } else if (err.message.includes('insufficient funds')) {\r\n//     //         setError('Insufficient funds to complete the purchase');\r\n//     //     } else if (err.message.includes('Property must be verified')) {\r\n//     //         setError('This property must be verified before purchase. Please contact the administrator.');\r\n//     //     } else {\r\n//     //         setError(`Failed to purchase property: ${err.message}`);\r\n//     //     }\r\n//     //   } finally {\r\n//     //     setIsProcessing(false);\r\n//     //   }\r\n//     // };\r\n//     const handlePurchase = async (propertyId) => {\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n    \r\n//         try {\r\n//             if (!contract || !account) {\r\n//                 throw new Error('Please connect your wallet first');\r\n//             }\r\n    \r\n//             const property = properties.find(p => p.id === propertyId);\r\n//             if (!property) {\r\n//                 throw new Error('Property not found');\r\n//             }\r\n    \r\n//             // Check if property is active\r\n//             if (!property.isActive) {\r\n//                 throw new Error('Property is not available for purchase');\r\n//             }\r\n    \r\n//             // Check if sender is not the owner\r\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\r\n//                 throw new Error('You cannot purchase your own property');\r\n//             }\r\n    \r\n//             const contractId = `${propertyId}-${Date.now()}`;\r\n    \r\n//             // Convert price to string to avoid BigInt issues\r\n//             const propertyPrice = property.price.toString();\r\n            \r\n//             // Log transaction details for debugging\r\n//             console.log('Transaction details:', {\r\n//                 contractId,\r\n//                 propertyId,\r\n//                 price: propertyPrice,\r\n//                 from: account\r\n//             });\r\n    \r\n//             const transaction = await contract.methods\r\n//                 .createContract(contractId, propertyId)\r\n//                 .send({\r\n//                     from: account,\r\n//                     value: propertyPrice,\r\n//                     gas: 500000,\r\n//                     gasPrice: await web3Instance.eth.getGasPrice()\r\n//                 });\r\n    \r\n//             console.log('Transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setError('Purchase completed successfully!');\r\n            \r\n//         } catch (err) {\r\n//             console.error('Detailed purchase error:', err);\r\n//             if (err.message.includes('insufficient funds')) {\r\n//                 setError('You do not have enough funds to complete this purchase');\r\n//             } else if (err.message.includes('Property is not available')) {\r\n//                 setError('This property is not available for purchase');\r\n//             } else if (err.message.includes('own property')) {\r\n//                 setError('You cannot purchase your own property');\r\n//             } else {\r\n//                 setError('Failed to complete purchase. Please check your wallet and try again.');\r\n//             }\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n   \r\n\r\n\r\n\r\n//     const initializeBlockchain = async () => {\r\n//         setIsLoading(true);\r\n//         setError('');\r\n        \r\n//         try {\r\n//             setConnectionStatus('Initializing Web3...');\r\n//             const web3 = await initializeWeb3();\r\n//             setWeb3Instance(web3);\r\n    \r\n//             // Get accounts after web3 initialization\r\n//             const accounts = await web3.eth.getAccounts();\r\n//             if (accounts.length > 0) {\r\n//                 setAccount(accounts[0]);\r\n//             }\r\n    \r\n//             setConnectionStatus('Checking network...');\r\n//             const chainId = await web3.eth.getChainId();\r\n            \r\n//             if (chainId !== 31337) {\r\n//                 setConnectionStatus('Switching to Hardhat network...');\r\n//                 await switchToHardhatNetwork();\r\n//             }\r\n    \r\n//             setConnectionStatus('Initializing contract...');\r\n//             const contractInstance = await initializeContract(web3);\r\n//             setContract(contractInstance);\r\n            \r\n//             await loadProperties(contractInstance);\r\n//             setConnectionStatus('Connected');\r\n            \r\n//         } catch (err) {\r\n//             console.error('Initialization error:', err);\r\n//             setError(displayErrorMessage(err, 'Initialization Error'));\r\n//             setConnectionStatus('Connection failed');\r\n//         } finally {\r\n//             setIsLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             await initializeBlockchain();\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.on('chainChanged', () => {\r\n//                     window.location.reload();\r\n//                 });\r\n                \r\n//                 window.ethereum.on('accountsChanged', handleAccountChange);\r\n//             }\r\n//         };\r\n//         init();\r\n        \r\n//         return () => {\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.removeListener('accountsChanged', handleAccountChange);\r\n//                 window.ethereum.removeListener('chainChanged', handleChainChange);\r\n//             }\r\n//         };\r\n//     }, []);\r\n\r\n\r\n    \r\n\r\n\r\n\r\n//     if (isLoading) {\r\n//         return (\r\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n//                 <div className=\"text-center\">\r\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n//         <div className=\"container mx-auto p-4 min-h-screen\">\r\n//             <Card className=\"mb-6\">\r\n//                 <CardHeader>\r\n//                     <div className=\"flex justify-between items-center\">\r\n//                         <h1 className=\"text-2xl font-bold\">Real Estate- Buy/Sell</h1>\r\n//                         <div className=\"flex gap-2\">\r\n//                             <Button \r\n//                                 onClick={() => loadProperties()} \r\n//                                 disabled={!contract || isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\r\n//                                 Refresh\r\n//                             </Button>\r\n//                             <Button \r\n//                                 //onClick={connectWallet}\r\n//                                 onClick={async () => {\r\n//                                     try {\r\n//                                         const { address, web3Instance } = await connectWallet();\r\n//                                         setAccount(address);\r\n//                                         setWeb3Instance(web3Instance);\r\n//                                         await loadProperties(contract);\r\n//                                     } catch (err) {\r\n//                                         setError(err.message);\r\n//                                     }\r\n//                                 }}\r\n\r\n//                                 ///////\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <Wallet className=\"h-4 w-4\" />\r\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n//                             </Button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardHeader>\r\n//             </Card>\r\n\r\n//             {error && (\r\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\r\n//                     <AlertCircle className=\"h-4 w-4\" />\r\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             <div className=\"grid md:grid-cols-2 gap-6\">\r\n//                 <Card>\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Plus className=\"h-5 w-5\" />\r\n//                             List New Property\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent>\r\n//                         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//                             <Input\r\n//                                 name=\"id\"\r\n//                                 placeholder=\"Property ID\"\r\n//                                 value={newProperty.id}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"title\"\r\n//                                 placeholder=\"Property Title\"\r\n//                                 value={newProperty.title}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Textarea\r\n//                                 name=\"description\"\r\n//                                 placeholder=\"Property Description\"\r\n//                                 value={newProperty.description}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"min-h-[100px]\"\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"location\"\r\n//                                 placeholder=\"Location\"\r\n//                                 value={newProperty.location}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Input\r\n//                                 name=\"price\"\r\n//                                 type=\"number\"\r\n//                                 step=\"0.01\"\r\n//                                 placeholder=\"Price (ETH)\"\r\n//                                 value={newProperty.price}\r\n//                                 onChange={handleInputChange}\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Button \r\n//                                 type=\"submit\" \r\n//                                 disabled={isProcessing || !contract}\r\n//                                 className=\"w-full\"\r\n//                             >\r\n//                                 {isProcessing ? (\r\n//                                     <div className=\"flex items-center justify-center gap-2\">\r\n//                                         <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                         Processing...\r\n//                                     </div>\r\n//                                 ) : 'List Property'}\r\n//                             </Button>\r\n//                         </form>\r\n//                     </CardContent>\r\n//                 </Card>\r\n\r\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Building className=\"h-5 w-5\" />\r\n//                             Listed Properties\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent className=\"p-0\">\r\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n//                             <div className=\"space-y-4 p-6\">\r\n//                                 {properties.length === 0 ? (\r\n//                                     <div className=\"text-center text-gray-500 py-8\">\r\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n//                                         <p>No properties listed yet</p>\r\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\r\n//                                     </div>\r\n//                                 ) : (\r\n//                                     properties.map((property, index) => (\r\n//                                         <Card key={index} className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\r\n//                                             <div className=\"space-y-3\">\r\n//                                                 <div className=\"flex justify-between items-start\">\r\n//                                                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\r\n//                                                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n//                                                         property.isActive \r\n//                                                             ? 'bg-green-100 text-green-700'\r\n//                                                             : 'bg-red-100 text-red-700'\r\n//                                                     }`}>\r\n//                                                         {property.isActive ? 'Active' : 'Sold'}\r\n//                                                     </span>\r\n//                                                 </div>\r\n                                                \r\n//                                                 <div className=\"text-sm space-y-2\">\r\n//                                                     <p className=\"text-gray-600 italic\">{property.description}</p>\r\n                                                    \r\n//                                                     <div className=\"grid grid-cols-2 gap-4\">\r\n//                                                         <div>\r\n//                                                             <p className=\"font-medium text-gray-600\">Location</p>\r\n//                                                             <p>{property.location}</p>\r\n//                                                         </div>\r\n//                                                         <div>\r\n//                                                             <p className=\"font-medium text-gray-600\">Price</p>\r\n//                                                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\r\n//                                                         </div>\r\n//                                                     </div>\r\n\r\n\r\n//                                                     <div>\r\n//                                                         <p className=\"font-medium text-gray-600\">Owner</p>\r\n//                                                         <p className=\"truncate text-xs\">{property.owner}</p>\r\n//                                                     </div>\r\n                                                    \r\n                                                        \r\n\r\n\r\n//                                                     <div className=\"flex justify-between items-center pt-2\">\r\n//                                                         <p className=\"text-xs text-gray-500\">\r\n//                                                      Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\r\n//                                                         </p>\r\n//                                                           <ContractDetails \r\n//                                                           property={property}\r\n//                                                           formatPrice={(price) => formatPrice(web3Instance, price)}\r\n//                                                            />\r\n//                                                       </div>\r\n//                                                 </div>\r\n\r\n//                                                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\r\n//                                                     <Button \r\n//                                                         onClick={() => handlePurchase(property.id)}\r\n//                                                         disabled={isProcessing}\r\n//                                                         className=\"w-full mt-4\"\r\n//                                                         variant=\"outline\"\r\n//                                                     >\r\n//                                                         {isProcessing ? (\r\n//                                                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                                                 Processing Purchase...\r\n//                                                             </div>\r\n//                                                         ) : 'Purchase Property'}\r\n//                                                     </Button>\r\n//                                                 )}\r\n//                                             </div>\r\n//                                         </Card>\r\n//                                     ))\r\n//                                 )}\r\n//                             </div>\r\n//                         </ScrollArea>\r\n//                     </CardContent>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default RealEstateApp;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardHeader, CardContent } from './components/ui/card';\r\nimport { Button } from './components/ui/button';\r\nimport { Alert, AlertDescription } from './components/ui/alert';\r\nimport { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\r\nimport { ScrollArea } from './components/ui/scroll-area';\r\nimport ContractDetails from './components/ui/ContractDetails';\r\nimport PropertyForm from './components/ui/PropertyForm';\r\n\r\n// Web3 Utilities\r\nimport { \r\n    initializeWeb3, \r\n    initializeContract, \r\n    connectWallet, \r\n    switchToHardhatNetwork, \r\n    formatPrice,\r\n    checkPropertyAvailability\r\n} from './utilsApp/web3';\r\n\r\n// Error Handling Utilities\r\nimport { \r\n    validatePropertyData,\r\n    validateTransaction,\r\n    calculatePropertyPurchaseGas,\r\n    displayErrorMessage,\r\n    validatePropertyFormData\r\n} from './utilsApp/errors';\r\n\r\nconst RealEstateApp = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [account, setAccount] = useState('');\r\n    const [contract, setContract] = useState(null);\r\n    const [web3Instance, setWeb3Instance] = useState(null);\r\n    const [properties, setProperties] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n\r\n    const initializeBlockchain = async () => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        try {\r\n            setConnectionStatus('Initializing Web3...');\r\n            const web3 = await initializeWeb3();\r\n            setWeb3Instance(web3);\r\n\r\n            const accounts = await web3.eth.getAccounts();\r\n            if (accounts.length > 0) {\r\n                setAccount(accounts[0]);\r\n            }\r\n\r\n            setConnectionStatus('Checking network...');\r\n            const chainId = await web3.eth.getChainId();\r\n            \r\n            if (chainId !== 31337) {\r\n                setConnectionStatus('Switching to Hardhat network...');\r\n                await switchToHardhatNetwork();\r\n            }\r\n\r\n            setConnectionStatus('Initializing contract...');\r\n            const contractInstance = await initializeContract(web3);\r\n            setContract(contractInstance);\r\n            \r\n            await loadProperties(contractInstance);\r\n            setConnectionStatus('Connected');\r\n            \r\n        } catch (err) {\r\n            setError(displayErrorMessage(err, 'Initialization Error'));\r\n            setConnectionStatus('Connection failed');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadProperties = async (contractInstance = contract) => {\r\n        try {\r\n            if (!contractInstance) throw new Error('Contract not initialized');\r\n            const results = await contractInstance.methods.getAllProperties().call();\r\n            setProperties(results || []);\r\n        } catch (err) {\r\n            setError(displayErrorMessage(err, 'Failed to load properties'));\r\n        }\r\n    };\r\n    const handlePropertySubmit = async (propertyData) => {\r\n        console.log('Starting property submission:', propertyData);\r\n        setIsProcessing(true);\r\n        setError('');\r\n        setSuccess('');\r\n    \r\n        if (!window.ethereum) {\r\n            setError('MetaMask is not installed. Please install MetaMask to continue.');\r\n            setIsProcessing(false);\r\n            return;\r\n        }\r\n    \r\n        if (!contract) {\r\n            setError('Smart contract is not initialized. Please wait for the connection.');\r\n            setIsProcessing(false);\r\n            return;\r\n        }\r\n    \r\n        if (!account) {\r\n            setError('Please connect your wallet first.');\r\n            setIsProcessing(false);\r\n            return;\r\n        }\r\n    \r\n        try {\r\n            // First, validate the property data\r\n            console.log('Validating property data...');\r\n            await validatePropertyData(propertyData, contract);\r\n    \r\n            // Convert the price to Wei with proper string handling\r\n            const priceString = propertyData.price.toString();\r\n            console.log('Converting price to Wei:', priceString);\r\n            const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\r\n    \r\n            // Get the current gas price\r\n            const gasPrice = await web3Instance.eth.getGasPrice();\r\n            console.log('Current gas price:', gasPrice);\r\n    \r\n            // Prepare the transaction\r\n            const transaction = contract.methods.createProperty(\r\n                propertyData.id,\r\n                propertyData.title,\r\n                propertyData.description,\r\n                priceInWei,\r\n                propertyData.location,\r\n                []\r\n            );\r\n    \r\n            // Estimate gas\r\n            const gasEstimate = await transaction.estimateGas({\r\n                from: account\r\n            });\r\n            console.log('Estimated gas:', gasEstimate);\r\n    \r\n            // Send the transaction\r\n            console.log('Sending transaction...');\r\n            const result = await transaction.send({\r\n                from: account,\r\n                gas: Math.floor(gasEstimate * 1.2), // Add 20% buffer\r\n                gasPrice: gasPrice\r\n            });\r\n    \r\n            console.log('Transaction successful:', result);\r\n            await loadProperties();\r\n            setSuccess(`Property listed successfully! Transaction hash: ${result.transactionHash}`);\r\n        } catch (error) {\r\n            console.error('Detailed error:', error);\r\n            \r\n            if (error.code === 4001) {\r\n                setError('Transaction was rejected by user.');\r\n            } else if (error.message.includes('insufficient funds')) {\r\n                setError('Insufficient funds to complete this transaction.');\r\n            } else if (error.message.includes('already exists')) {\r\n                setError('A property with this ID already exists.');\r\n            } else {\r\n                setError(`Transaction failed: ${error.message}`);\r\n            }\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    const handlePurchase = async (propertyId) => {\r\n        setIsProcessing(true);\r\n        setError('');\r\n        setSuccess('');\r\n\r\n        try {\r\n            if (!contract || !account || !web3Instance) {\r\n                throw new Error('Please connect your wallet first');\r\n            }\r\n\r\n            // Check property availability\r\n            const availability = await checkPropertyAvailability(propertyId, contract);\r\n            if (!availability.exists || !availability.isActive) {\r\n                throw new Error('Property is not available for purchase');\r\n            }\r\n\r\n            if (availability.owner.toLowerCase() === account.toLowerCase()) {\r\n                throw new Error('You cannot purchase your own property');\r\n            }\r\n\r\n            const property = properties.find(p => p.id === propertyId);\r\n            if (!property) {\r\n                throw new Error('Property not found');\r\n            }\r\n\r\n            // Validate transaction and calculate gas\r\n            await validateTransaction(web3Instance, account, property.price.toString());\r\n            const contractId = `${propertyId}-${Date.now()}`;\r\n            const gasLimit = await calculatePropertyPurchaseGas(\r\n                contract,\r\n                propertyId,\r\n                contractId,\r\n                account,\r\n                property.price.toString()\r\n            );\r\n\r\n            // Execute purchase\r\n            const transaction = await contract.methods\r\n                .createContract(contractId, propertyId)\r\n                .send({\r\n                    from: account,\r\n                    value: property.price.toString(),\r\n                    gas: gasLimit,\r\n                    gasPrice: await web3Instance.eth.getGasPrice()\r\n                });\r\n\r\n            await loadProperties();\r\n            setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\r\n            \r\n        } catch (err) {\r\n            setError(displayErrorMessage(err, 'Purchase Error'));\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            await initializeBlockchain();\r\n        };\r\n        \r\n        init();\r\n        \r\n        if (window.ethereum) {\r\n            window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n            window.ethereum.on('chainChanged', () => window.location.reload());\r\n        }\r\n\r\n        return () => {\r\n            if (window.ethereum) {\r\n                window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n                window.ethereum.removeListener('chainChanged', () => window.location.reload());\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const handleAccountsChanged = async (accounts) => {\r\n        if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n            await loadProperties(contract);\r\n        } else {\r\n            setAccount('');\r\n            setProperties([]);\r\n            setError('Please connect your wallet');\r\n        }\r\n    };\r\n\r\n    // Render loading state\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n                    <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n                    <p className=\"text-gray-600\">{connectionStatus}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4 min-h-screen\">\r\n            <Card className=\"mb-6\">\r\n                <CardHeader>\r\n                    <div className=\"flex justify-between items-center\">\r\n                        <h1 className=\"text-2xl font-bold\">Real Estate Marketplace</h1>\r\n                        <div className=\"flex gap-2\">\r\n                            <Button \r\n                                onClick={() => loadProperties()} \r\n                                disabled={!contract || isProcessing}\r\n                                className=\"flex items-center gap-2\"\r\n                            >\r\n                                <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\r\n                                Refresh\r\n                            </Button>\r\n                            <Button \r\n                                onClick={async () => {\r\n                                    try {\r\n                                        const address = await connectWallet();\r\n                                        setAccount(address);\r\n                                        await loadProperties(contract);\r\n                                    } catch (err) {\r\n                                        setError(displayErrorMessage(err, 'Wallet Connection Error'));\r\n                                    }\r\n                                }}\r\n                                disabled={isProcessing}\r\n                                className=\"flex items-center gap-2\"\r\n                            >\r\n                                <Wallet className=\"h-4 w-4\" />\r\n                                {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </CardHeader>\r\n            </Card>\r\n\r\n            {error && (\r\n                <Alert variant=\"destructive\" className=\"mb-6\">\r\n                    <AlertCircle className=\"h-4 w-4\" />\r\n                    <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n                </Alert>\r\n            )}\r\n\r\n            {success && (\r\n                <Alert className=\"mb-6 bg-green-50 border-green-200\">\r\n                    <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\r\n                </Alert>\r\n            )}\r\n\r\n            <div className=\"grid md:grid-cols-2 gap-6\">\r\n                <PropertyForm \r\n                    onSubmit={handlePropertySubmit}\r\n                    contract={contract}\r\n                    isProcessing={isProcessing}\r\n                />\r\n\r\n                <Card className=\"h-[calc(100vh-12rem)]\">\r\n                    <CardHeader>\r\n                        <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n                            <Building className=\"h-5 w-5\" />\r\n                            Listed Properties\r\n                        </h2>\r\n                    </CardHeader>\r\n                    <CardContent className=\"p-0\">\r\n                        <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n                            <div className=\"space-y-4 p-6\">\r\n                                {properties.length === 0 ? (\r\n                                    <div className=\"text-center text-gray-500 py-8\">\r\n                                        <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n                                        <p>No properties listed yet</p>\r\n                                        <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\r\n                                    </div>\r\n                                ) : (\r\n                                    properties.map((property, index) => (\r\n                                        <PropertyCard\r\n                                            key={index}\r\n                                            property={property}\r\n                                            account={account}\r\n                                            onPurchase={handlePurchase}\r\n                                            isProcessing={isProcessing}\r\n                                            web3Instance={web3Instance}\r\n                                            formatPrice={formatPrice}\r\n                                        />\r\n                                    ))\r\n                                )}\r\n                            </div>\r\n                        </ScrollArea>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PropertyCard = ({ property, account, onPurchase, isProcessing, web3Instance, formatPrice }) => {\r\n    return (\r\n        <Card className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\r\n            <div className=\"space-y-3\">\r\n                <div className=\"flex justify-between items-start\">\r\n                    <h3 className=\"font-semibold text-lg\">{property.title}</h3>\r\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                        property.isActive \r\n                            ? 'bg-green-100 text-green-700'\r\n                            : 'bg-red-100 text-red-700'\r\n                    }`}>\r\n                        {property.isActive ? 'Active' : 'Sold'}\r\n                    </span>\r\n                </div>\r\n                \r\n                <div className=\"text-sm space-y-2\">\r\n                    <p className=\"text-gray-600 italic\">{property.description}</p>\r\n                    \r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                            <p className=\"font-medium text-gray-600\">Location</p>\r\n                            <p>{property.location}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"font-medium text-gray-600\">Price</p>\r\n                            <p>{formatPrice(web3Instance, property.price)} ETH</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className=\"font-medium text-gray-600\">Owner</p>\r\n                        <p className=\"truncate text-xs\">{property.owner}</p>\r\n                    </div>\r\n\r\n                    <div className=\"flex justify-between items-center pt-2\">\r\n                        <p className=\"text-xs text-gray-500\">\r\n                            Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\r\n                        </p>\r\n                        <ContractDetails \r\n                            property={property}\r\n                            formatPrice={(price) => formatPrice(web3Instance, price)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\r\n                    <Button \r\n                        onClick={() => onPurchase(property.id)}\r\n                        disabled={isProcessing}\r\n                        className=\"w-full mt-4\"\r\n                        variant=\"outline\"\r\n                    >\r\n                        {isProcessing ? (\r\n                            <div className=\"flex items-center justify-center gap-2\">\r\n                                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                                Processing Purchase...\r\n                            </div>\r\n                        ) : 'Purchase Property'}\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default RealEstateApp;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}