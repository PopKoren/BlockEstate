{"ast":null,"code":"// src/utils/security.js\n\n// Base input sanitization\nexport const sanitizeInput = input => {\n  if (typeof input !== 'string') return input;\n  return input.replace(/<[^>]*>/g, '') // Remove HTML tags\n  .replace(/javascript:/gi, '').replace(/on\\w+=/gi, '').replace(/data:/gi, '').replace(/&lt;|&gt;|&quot;|&#39;|&#x2F;/g, '').replace(/\\\\x[0-9A-Fa-f]{2}/g, '').replace(/\\\\u[0-9A-Fa-f]{4}/g, '').replace(/vbscript:/gi, '').replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '').trim();\n};\n\n// Field-specific validation\nexport const validateSecurity = (value, type) => {\n  if (typeof value !== 'string') return value;\n  const sanitized = sanitizeInput(value);\n  switch (type) {\n    case 'id':\n      return sanitized.replace(/[^a-zA-Z0-9-]/g, '').slice(0, 50);\n    case 'title':\n      return sanitized.replace(/[^\\w\\s-]/g, '').slice(0, 100);\n    case 'description':\n      return sanitized.slice(0, 500);\n    case 'price':\n      return sanitized.replace(/[^0-9.]/g, '');\n    case 'location':\n      return sanitized;\n    default:\n      return sanitized;\n  }\n};\n\n// Enhanced form validation with detailed error messages\nexport const validateFormSecurity = formData => {\n  const errors = {};\n  const xssPatterns = [{\n    pattern: /<script/gi,\n    message: 'Script tags are not allowed'\n  }, {\n    pattern: /javascript:/gi,\n    message: 'JavaScript protocol is not allowed'\n  }, {\n    pattern: /on\\w+=/gi,\n    message: 'Event handlers are not allowed'\n  }, {\n    pattern: /data:/gi,\n    message: 'Data URI schemes are not allowed'\n  }, {\n    pattern: /eval\\(/gi,\n    message: 'Eval functions are not allowed'\n  }, {\n    pattern: /Function\\(/gi,\n    message: 'Dynamic functions are not allowed'\n  }, {\n    pattern: /localStorage/gi,\n    message: 'Local storage access is not allowed'\n  }, {\n    pattern: /sessionStorage/gi,\n    message: 'Session storage access is not allowed'\n  }, {\n    pattern: /document\\.cookie/gi,\n    message: 'Cookie manipulation is not allowed'\n  }];\n  Object.entries(formData).forEach(([field, value]) => {\n    if (typeof value === 'string') {\n      // Check for XSS patterns\n      for (const {\n        pattern,\n        message\n      } of xssPatterns) {\n        if (pattern.test(value)) {\n          errors[field] = message;\n          break;\n        }\n      }\n\n      // Field-specific validation\n      switch (field) {\n        case 'id':\n          if (value.length > 50) {\n            errors[field] = 'ID must not exceed 50 characters';\n          }\n          if (!/^[a-zA-Z0-9-]+$/.test(value)) {\n            errors[field] = 'ID can only contain letters, numbers, and hyphens';\n          }\n          break;\n        case 'title':\n          if (value.length > 100) {\n            errors[field] = 'Title must not exceed 100 characters';\n          }\n          if (value.includes('\\n')) {\n            errors[field] = 'Title must be a single line';\n          }\n          break;\n        case 'description':\n          if (value.length > 500) {\n            errors[field] = 'Description must not exceed 500 characters';\n          }\n          const lines = value.split('\\n').length;\n          if (lines > 4) {\n            errors[field] = 'Description cannot exceed 4 lines';\n          }\n          break;\n        case 'price':\n          if (!/^\\d*\\.?\\d*$/.test(value)) {\n            errors[field] = 'Price can only contain numbers and decimal point';\n          }\n          const price = parseFloat(value);\n          if (price > 1000000) {\n            errors[field] = 'Price cannot exceed 1,000,000 ETH';\n          }\n          break;\n      }\n    }\n  });\n  return errors;\n};\n\n// Input sanitization with validation rules\nexport const sanitizeAndValidateInput = (value, type, maxLength) => {\n  if (!value) return value;\n  let sanitized = sanitizeInput(value);\n\n  // Apply type-specific validation rules\n  switch (type) {\n    case 'text':\n      sanitized = sanitized.replace(/[^\\w\\s-]/g, '');\n      break;\n    case 'number':\n      sanitized = sanitized.replace(/[^0-9.]/g, '');\n      break;\n    case 'multiline':\n      sanitized = sanitized.replace(/[^\\w\\s-.]/g, '');\n      break;\n  }\n\n  // Apply length limit if specified\n  if (maxLength) {\n    sanitized = sanitized.slice(0, maxLength);\n  }\n  return sanitized;\n};\n\n// Validate specific property field\nexport const validatePropertyField = (field, value) => {\n  if (!value) return 'This field is required';\n  switch (field) {\n    case 'id':\n      if (!/^[a-zA-Z0-9-]+$/.test(value)) {\n        return 'ID can only contain letters, numbers, and hyphens';\n      }\n      if (value.length > 50) {\n        return 'ID must not exceed 50 characters';\n      }\n      break;\n    case 'title':\n      if (value.length > 100) {\n        return 'Title must not exceed 100 characters';\n      }\n      if (value.includes('\\n')) {\n        return 'Title must be a single line';\n      }\n      break;\n    case 'description':\n      if (value.length > 500) {\n        return 'Description must not exceed 500 characters';\n      }\n      if (value.split('\\n').length > 4) {\n        return 'Description cannot exceed 4 lines';\n      }\n      break;\n    case 'price':\n      if (!/^\\d*\\.?\\d*$/.test(value)) {\n        return 'Please enter a valid number';\n      }\n      const price = parseFloat(value);\n      if (isNaN(price) || price <= 0) {\n        return 'Price must be greater than 0';\n      }\n      if (price > 1000000) {\n        return 'Price cannot exceed 1,000,000 ETH';\n      }\n      break;\n  }\n  return null;\n};","map":{"version":3,"names":["sanitizeInput","input","replace","trim","validateSecurity","value","type","sanitized","slice","validateFormSecurity","formData","errors","xssPatterns","pattern","message","Object","entries","forEach","field","test","length","includes","lines","split","price","parseFloat","sanitizeAndValidateInput","maxLength","validatePropertyField","isNaN"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/security.js"],"sourcesContent":["// src/utils/security.js\r\n\r\n// Base input sanitization\r\nexport const sanitizeInput = (input) => {\r\n    if (typeof input !== 'string') return input;\r\n    \r\n    return input\r\n        .replace(/<[^>]*>/g, '') // Remove HTML tags\r\n        .replace(/javascript:/gi, '')\r\n        .replace(/on\\w+=/gi, '')\r\n        .replace(/data:/gi, '')\r\n        .replace(/&lt;|&gt;|&quot;|&#39;|&#x2F;/g, '')\r\n        .replace(/\\\\x[0-9A-Fa-f]{2}/g, '')\r\n        .replace(/\\\\u[0-9A-Fa-f]{4}/g, '')\r\n        .replace(/vbscript:/gi, '')\r\n        .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '')\r\n        .trim();\r\n};\r\n\r\n// Field-specific validation\r\nexport const validateSecurity = (value, type) => {\r\n    if (typeof value !== 'string') return value;\r\n\r\n    const sanitized = sanitizeInput(value);\r\n\r\n    switch (type) {\r\n        case 'id':\r\n            return sanitized.replace(/[^a-zA-Z0-9-]/g, '').slice(0, 50);\r\n        case 'title':\r\n            return sanitized.replace(/[^\\w\\s-]/g, '').slice(0, 100);\r\n        case 'description':\r\n            return sanitized.slice(0, 500);\r\n        case 'price':\r\n            return sanitized.replace(/[^0-9.]/g, '');\r\n        case 'location':\r\n            return sanitized;\r\n        default:\r\n            return sanitized;\r\n    }\r\n};\r\n\r\n// Enhanced form validation with detailed error messages\r\nexport const validateFormSecurity = (formData) => {\r\n    const errors = {};\r\n    const xssPatterns = [\r\n        { pattern: /<script/gi, message: 'Script tags are not allowed' },\r\n        { pattern: /javascript:/gi, message: 'JavaScript protocol is not allowed' },\r\n        { pattern: /on\\w+=/gi, message: 'Event handlers are not allowed' },\r\n        { pattern: /data:/gi, message: 'Data URI schemes are not allowed' },\r\n        { pattern: /eval\\(/gi, message: 'Eval functions are not allowed' },\r\n        { pattern: /Function\\(/gi, message: 'Dynamic functions are not allowed' },\r\n        { pattern: /localStorage/gi, message: 'Local storage access is not allowed' },\r\n        { pattern: /sessionStorage/gi, message: 'Session storage access is not allowed' },\r\n        { pattern: /document\\.cookie/gi, message: 'Cookie manipulation is not allowed' }\r\n    ];\r\n\r\n    Object.entries(formData).forEach(([field, value]) => {\r\n        if (typeof value === 'string') {\r\n            // Check for XSS patterns\r\n            for (const { pattern, message } of xssPatterns) {\r\n                if (pattern.test(value)) {\r\n                    errors[field] = message;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Field-specific validation\r\n            switch (field) {\r\n                case 'id':\r\n                    if (value.length > 50) {\r\n                        errors[field] = 'ID must not exceed 50 characters';\r\n                    }\r\n                    if (!/^[a-zA-Z0-9-]+$/.test(value)) {\r\n                        errors[field] = 'ID can only contain letters, numbers, and hyphens';\r\n                    }\r\n                    break;\r\n                case 'title':\r\n                    if (value.length > 100) {\r\n                        errors[field] = 'Title must not exceed 100 characters';\r\n                    }\r\n                    if (value.includes('\\n')) {\r\n                        errors[field] = 'Title must be a single line';\r\n                    }\r\n                    break;\r\n                case 'description':\r\n                    if (value.length > 500) {\r\n                        errors[field] = 'Description must not exceed 500 characters';\r\n                    }\r\n                    const lines = value.split('\\n').length;\r\n                    if (lines > 4) {\r\n                        errors[field] = 'Description cannot exceed 4 lines';\r\n                    }\r\n                    break;\r\n                case 'price':\r\n                    if (!/^\\d*\\.?\\d*$/.test(value)) {\r\n                        errors[field] = 'Price can only contain numbers and decimal point';\r\n                    }\r\n                    const price = parseFloat(value);\r\n                    if (price > 1000000) {\r\n                        errors[field] = 'Price cannot exceed 1,000,000 ETH';\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n    return errors;\r\n};\r\n\r\n// Input sanitization with validation rules\r\nexport const sanitizeAndValidateInput = (value, type, maxLength) => {\r\n    if (!value) return value;\r\n\r\n    let sanitized = sanitizeInput(value);\r\n\r\n    // Apply type-specific validation rules\r\n    switch (type) {\r\n        case 'text':\r\n            sanitized = sanitized.replace(/[^\\w\\s-]/g, '');\r\n            break;\r\n        case 'number':\r\n            sanitized = sanitized.replace(/[^0-9.]/g, '');\r\n            break;\r\n        case 'multiline':\r\n            sanitized = sanitized.replace(/[^\\w\\s-.]/g, '');\r\n            break;\r\n    }\r\n\r\n    // Apply length limit if specified\r\n    if (maxLength) {\r\n        sanitized = sanitized.slice(0, maxLength);\r\n    }\r\n\r\n    return sanitized;\r\n};\r\n\r\n// Validate specific property field\r\nexport const validatePropertyField = (field, value) => {\r\n    if (!value) return 'This field is required';\r\n\r\n    switch (field) {\r\n        case 'id':\r\n            if (!/^[a-zA-Z0-9-]+$/.test(value)) {\r\n                return 'ID can only contain letters, numbers, and hyphens';\r\n            }\r\n            if (value.length > 50) {\r\n                return 'ID must not exceed 50 characters';\r\n            }\r\n            break;\r\n        case 'title':\r\n            if (value.length > 100) {\r\n                return 'Title must not exceed 100 characters';\r\n            }\r\n            if (value.includes('\\n')) {\r\n                return 'Title must be a single line';\r\n            }\r\n            break;\r\n        case 'description':\r\n            if (value.length > 500) {\r\n                return 'Description must not exceed 500 characters';\r\n            }\r\n            if (value.split('\\n').length > 4) {\r\n                return 'Description cannot exceed 4 lines';\r\n            }\r\n            break;\r\n        case 'price':\r\n            if (!/^\\d*\\.?\\d*$/.test(value)) {\r\n                return 'Please enter a valid number';\r\n            }\r\n            const price = parseFloat(value);\r\n            if (isNaN(price) || price <= 0) {\r\n                return 'Price must be greater than 0';\r\n            }\r\n            if (price > 1000000) {\r\n                return 'Price cannot exceed 1,000,000 ETH';\r\n            }\r\n            break;\r\n    }\r\n\r\n    return null;\r\n};"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACpC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK;EAE3C,OAAOA,KAAK,CACPC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;EAAA,CACxBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvBA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CACtBA,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAC7CA,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC,CACjCA,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC,CACjCA,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAC1BA,OAAO,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAC5CC,IAAI,CAAC,CAAC;AACf,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;EAC7C,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK;EAE3C,MAAME,SAAS,GAAGP,aAAa,CAACK,KAAK,CAAC;EAEtC,QAAQC,IAAI;IACR,KAAK,IAAI;MACL,OAAOC,SAAS,CAACL,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC/D,KAAK,OAAO;MACR,OAAOD,SAAS,CAACL,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;IAC3D,KAAK,aAAa;MACd,OAAOD,SAAS,CAACC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;IAClC,KAAK,OAAO;MACR,OAAOD,SAAS,CAACL,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAC5C,KAAK,UAAU;MACX,OAAOK,SAAS;IACpB;MACI,OAAOA,SAAS;EACxB;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAIC,QAAQ,IAAK;EAC9C,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,WAAW,GAAG,CAChB;IAAEC,OAAO,EAAE,WAAW;IAAEC,OAAO,EAAE;EAA8B,CAAC,EAChE;IAAED,OAAO,EAAE,eAAe;IAAEC,OAAO,EAAE;EAAqC,CAAC,EAC3E;IAAED,OAAO,EAAE,UAAU;IAAEC,OAAO,EAAE;EAAiC,CAAC,EAClE;IAAED,OAAO,EAAE,SAAS;IAAEC,OAAO,EAAE;EAAmC,CAAC,EACnE;IAAED,OAAO,EAAE,UAAU;IAAEC,OAAO,EAAE;EAAiC,CAAC,EAClE;IAAED,OAAO,EAAE,cAAc;IAAEC,OAAO,EAAE;EAAoC,CAAC,EACzE;IAAED,OAAO,EAAE,gBAAgB;IAAEC,OAAO,EAAE;EAAsC,CAAC,EAC7E;IAAED,OAAO,EAAE,kBAAkB;IAAEC,OAAO,EAAE;EAAwC,CAAC,EACjF;IAAED,OAAO,EAAE,oBAAoB;IAAEC,OAAO,EAAE;EAAqC,CAAC,CACnF;EAEDC,MAAM,CAACC,OAAO,CAACN,QAAQ,CAAC,CAACO,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEb,KAAK,CAAC,KAAK;IACjD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B;MACA,KAAK,MAAM;QAAEQ,OAAO;QAAEC;MAAQ,CAAC,IAAIF,WAAW,EAAE;QAC5C,IAAIC,OAAO,CAACM,IAAI,CAACd,KAAK,CAAC,EAAE;UACrBM,MAAM,CAACO,KAAK,CAAC,GAAGJ,OAAO;UACvB;QACJ;MACJ;;MAEA;MACA,QAAQI,KAAK;QACT,KAAK,IAAI;UACL,IAAIb,KAAK,CAACe,MAAM,GAAG,EAAE,EAAE;YACnBT,MAAM,CAACO,KAAK,CAAC,GAAG,kCAAkC;UACtD;UACA,IAAI,CAAC,iBAAiB,CAACC,IAAI,CAACd,KAAK,CAAC,EAAE;YAChCM,MAAM,CAACO,KAAK,CAAC,GAAG,mDAAmD;UACvE;UACA;QACJ,KAAK,OAAO;UACR,IAAIb,KAAK,CAACe,MAAM,GAAG,GAAG,EAAE;YACpBT,MAAM,CAACO,KAAK,CAAC,GAAG,sCAAsC;UAC1D;UACA,IAAIb,KAAK,CAACgB,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtBV,MAAM,CAACO,KAAK,CAAC,GAAG,6BAA6B;UACjD;UACA;QACJ,KAAK,aAAa;UACd,IAAIb,KAAK,CAACe,MAAM,GAAG,GAAG,EAAE;YACpBT,MAAM,CAACO,KAAK,CAAC,GAAG,4CAA4C;UAChE;UACA,MAAMI,KAAK,GAAGjB,KAAK,CAACkB,KAAK,CAAC,IAAI,CAAC,CAACH,MAAM;UACtC,IAAIE,KAAK,GAAG,CAAC,EAAE;YACXX,MAAM,CAACO,KAAK,CAAC,GAAG,mCAAmC;UACvD;UACA;QACJ,KAAK,OAAO;UACR,IAAI,CAAC,aAAa,CAACC,IAAI,CAACd,KAAK,CAAC,EAAE;YAC5BM,MAAM,CAACO,KAAK,CAAC,GAAG,kDAAkD;UACtE;UACA,MAAMM,KAAK,GAAGC,UAAU,CAACpB,KAAK,CAAC;UAC/B,IAAImB,KAAK,GAAG,OAAO,EAAE;YACjBb,MAAM,CAACO,KAAK,CAAC,GAAG,mCAAmC;UACvD;UACA;MACR;IACJ;EACJ,CAAC,CAAC;EAEF,OAAOP,MAAM;AACjB,CAAC;;AAED;AACA,OAAO,MAAMe,wBAAwB,GAAGA,CAACrB,KAAK,EAAEC,IAAI,EAAEqB,SAAS,KAAK;EAChE,IAAI,CAACtB,KAAK,EAAE,OAAOA,KAAK;EAExB,IAAIE,SAAS,GAAGP,aAAa,CAACK,KAAK,CAAC;;EAEpC;EACA,QAAQC,IAAI;IACR,KAAK,MAAM;MACPC,SAAS,GAAGA,SAAS,CAACL,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;MAC9C;IACJ,KAAK,QAAQ;MACTK,SAAS,GAAGA,SAAS,CAACL,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;MAC7C;IACJ,KAAK,WAAW;MACZK,SAAS,GAAGA,SAAS,CAACL,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;MAC/C;EACR;;EAEA;EACA,IAAIyB,SAAS,EAAE;IACXpB,SAAS,GAAGA,SAAS,CAACC,KAAK,CAAC,CAAC,EAAEmB,SAAS,CAAC;EAC7C;EAEA,OAAOpB,SAAS;AACpB,CAAC;;AAED;AACA,OAAO,MAAMqB,qBAAqB,GAAGA,CAACV,KAAK,EAAEb,KAAK,KAAK;EACnD,IAAI,CAACA,KAAK,EAAE,OAAO,wBAAwB;EAE3C,QAAQa,KAAK;IACT,KAAK,IAAI;MACL,IAAI,CAAC,iBAAiB,CAACC,IAAI,CAACd,KAAK,CAAC,EAAE;QAChC,OAAO,mDAAmD;MAC9D;MACA,IAAIA,KAAK,CAACe,MAAM,GAAG,EAAE,EAAE;QACnB,OAAO,kCAAkC;MAC7C;MACA;IACJ,KAAK,OAAO;MACR,IAAIf,KAAK,CAACe,MAAM,GAAG,GAAG,EAAE;QACpB,OAAO,sCAAsC;MACjD;MACA,IAAIf,KAAK,CAACgB,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,6BAA6B;MACxC;MACA;IACJ,KAAK,aAAa;MACd,IAAIhB,KAAK,CAACe,MAAM,GAAG,GAAG,EAAE;QACpB,OAAO,4CAA4C;MACvD;MACA,IAAIf,KAAK,CAACkB,KAAK,CAAC,IAAI,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;QAC9B,OAAO,mCAAmC;MAC9C;MACA;IACJ,KAAK,OAAO;MACR,IAAI,CAAC,aAAa,CAACD,IAAI,CAACd,KAAK,CAAC,EAAE;QAC5B,OAAO,6BAA6B;MACxC;MACA,MAAMmB,KAAK,GAAGC,UAAU,CAACpB,KAAK,CAAC;MAC/B,IAAIwB,KAAK,CAACL,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;QAC5B,OAAO,8BAA8B;MACzC;MACA,IAAIA,KAAK,GAAG,OAAO,EAAE;QACjB,OAAO,mCAAmC;MAC9C;MACA;EACR;EAEA,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}