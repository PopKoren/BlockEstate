{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Card, CardHeader, CardContent } from './card';\n// import { Button } from './button';\n// import { Input } from './input';\n// import { Textarea } from './textarea';\n// import { Plus, Loader2, ChevronDown } from 'lucide-react';\n// import { validatePropertyFormData } from '../../utilsApp/errors';\n\n// // Constants from our error handling utilities\n// const ISRAELI_CITIES = [\n//     'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\n//     'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\n//     'Holon', 'Bnei Brak'\n// ];\n\n// const PropertyForm = ({ onSubmit, contract, isProcessing }) => {\n//     const [showCities, setShowCities] = useState(false);\n//     const [formErrors, setFormErrors] = useState({});\n//     const [property, setProperty] = useState({\n//         id: '',\n//         title: '',\n//         description: '',\n//         location: '',\n//         price: ''\n//     });\n\n//    // In PropertyForm.jsx, modify the handleSubmit function\n// const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log('Form submitted with data:', property);\n\n//     const errors = validatePropertyFormData(property);\n\n//     if (Object.keys(errors).length === 0) {\n//         try {\n//             await onSubmit(property);\n//             // Clear form only after successful submission\n//             setProperty({\n//                 id: '',\n//                 title: '',\n//                 description: '',\n//                 location: '',\n//                 price: ''\n//             });\n//             setFormErrors({});\n//         } catch (error) {\n//             console.error('Form submission error:', error);\n//             setFormErrors({ submit: error.message });\n//         }\n//     } else {\n//         console.log('Validation errors:', errors);\n//         setFormErrors(errors);\n//     }\n// };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n//         setProperty(prev => ({\n//             ...prev,\n//             [name]: value\n//         }));\n//         // Clear error for this field when user starts typing\n//         if (formErrors[name]) {\n//             setFormErrors(prev => {\n//                 const newErrors = { ...prev };\n//                 delete newErrors[name];\n//                 return newErrors;\n//             });\n//         }\n//     };\n\n//     const selectCity = (city) => {\n//         setProperty(prev => ({\n//             ...prev,\n//             location: city\n//         }));\n//         setShowCities(false);\n//     };\n\n//     return (\n//         <Card>\n//             <CardHeader>\n//                 <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                     <Plus className=\"h-5 w-5\" />\n//                     List New Property\n//                 </h2>\n//             </CardHeader>\n//             <CardContent>\n//                 <form onSubmit={handleSubmit} className=\"space-y-4\">\n//                     <div>\n//                         <Input\n//                             name=\"id\"\n//                             placeholder=\"Property ID\"\n//                             value={property.id}\n//                             onChange={handleInputChange}\n//                             className={formErrors.id ? 'border-red-500' : ''}\n//                             disabled={isProcessing}\n//                         />\n//                         {formErrors.id && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.id}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Input\n//                             name=\"title\"\n//                             placeholder=\"Property Title\"\n//                             value={property.title}\n//                             onChange={handleInputChange}\n//                             className={formErrors.title ? 'border-red-500' : ''}\n//                             disabled={isProcessing}\n//                         />\n//                         {formErrors.title && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Textarea\n//                             name=\"description\"\n//                             placeholder=\"Property Description\"\n//                             value={property.description}\n//                             onChange={handleInputChange}\n//                             className={`min-h-[100px] ${formErrors.description ? 'border-red-500' : ''}`}\n//                             disabled={isProcessing}\n//                         />\n//                         {formErrors.description && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>\n//                         )}\n//                     </div>\n\n//                     <div className=\"relative\">\n//                         <div className=\"flex gap-2\">\n//                             <Input\n//                                 name=\"location\"\n//                                 placeholder=\"Location\"\n//                                 value={property.location}\n//                                 onChange={handleInputChange}\n//                                 className={formErrors.location ? 'border-red-500' : ''}\n//                                 disabled={isProcessing}\n//                             />\n//                             <Button\n//                                 type=\"button\"\n//                                 variant=\"outline\"\n//                                 onClick={() => setShowCities(!showCities)}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <ChevronDown className={`h-4 w-4 transform ${showCities ? 'rotate-180' : ''}`} />\n//                             </Button>\n//                         </div>\n//                         {showCities && (\n//                             <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg\">\n//                                 {ISRAELI_CITIES.map((city) => (\n//                                     <button\n//                                         key={city}\n//                                         type=\"button\"\n//                                         className=\"w-full px-4 py-2 text-left hover:bg-gray-100\"\n//                                         onClick={() => selectCity(city)}\n//                                     >\n//                                         {city}\n//                                     </button>\n//                                 ))}\n//                             </div>\n//                         )}\n//                         {formErrors.location && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.location}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Input\n//                             name=\"price\"\n//                             type=\"number\"\n//                             step=\"0.01\"\n//                             placeholder=\"Price (ETH)\"\n//                             value={property.price}\n//                             onChange={handleInputChange}\n//                             className={formErrors.price ? 'border-red-500' : ''}\n//                             disabled={isProcessing}\n//                         />\n//                         {formErrors.price && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>\n//                         )}\n//                     </div>\n\n//                     <Button \n//                         type=\"submit\" \n//                         disabled={isProcessing || !contract}\n//                         className=\"w-full\"\n//                     >\n//                         {isProcessing ? (\n//                             <div className=\"flex items-center justify-center gap-2\">\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                 Processing...\n//                             </div>\n//                         ) : 'List Property'}\n//                     </Button>\n//                 </form>\n//             </CardContent>\n//         </Card>\n//     );\n// };\n\n// export default PropertyForm;","map":{"version":3,"names":[],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/components/ui/PropertyForm.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Card, CardHeader, CardContent } from './card';\r\n// import { Button } from './button';\r\n// import { Input } from './input';\r\n// import { Textarea } from './textarea';\r\n// import { Plus, Loader2, ChevronDown } from 'lucide-react';\r\n// import { validatePropertyFormData } from '../../utilsApp/errors';\r\n\r\n// // Constants from our error handling utilities\r\n// const ISRAELI_CITIES = [\r\n//     'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n//     'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n//     'Holon', 'Bnei Brak'\r\n// ];\r\n\r\n// const PropertyForm = ({ onSubmit, contract, isProcessing }) => {\r\n//     const [showCities, setShowCities] = useState(false);\r\n//     const [formErrors, setFormErrors] = useState({});\r\n//     const [property, setProperty] = useState({\r\n//         id: '',\r\n//         title: '',\r\n//         description: '',\r\n//         location: '',\r\n//         price: ''\r\n//     });\r\n\r\n//    // In PropertyForm.jsx, modify the handleSubmit function\r\n// const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log('Form submitted with data:', property);\r\n    \r\n//     const errors = validatePropertyFormData(property);\r\n    \r\n//     if (Object.keys(errors).length === 0) {\r\n//         try {\r\n//             await onSubmit(property);\r\n//             // Clear form only after successful submission\r\n//             setProperty({\r\n//                 id: '',\r\n//                 title: '',\r\n//                 description: '',\r\n//                 location: '',\r\n//                 price: ''\r\n//             });\r\n//             setFormErrors({});\r\n//         } catch (error) {\r\n//             console.error('Form submission error:', error);\r\n//             setFormErrors({ submit: error.message });\r\n//         }\r\n//     } else {\r\n//         console.log('Validation errors:', errors);\r\n//         setFormErrors(errors);\r\n//     }\r\n// };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setProperty(prev => ({\r\n//             ...prev,\r\n//             [name]: value\r\n//         }));\r\n//         // Clear error for this field when user starts typing\r\n//         if (formErrors[name]) {\r\n//             setFormErrors(prev => {\r\n//                 const newErrors = { ...prev };\r\n//                 delete newErrors[name];\r\n//                 return newErrors;\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const selectCity = (city) => {\r\n//         setProperty(prev => ({\r\n//             ...prev,\r\n//             location: city\r\n//         }));\r\n//         setShowCities(false);\r\n//     };\r\n\r\n//     return (\r\n//         <Card>\r\n//             <CardHeader>\r\n//                 <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                     <Plus className=\"h-5 w-5\" />\r\n//                     List New Property\r\n//                 </h2>\r\n//             </CardHeader>\r\n//             <CardContent>\r\n//                 <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"id\"\r\n//                             placeholder=\"Property ID\"\r\n//                             value={property.id}\r\n//                             onChange={handleInputChange}\r\n//                             className={formErrors.id ? 'border-red-500' : ''}\r\n//                             disabled={isProcessing}\r\n//                         />\r\n//                         {formErrors.id && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.id}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"title\"\r\n//                             placeholder=\"Property Title\"\r\n//                             value={property.title}\r\n//                             onChange={handleInputChange}\r\n//                             className={formErrors.title ? 'border-red-500' : ''}\r\n//                             disabled={isProcessing}\r\n//                         />\r\n//                         {formErrors.title && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Textarea\r\n//                             name=\"description\"\r\n//                             placeholder=\"Property Description\"\r\n//                             value={property.description}\r\n//                             onChange={handleInputChange}\r\n//                             className={`min-h-[100px] ${formErrors.description ? 'border-red-500' : ''}`}\r\n//                             disabled={isProcessing}\r\n//                         />\r\n//                         {formErrors.description && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div className=\"relative\">\r\n//                         <div className=\"flex gap-2\">\r\n//                             <Input\r\n//                                 name=\"location\"\r\n//                                 placeholder=\"Location\"\r\n//                                 value={property.location}\r\n//                                 onChange={handleInputChange}\r\n//                                 className={formErrors.location ? 'border-red-500' : ''}\r\n//                                 disabled={isProcessing}\r\n//                             />\r\n//                             <Button\r\n//                                 type=\"button\"\r\n//                                 variant=\"outline\"\r\n//                                 onClick={() => setShowCities(!showCities)}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <ChevronDown className={`h-4 w-4 transform ${showCities ? 'rotate-180' : ''}`} />\r\n//                             </Button>\r\n//                         </div>\r\n//                         {showCities && (\r\n//                             <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg\">\r\n//                                 {ISRAELI_CITIES.map((city) => (\r\n//                                     <button\r\n//                                         key={city}\r\n//                                         type=\"button\"\r\n//                                         className=\"w-full px-4 py-2 text-left hover:bg-gray-100\"\r\n//                                         onClick={() => selectCity(city)}\r\n//                                     >\r\n//                                         {city}\r\n//                                     </button>\r\n//                                 ))}\r\n//                             </div>\r\n//                         )}\r\n//                         {formErrors.location && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.location}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"price\"\r\n//                             type=\"number\"\r\n//                             step=\"0.01\"\r\n//                             placeholder=\"Price (ETH)\"\r\n//                             value={property.price}\r\n//                             onChange={handleInputChange}\r\n//                             className={formErrors.price ? 'border-red-500' : ''}\r\n//                             disabled={isProcessing}\r\n//                         />\r\n//                         {formErrors.price && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <Button \r\n//                         type=\"submit\" \r\n//                         disabled={isProcessing || !contract}\r\n//                         className=\"w-full\"\r\n//                     >\r\n//                         {isProcessing ? (\r\n//                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                 Processing...\r\n//                             </div>\r\n//                         ) : 'List Property'}\r\n//                     </Button>\r\n//                 </form>\r\n//             </CardContent>\r\n//         </Card>\r\n//     );\r\n// };\r\n\r\n// export default PropertyForm;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}