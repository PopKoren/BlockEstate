{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evyatar\\\\Documents\\\\Smart contract\\\\website\\\\BlockEstate\\\\frontend\\\\src\\\\real-estate-package\\\\components\\\\ui\\\\PropertyForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardHeader, CardContent } from './card';\nimport { Button } from './button';\nimport { Input } from './input';\nimport { Textarea } from './textarea';\nimport { Plus, Loader2, ChevronDown } from 'lucide-react';\nimport { validatePropertyFormData } from '../../utilsApp/errors';\nimport { displayErrorMessage } from '../../utilsApp/errors';\nimport { initializeWeb3, initializeContract, connectWallet, switchToHardhatNetwork } from '../../utilsApp/web3';\n\n// Cities array remains the same\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ISRAELI_CITIES = ['Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion', 'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva', 'Holon', 'Bnei Brak'];\nconst PropertyForm = ({\n  web3Instance,\n  contract,\n  account,\n  onPropertyCreated\n}) => {\n  _s();\n  // State declarations remain the same\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showCities, setShowCities] = useState(false);\n  const [formErrors, setFormErrors] = useState({});\n  const [property, setProperty] = useState({\n    id: '',\n    title: '',\n    description: '',\n    location: '',\n    price: ''\n  });\n\n  // Add Web3 initialization check\n  useEffect(() => {\n    const checkWeb3Connection = async () => {\n      if (!web3Instance) {\n        try {\n          await initializeWeb3();\n          await switchToHardhatNetwork();\n        } catch (error) {\n          setFormErrors({\n            submit: 'Please ensure MetaMask is installed and connected to the Hardhat network.'\n          });\n        }\n      }\n    };\n    checkWeb3Connection();\n  }, [web3Instance]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsProcessing(true);\n    setFormErrors({});\n    try {\n      // Validate form data\n      validatePropertyFormData(property);\n\n      // Ensure Web3 connection\n      if (!web3Instance) {\n        throw new Error('Web3 is not initialized. Please check your wallet connection.');\n      }\n\n      // Ensure wallet connection\n      if (!account) {\n        await connectWallet();\n      }\n\n      // Basic connection checks\n      if (!contract || !account) {\n        throw new Error('Please ensure your wallet is connected');\n      }\n\n      // Convert price to Wei using Web3\n      const priceInWei = Web3.utils.toWei(property.price, 'ether');\n\n      // Get gas estimate first\n      const gasEstimate = await contract.methods.createProperty(property.id, property.title, property.description, priceInWei, property.location, [] // Empty documents array for now\n      ).estimateGas({\n        from: account\n      });\n\n      // Add 20% buffer to gas estimate\n      const gasLimit = Math.ceil(gasEstimate * 1.2);\n\n      // Get current gas price\n      const gasPrice = await web3Instance.eth.getGasPrice();\n\n      // Execute the transaction with specific parameters\n      const transaction = await contract.methods.createProperty(property.id, property.title, property.description, priceInWei, property.location, [] // Empty documents array\n      ).send({\n        from: account,\n        gas: gasLimit,\n        gasPrice: gasPrice\n      });\n\n      // Wait for transaction receipt\n      const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\n      if (!receipt.status) {\n        throw new Error('Transaction failed. Please check the transaction on block explorer.');\n      }\n\n      // Reset form after successful submission\n      setProperty({\n        id: '',\n        title: '',\n        description: '',\n        location: '',\n        price: ''\n      });\n\n      // Notify parent component\n      if (onPropertyCreated) {\n        onPropertyCreated();\n      }\n    } catch (error) {\n      console.error('Property Creation Error:', error);\n      const errorMessage = displayErrorMessage(error, 'Property Creation Error');\n      setFormErrors({\n        submit: errorMessage\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Rest of the component remains the same\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setProperty(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => {\n        const newErrors = {\n          ...prev\n        };\n        delete newErrors[name];\n        return newErrors;\n      });\n    }\n  };\n  const selectCity = city => {\n    setProperty(prev => ({\n      ...prev,\n      location: city\n    }));\n    setShowCities(false);\n  };\n  const buttonDisabled = isProcessing || !contract || !account;\n\n  // JSX remains the same\n  return /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n_s(PropertyForm, \"FUOdHtSmme5xOC8Y9gpRVoSodQs=\");\n_c = PropertyForm;\nexport default PropertyForm;\nvar _c;\n$RefreshReg$(_c, \"PropertyForm\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Card","CardHeader","CardContent","Button","Input","Textarea","Plus","Loader2","ChevronDown","validatePropertyFormData","displayErrorMessage","initializeWeb3","initializeContract","connectWallet","switchToHardhatNetwork","jsxDEV","_jsxDEV","ISRAELI_CITIES","PropertyForm","web3Instance","contract","account","onPropertyCreated","_s","isProcessing","setIsProcessing","showCities","setShowCities","formErrors","setFormErrors","property","setProperty","id","title","description","location","price","checkWeb3Connection","error","submit","handleSubmit","e","preventDefault","Error","priceInWei","utils","toWei","gasEstimate","methods","createProperty","estimateGas","from","gasLimit","Math","ceil","gasPrice","eth","getGasPrice","transaction","send","gas","receipt","getTransactionReceipt","transactionHash","status","console","errorMessage","handleInputChange","name","value","target","prev","newErrors","selectCity","city","buttonDisabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/components/ui/PropertyForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { Card, CardHeader, CardContent } from './card';\r\nimport { Button } from './button';\r\nimport { Input } from './input';\r\nimport { Textarea } from './textarea';\r\nimport { Plus, Loader2, ChevronDown } from 'lucide-react';\r\nimport { validatePropertyFormData } from '../../utilsApp/errors';\r\nimport { displayErrorMessage } from '../../utilsApp/errors';\r\nimport { \r\n    initializeWeb3, \r\n    initializeContract, \r\n    connectWallet,\r\n    switchToHardhatNetwork \r\n} from '../../utilsApp/web3';\r\n\r\n// Cities array remains the same\r\nconst ISRAELI_CITIES = [\r\n    'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n    'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n    'Holon', 'Bnei Brak'\r\n];\r\n\r\nconst PropertyForm = ({ web3Instance, contract, account, onPropertyCreated }) => {\r\n    // State declarations remain the same\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [showCities, setShowCities] = useState(false);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [property, setProperty] = useState({\r\n        id: '',\r\n        title: '',\r\n        description: '',\r\n        location: '',\r\n        price: ''\r\n    });\r\n\r\n    // Add Web3 initialization check\r\n    useEffect(() => {\r\n        const checkWeb3Connection = async () => {\r\n            if (!web3Instance) {\r\n                try {\r\n                    await initializeWeb3();\r\n                    await switchToHardhatNetwork();\r\n                } catch (error) {\r\n                    setFormErrors({ \r\n                        submit: 'Please ensure MetaMask is installed and connected to the Hardhat network.' \r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        checkWeb3Connection();\r\n    }, [web3Instance]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsProcessing(true);\r\n        setFormErrors({});\r\n\r\n        try {\r\n            // Validate form data\r\n            validatePropertyFormData(property);\r\n\r\n            // Ensure Web3 connection\r\n            if (!web3Instance) {\r\n                throw new Error('Web3 is not initialized. Please check your wallet connection.');\r\n            }\r\n\r\n            // Ensure wallet connection\r\n            if (!account) {\r\n                await connectWallet();\r\n            }\r\n\r\n            // Basic connection checks\r\n            if (!contract || !account) {\r\n                throw new Error('Please ensure your wallet is connected');\r\n            }\r\n\r\n            // Convert price to Wei using Web3\r\n            const priceInWei = Web3.utils.toWei(property.price, 'ether');\r\n\r\n            // Get gas estimate first\r\n            const gasEstimate = await contract.methods.createProperty(\r\n                property.id,\r\n                property.title,\r\n                property.description,\r\n                priceInWei,\r\n                property.location,\r\n                [] // Empty documents array for now\r\n            ).estimateGas({ from: account });\r\n\r\n            // Add 20% buffer to gas estimate\r\n            const gasLimit = Math.ceil(gasEstimate * 1.2);\r\n\r\n            // Get current gas price\r\n            const gasPrice = await web3Instance.eth.getGasPrice();\r\n\r\n            // Execute the transaction with specific parameters\r\n            const transaction = await contract.methods.createProperty(\r\n                property.id,\r\n                property.title,\r\n                property.description,\r\n                priceInWei,\r\n                property.location,\r\n                [] // Empty documents array\r\n            ).send({\r\n                from: account,\r\n                gas: gasLimit,\r\n                gasPrice: gasPrice\r\n            });\r\n\r\n            // Wait for transaction receipt\r\n            const receipt = await web3Instance.eth.getTransactionReceipt(transaction.transactionHash);\r\n            \r\n            if (!receipt.status) {\r\n                throw new Error('Transaction failed. Please check the transaction on block explorer.');\r\n            }\r\n\r\n            // Reset form after successful submission\r\n            setProperty({\r\n                id: '',\r\n                title: '',\r\n                description: '',\r\n                location: '',\r\n                price: ''\r\n            });\r\n\r\n            // Notify parent component\r\n            if (onPropertyCreated) {\r\n                onPropertyCreated();\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Property Creation Error:', error);\r\n            const errorMessage = displayErrorMessage(error, 'Property Creation Error');\r\n            setFormErrors({ submit: errorMessage });\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    // Rest of the component remains the same\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setProperty(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n        if (formErrors[name]) {\r\n            setFormErrors(prev => {\r\n                const newErrors = { ...prev };\r\n                delete newErrors[name];\r\n                return newErrors;\r\n            });\r\n        }\r\n    };\r\n\r\n    const selectCity = (city) => {\r\n        setProperty(prev => ({\r\n            ...prev,\r\n            location: city\r\n        }));\r\n        setShowCities(false);\r\n    };\r\n\r\n    const buttonDisabled = isProcessing || !contract || !account;\r\n\r\n    // JSX remains the same\r\n    return (\r\n        <Card>\r\n            {/* ... rest of the JSX remains unchanged ... */}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PropertyForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}