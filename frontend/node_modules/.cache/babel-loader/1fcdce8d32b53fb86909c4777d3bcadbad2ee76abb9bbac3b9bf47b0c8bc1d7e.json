{"ast":null,"code":"// // src/utilsApp/web3.js\n\n// import Web3 from 'web3';\n// import { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\n\n// export const initializeWeb3 = async () => {\n//     if (!window.ethereum) {\n//         throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\n//     }\n\n//     try {\n//         await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         return new Web3(window.ethereum);\n//     } catch (error) {\n//         console.error('Web3 initialization error:', error);\n//         if (error.code === 4001) {\n//             throw new Error('Please connect your wallet to use this application');\n//         }\n//         throw error;\n//     }\n// };\n// export const initializeContract = async (web3) => {\n//     if (!web3) {\n//         throw new Error('Web3 instance is required');\n//     }\n\n//     try {\n//         const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n\n//         // Simple contract validation\n//         const code = await web3.eth.getCode(CONTRACT_ADDRESS);\n//         if (code === '0x' || code === '0x0') {\n//             throw new Error('No contract found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\n//         }\n\n//         return contract;\n//     } catch (error) {\n//         throw new Error(`Contract initialization failed: ${error.message}`);\n//     }\n// };\n\n// export const connectWallet = async () => {\n//     if (!window.ethereum) {\n//         throw new Error('MetaMask is not installed');\n//     }\n\n//     try {\n//         const accounts = await window.ethereum.request({\n//             method: 'eth_requestAccounts'\n//         });\n\n//         if (!accounts || accounts.length === 0) {\n//             throw new Error('No accounts found. Please unlock MetaMask.');\n//         }\n\n//         return accounts[0];\n//     } catch (error) {\n//         console.error('Wallet connection error:', error);\n//         if (error.code === 4001) {\n//             throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\n//         }\n//         throw new Error('Failed to connect wallet: ' + error.message);\n//     }\n// };\n\n// export const switchToHardhatNetwork = async () => {\n//     try {\n//         await window.ethereum.request({\n//             method: 'wallet_switchEthereumChain',\n//             params: [{ chainId: Web3.utils.toHex(31337) }] // Using proper hex conversion\n//         });\n//     } catch (switchError) {\n//         if (switchError.code === 4902) {\n//             try {\n//                 await window.ethereum.request({\n//                     method: 'wallet_addEthereumChain',\n//                     params: [{\n//                         chainId: Web3.utils.toHex(31337),\n//                         chainName: 'Hardhat Local Network',\n//                         nativeCurrency: {\n//                             name: 'ETH',\n//                             symbol: 'ETH',\n//                             decimals: 18\n//                         },\n//                         rpcUrls: ['http://127.0.0.1:8545'],\n//                         blockExplorerUrls: null\n//                     }]\n//                 });\n//             } catch (addError) {\n//                 throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\n//             }\n//         } else {\n//             throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\n//         }\n//     }\n// };\n\n// export const formatPrice = (web3Instance, priceInWei) => {\n//     if (!web3Instance || !priceInWei) return '0';\n//     try {\n//         return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\n//     } catch (error) {\n//         console.error('Price formatting error:', error);\n//         return '0';\n//     }\n// };\n\n// // export const validatePropertyData = (property) => {\n// //     if (!property.id || !property.id.trim()) {\n// //         throw new Error('Property ID is required');\n// //     }\n// //     if (!property.title || !property.title.trim()) {\n// //         throw new Error('Property title is required');\n// //     }\n// //     if (!property.price) {\n// //         throw new Error('Property price is required');\n// //     }\n\n// //     const price = parseFloat(property.price);\n// //     if (isNaN(price) || price <= 0) {\n// //         throw new Error('Please enter a valid price greater than 0');\n// //     }\n\n// //     return true;\n// // };\n\n// export const validateTransaction = async (web3, account, value) => {\n//     try {\n//         const balance = await web3.eth.getBalance(account);\n//         const gasPrice = await web3.eth.getGasPrice();\n//         const estimatedGas = '500000'; // Safe estimate for most transactions\n\n//         const totalCost = web3.utils.toBN(value).add(\n//             web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas))\n//         );\n\n//         if (web3.utils.toBN(balance).lt(totalCost)) {\n//             throw new Error('Insufficient funds for transaction and gas fees');\n//         }\n\n//         return {\n//             gasPrice,\n//             estimatedGas\n//         };\n//     } catch (error) {\n//         throw new Error(`Transaction validation failed: ${error.message}`);\n//     }\n// };\n\n// // Property validation and utilities\n// export const validatePropertyData = async (property, contract) => {\n//     if (!property.id || !property.id.trim()) {\n//         throw new Error('Property ID is required');\n//     }\n\n//     // Check for existing property ID\n//     if (contract) {\n//         const properties = await contract.methods.getAllProperties().call();\n//         if (properties.some(p => p.id === property.id)) {\n//             throw new Error('Property ID already exists');\n//         }\n//     }\n\n//     // Title validation\n//     if (!property.title || !property.title.trim()) {\n//         throw new Error('Property title is required');\n//     }\n//     if (property.title.includes('\\n')) {\n//         throw new Error('Title must be a single line');\n//     }\n\n//     // Description validation\n//     if (property.description) {\n//         const descriptionLines = property.description.split('\\n').length;\n//         if (descriptionLines > 4) {\n//             throw new Error('Description cannot exceed 4 lines');\n//         }\n//     }\n\n//     // Location validation\n//     const validCities = [\n//         'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\n//         'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\n//         'Holon', 'Bnei Brak'\n//     ];\n\n//     if (!validCities.includes(property.location)) {\n//         throw new Error('Please select a valid city from the list');\n//     }\n\n//     // Price validation\n//     if (!property.price) {\n//         throw new Error('Property price is required');\n//     }\n\n//     const price = parseFloat(property.price);\n//     if (isNaN(price) || price <= 0) {\n//         throw new Error('Please enter a valid price greater than 0');\n//     }\n\n//     return true;\n// };\n\n// export const checkPropertyAvailability = async (propertyId, contract) => {\n//     try {\n//         const property = await contract.methods.properties(propertyId).call();\n//         return {\n//             exists: property.owner !== '0x0000000000000000000000000000000000000000',\n//             isActive: property.isActive,\n//             owner: property.owner\n//         };\n//     } catch (error) {\n//         console.error('Error checking property availability:', error);\n//         throw new Error('Failed to check property availability');\n//     }\n// };\n\n// export const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\n//     try {\n//         const gasEstimate = await contract.methods\n//             .createContract(contractId, propertyId)\n//             .estimateGas({\n//                 from: account,\n//                 value: value\n//             });\n\n//         // Add 20% buffer to gas estimate\n//         return Math.ceil(gasEstimate * 1.2);\n//     } catch (error) {\n//         if (error.message.includes('Property must be verified')) {\n//             throw new Error('This property must be verified before purchase');\n//         }\n//         throw new Error('Failed to estimate gas for the transaction');\n//     }\n// };","map":{"version":3,"names":[],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/web3.js"],"sourcesContent":["// // src/utilsApp/web3.js\r\n\r\n// import Web3 from 'web3';\r\n// import { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\r\n\r\n// export const initializeWeb3 = async () => {\r\n//     if (!window.ethereum) {\r\n//         throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\r\n//     }\r\n\r\n//     try {\r\n//         await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n//         return new Web3(window.ethereum);\r\n//     } catch (error) {\r\n//         console.error('Web3 initialization error:', error);\r\n//         if (error.code === 4001) {\r\n//             throw new Error('Please connect your wallet to use this application');\r\n//         }\r\n//         throw error;\r\n//     }\r\n// };\r\n// export const initializeContract = async (web3) => {\r\n//     if (!web3) {\r\n//         throw new Error('Web3 instance is required');\r\n//     }\r\n    \r\n//     try {\r\n//         const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n        \r\n//         // Simple contract validation\r\n//         const code = await web3.eth.getCode(CONTRACT_ADDRESS);\r\n//         if (code === '0x' || code === '0x0') {\r\n//             throw new Error('No contract found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\r\n//         }\r\n        \r\n//         return contract;\r\n//     } catch (error) {\r\n//         throw new Error(`Contract initialization failed: ${error.message}`);\r\n//     }\r\n// };\r\n\r\n// export const connectWallet = async () => {\r\n//     if (!window.ethereum) {\r\n//         throw new Error('MetaMask is not installed');\r\n//     }\r\n\r\n//     try {\r\n//         const accounts = await window.ethereum.request({\r\n//             method: 'eth_requestAccounts'\r\n//         });\r\n\r\n//         if (!accounts || accounts.length === 0) {\r\n//             throw new Error('No accounts found. Please unlock MetaMask.');\r\n//         }\r\n\r\n//         return accounts[0];\r\n//     } catch (error) {\r\n//         console.error('Wallet connection error:', error);\r\n//         if (error.code === 4001) {\r\n//             throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\r\n//         }\r\n//         throw new Error('Failed to connect wallet: ' + error.message);\r\n//     }\r\n// };\r\n\r\n// export const switchToHardhatNetwork = async () => {\r\n//     try {\r\n//         await window.ethereum.request({\r\n//             method: 'wallet_switchEthereumChain',\r\n//             params: [{ chainId: Web3.utils.toHex(31337) }] // Using proper hex conversion\r\n//         });\r\n//     } catch (switchError) {\r\n//         if (switchError.code === 4902) {\r\n//             try {\r\n//                 await window.ethereum.request({\r\n//                     method: 'wallet_addEthereumChain',\r\n//                     params: [{\r\n//                         chainId: Web3.utils.toHex(31337),\r\n//                         chainName: 'Hardhat Local Network',\r\n//                         nativeCurrency: {\r\n//                             name: 'ETH',\r\n//                             symbol: 'ETH',\r\n//                             decimals: 18\r\n//                         },\r\n//                         rpcUrls: ['http://127.0.0.1:8545'],\r\n//                         blockExplorerUrls: null\r\n//                     }]\r\n//                 });\r\n//             } catch (addError) {\r\n//                 throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\r\n//             }\r\n//         } else {\r\n//             throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\r\n//         }\r\n//     }\r\n// };\r\n\r\n\r\n// export const formatPrice = (web3Instance, priceInWei) => {\r\n//     if (!web3Instance || !priceInWei) return '0';\r\n//     try {\r\n//         return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\r\n//     } catch (error) {\r\n//         console.error('Price formatting error:', error);\r\n//         return '0';\r\n//     }\r\n// };\r\n\r\n// // export const validatePropertyData = (property) => {\r\n// //     if (!property.id || !property.id.trim()) {\r\n// //         throw new Error('Property ID is required');\r\n// //     }\r\n// //     if (!property.title || !property.title.trim()) {\r\n// //         throw new Error('Property title is required');\r\n// //     }\r\n// //     if (!property.price) {\r\n// //         throw new Error('Property price is required');\r\n// //     }\r\n\r\n// //     const price = parseFloat(property.price);\r\n// //     if (isNaN(price) || price <= 0) {\r\n// //         throw new Error('Please enter a valid price greater than 0');\r\n// //     }\r\n\r\n// //     return true;\r\n// // };\r\n\r\n\r\n// export const validateTransaction = async (web3, account, value) => {\r\n//     try {\r\n//         const balance = await web3.eth.getBalance(account);\r\n//         const gasPrice = await web3.eth.getGasPrice();\r\n//         const estimatedGas = '500000'; // Safe estimate for most transactions\r\n        \r\n//         const totalCost = web3.utils.toBN(value).add(\r\n//             web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas))\r\n//         );\r\n        \r\n//         if (web3.utils.toBN(balance).lt(totalCost)) {\r\n//             throw new Error('Insufficient funds for transaction and gas fees');\r\n//         }\r\n        \r\n//         return {\r\n//             gasPrice,\r\n//             estimatedGas\r\n//         };\r\n//     } catch (error) {\r\n//         throw new Error(`Transaction validation failed: ${error.message}`);\r\n//     }\r\n// };\r\n\r\n\r\n\r\n\r\n// // Property validation and utilities\r\n// export const validatePropertyData = async (property, contract) => {\r\n//     if (!property.id || !property.id.trim()) {\r\n//         throw new Error('Property ID is required');\r\n//     }\r\n\r\n//     // Check for existing property ID\r\n//     if (contract) {\r\n//         const properties = await contract.methods.getAllProperties().call();\r\n//         if (properties.some(p => p.id === property.id)) {\r\n//             throw new Error('Property ID already exists');\r\n//         }\r\n//     }\r\n\r\n//     // Title validation\r\n//     if (!property.title || !property.title.trim()) {\r\n//         throw new Error('Property title is required');\r\n//     }\r\n//     if (property.title.includes('\\n')) {\r\n//         throw new Error('Title must be a single line');\r\n//     }\r\n\r\n//     // Description validation\r\n//     if (property.description) {\r\n//         const descriptionLines = property.description.split('\\n').length;\r\n//         if (descriptionLines > 4) {\r\n//             throw new Error('Description cannot exceed 4 lines');\r\n//         }\r\n//     }\r\n\r\n//     // Location validation\r\n//     const validCities = [\r\n//         'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n//         'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n//         'Holon', 'Bnei Brak'\r\n//     ];\r\n    \r\n//     if (!validCities.includes(property.location)) {\r\n//         throw new Error('Please select a valid city from the list');\r\n//     }\r\n\r\n//     // Price validation\r\n//     if (!property.price) {\r\n//         throw new Error('Property price is required');\r\n//     }\r\n\r\n//     const price = parseFloat(property.price);\r\n//     if (isNaN(price) || price <= 0) {\r\n//         throw new Error('Please enter a valid price greater than 0');\r\n//     }\r\n\r\n//     return true;\r\n// };\r\n\r\n// export const checkPropertyAvailability = async (propertyId, contract) => {\r\n//     try {\r\n//         const property = await contract.methods.properties(propertyId).call();\r\n//         return {\r\n//             exists: property.owner !== '0x0000000000000000000000000000000000000000',\r\n//             isActive: property.isActive,\r\n//             owner: property.owner\r\n//         };\r\n//     } catch (error) {\r\n//         console.error('Error checking property availability:', error);\r\n//         throw new Error('Failed to check property availability');\r\n//     }\r\n// };\r\n\r\n// export const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\r\n//     try {\r\n//         const gasEstimate = await contract.methods\r\n//             .createContract(contractId, propertyId)\r\n//             .estimateGas({\r\n//                 from: account,\r\n//                 value: value\r\n//             });\r\n\r\n//         // Add 20% buffer to gas estimate\r\n//         return Math.ceil(gasEstimate * 1.2);\r\n//     } catch (error) {\r\n//         if (error.message.includes('Property must be verified')) {\r\n//             throw new Error('This property must be verified before purchase');\r\n//         }\r\n//         throw new Error('Failed to estimate gas for the transaction');\r\n//     }\r\n// };"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}