{"ast":null,"code":"// src/utils/errors.js\n\n// Property data validation\nexport const validatePropertyFormData = property => {\n  const errors = {};\n\n  // ID validation\n  if (!property.id || !property.id.trim()) {\n    errors.id = 'Property ID is required';\n  } else if (property.id.length < 3) {\n    errors.id = 'Property ID must be at least 3 characters long';\n  } else if (!/^[a-zA-Z0-9-]+$/.test(property.id)) {\n    errors.id = 'Property ID can only contain letters, numbers, and hyphens';\n  }\n\n  // Title validation\n  if (!property.title || !property.title.trim()) {\n    errors.title = 'Title is required';\n  } else if (property.title.includes('\\n')) {\n    errors.title = 'Title must be a single line';\n  } else if (property.title.length > 100) {\n    errors.title = 'Title cannot exceed 100 characters';\n  }\n\n  // Description validation\n  if (property.description) {\n    const descriptionLines = property.description.split('\\n').length;\n    if (descriptionLines > 4) {\n      errors.description = 'Description cannot exceed 4 lines';\n    } else if (property.description.length > 500) {\n      errors.description = 'Description cannot exceed 500 characters';\n    }\n  }\n\n  // Location validation\n  const validCities = ['Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion', 'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva', 'Holon', 'Bnei Brak'];\n  if (!property.location) {\n    errors.location = 'Location is required';\n  } else if (!validCities.includes(property.location)) {\n    errors.location = 'Please select a valid city from the list';\n  }\n\n  // Price validation\n  if (!property.price) {\n    errors.price = 'Price is required';\n  } else {\n    const price = parseFloat(property.price);\n    if (isNaN(price)) {\n      errors.price = 'Please enter a valid number';\n    } else if (price <= 0) {\n      errors.price = 'Price must be greater than 0';\n    } else if (price > 1000000) {\n      errors.price = 'Price exceeds maximum allowed value';\n    }\n  }\n  return errors;\n};\n\n// Gas calculation and validation\nexport const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\n  try {\n    const gasEstimate = await contract.methods.createContract(contractId, propertyId).estimateGas({\n      from: account,\n      value: value\n    });\n    return Math.ceil(gasEstimate * 1.2); // Add 20% buffer\n  } catch (error) {\n    if (error.message.includes('Property must be verified')) {\n      throw new Error('This property must be verified before purchase');\n    }\n    throw new Error('Failed to estimate gas for the transaction');\n  }\n};\n\n// Transaction validation\nexport const validateTransaction = async (web3, account, value) => {\n  try {\n    const balance = await web3.eth.getBalance(account);\n    const gasPrice = await web3.eth.getGasPrice();\n    const estimatedGas = '500000'; // Safe estimate\n\n    const totalCost = web3.utils.toBN(value).add(web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas)));\n    if (web3.utils.toBN(balance).lt(totalCost)) {\n      throw new Error('Insufficient funds for transaction and gas fees');\n    }\n    return {\n      gasPrice,\n      estimatedGas\n    };\n  } catch (error) {\n    throw new Error(`Transaction validation failed: ${error.message}`);\n  }\n};\n\n// Property validation \nexport const validatePropertyData = async (property, contract) => {\n  var _property$id, _property$title, _property$location;\n  // Basic data presence checks\n  if (!((_property$id = property.id) !== null && _property$id !== void 0 && _property$id.trim())) {\n    throw new Error('Property ID is required');\n  }\n  if (!((_property$title = property.title) !== null && _property$title !== void 0 && _property$title.trim())) {\n    throw new Error('Property title is required');\n  }\n  if (!((_property$location = property.location) !== null && _property$location !== void 0 && _property$location.trim())) {\n    throw new Error('Property location is required');\n  }\n  if (!property.price || isNaN(property.price) || parseFloat(property.price) <= 0) {\n    throw new Error('Please enter a valid price greater than 0');\n  }\n  try {\n    // Check for existing property\n    if (contract) {\n      const properties = await contract.methods.getAllProperties().call();\n      const exists = properties.some(p => p.id === property.id);\n      if (exists) {\n        throw new Error('Property ID already exists');\n      }\n    }\n\n    // Validate price format\n    const price = parseFloat(property.price);\n    if (price > 1000000) {\n      throw new Error('Price cannot exceed 1,000,000 ETH');\n    }\n\n    // Validate description length\n    if (property.description) {\n      const lines = property.description.split('\\n');\n      if (lines.length > 4) {\n        throw new Error('Description cannot exceed 4 lines');\n      }\n    }\n    return true;\n  } catch (error) {\n    throw new Error(error.message || 'Failed to validate property data');\n  }\n};\n\n// Web3 error handling\nexport const handleWeb3Error = (error, context = '') => {\n  let errorMessage = 'An unexpected error occurred.';\n  if (typeof error === 'string') {\n    errorMessage = error;\n  } else if (error.message) {\n    if (error.message.includes('Internal JSON-RPC error')) {\n      if (error.message.includes('insufficient funds')) {\n        errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\n      } else if (error.message.includes('gas required exceeds allowance')) {\n        errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\n      } else if (error.message.includes('nonce too low')) {\n        errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\n      } else {\n        errorMessage = 'A network error occurred. Please check your connection and try again.';\n      }\n    } else if (error.message.includes('User denied')) {\n      errorMessage = 'Transaction was cancelled by the user.';\n    } else if (error.message.includes('MetaMask')) {\n      errorMessage = 'Please ensure MetaMask is installed and unlocked.';\n    }\n  }\n  return {\n    message: errorMessage,\n    context: context,\n    originalError: error\n  };\n};\n\n// Display error message\nexport const displayErrorMessage = (error, context = '') => {\n  const processedError = handleWeb3Error(error, context);\n  console.error(`${processedError.context}: `, processedError.originalError);\n  return processedError.message;\n};","map":{"version":3,"names":["validatePropertyFormData","property","errors","id","trim","length","test","title","includes","description","descriptionLines","split","validCities","location","price","parseFloat","isNaN","calculatePropertyPurchaseGas","contract","propertyId","contractId","account","value","gasEstimate","methods","createContract","estimateGas","from","Math","ceil","error","message","Error","validateTransaction","web3","balance","eth","getBalance","gasPrice","getGasPrice","estimatedGas","totalCost","utils","toBN","add","mul","lt","validatePropertyData","_property$id","_property$title","_property$location","properties","getAllProperties","call","exists","some","p","lines","handleWeb3Error","context","errorMessage","originalError","displayErrorMessage","processedError","console"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/errors.js"],"sourcesContent":["\r\n\r\n// src/utils/errors.js\r\n\r\n// Property data validation\r\nexport const validatePropertyFormData = (property) => {\r\n    const errors = {};\r\n    \r\n    // ID validation\r\n    if (!property.id || !property.id.trim()) {\r\n        errors.id = 'Property ID is required';\r\n    } else if (property.id.length < 3) {\r\n        errors.id = 'Property ID must be at least 3 characters long';\r\n    } else if (!/^[a-zA-Z0-9-]+$/.test(property.id)) {\r\n        errors.id = 'Property ID can only contain letters, numbers, and hyphens';\r\n    }\r\n\r\n    // Title validation\r\n    if (!property.title || !property.title.trim()) {\r\n        errors.title = 'Title is required';\r\n    } else if (property.title.includes('\\n')) {\r\n        errors.title = 'Title must be a single line';\r\n    } else if (property.title.length > 100) {\r\n        errors.title = 'Title cannot exceed 100 characters';\r\n    }\r\n\r\n    // Description validation\r\n    if (property.description) {\r\n        const descriptionLines = property.description.split('\\n').length;\r\n        if (descriptionLines > 4) {\r\n            errors.description = 'Description cannot exceed 4 lines';\r\n        } else if (property.description.length > 500) {\r\n            errors.description = 'Description cannot exceed 500 characters';\r\n        }\r\n    }\r\n\r\n    // Location validation\r\n    const validCities = [\r\n        'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n        'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n        'Holon', 'Bnei Brak'\r\n    ];\r\n    \r\n    if (!property.location) {\r\n        errors.location = 'Location is required';\r\n    } else if (!validCities.includes(property.location)) {\r\n        errors.location = 'Please select a valid city from the list';\r\n    }\r\n\r\n    // Price validation\r\n    if (!property.price) {\r\n        errors.price = 'Price is required';\r\n    } else {\r\n        const price = parseFloat(property.price);\r\n        if (isNaN(price)) {\r\n            errors.price = 'Please enter a valid number';\r\n        } else if (price <= 0) {\r\n            errors.price = 'Price must be greater than 0';\r\n        } else if (price > 1000000) {\r\n            errors.price = 'Price exceeds maximum allowed value';\r\n        }\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n// Gas calculation and validation\r\nexport const calculatePropertyPurchaseGas = async (contract, propertyId, contractId, account, value) => {\r\n    try {\r\n        const gasEstimate = await contract.methods\r\n            .createContract(contractId, propertyId)\r\n            .estimateGas({\r\n                from: account,\r\n                value: value\r\n            });\r\n\r\n        return Math.ceil(gasEstimate * 1.2); // Add 20% buffer\r\n    } catch (error) {\r\n        if (error.message.includes('Property must be verified')) {\r\n            throw new Error('This property must be verified before purchase');\r\n        }\r\n        throw new Error('Failed to estimate gas for the transaction');\r\n    }\r\n};\r\n\r\n// Transaction validation\r\nexport const validateTransaction = async (web3, account, value) => {\r\n    try {\r\n        const balance = await web3.eth.getBalance(account);\r\n        const gasPrice = await web3.eth.getGasPrice();\r\n        const estimatedGas = '500000'; // Safe estimate\r\n        \r\n        const totalCost = web3.utils.toBN(value).add(\r\n            web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas))\r\n        );\r\n        \r\n        if (web3.utils.toBN(balance).lt(totalCost)) {\r\n            throw new Error('Insufficient funds for transaction and gas fees');\r\n        }\r\n        \r\n        return {\r\n            gasPrice,\r\n            estimatedGas\r\n        };\r\n    } catch (error) {\r\n        throw new Error(`Transaction validation failed: ${error.message}`);\r\n    }\r\n};\r\n\r\n// Property validation \r\nexport const validatePropertyData = async (property, contract) => {\r\n    // Basic data presence checks\r\n    if (!property.id?.trim()) {\r\n        throw new Error('Property ID is required');\r\n    }\r\n    if (!property.title?.trim()) {\r\n        throw new Error('Property title is required');\r\n    }\r\n    if (!property.location?.trim()) {\r\n        throw new Error('Property location is required');\r\n    }\r\n    if (!property.price || isNaN(property.price) || parseFloat(property.price) <= 0) {\r\n        throw new Error('Please enter a valid price greater than 0');\r\n    }\r\n\r\n    try {\r\n        // Check for existing property\r\n        if (contract) {\r\n            const properties = await contract.methods.getAllProperties().call();\r\n            const exists = properties.some(p => p.id === property.id);\r\n            if (exists) {\r\n                throw new Error('Property ID already exists');\r\n            }\r\n        }\r\n\r\n        // Validate price format\r\n        const price = parseFloat(property.price);\r\n        if (price > 1000000) {\r\n            throw new Error('Price cannot exceed 1,000,000 ETH');\r\n        }\r\n\r\n        // Validate description length\r\n        if (property.description) {\r\n            const lines = property.description.split('\\n');\r\n            if (lines.length > 4) {\r\n                throw new Error('Description cannot exceed 4 lines');\r\n            }\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        throw new Error(error.message || 'Failed to validate property data');\r\n    }\r\n};\r\n\r\n// Web3 error handling\r\nexport const handleWeb3Error = (error, context = '') => {\r\n    let errorMessage = 'An unexpected error occurred.';\r\n    \r\n    if (typeof error === 'string') {\r\n        errorMessage = error;\r\n    } else if (error.message) {\r\n        if (error.message.includes('Internal JSON-RPC error')) {\r\n            if (error.message.includes('insufficient funds')) {\r\n                errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\r\n            } else if (error.message.includes('gas required exceeds allowance')) {\r\n                errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\r\n            } else if (error.message.includes('nonce too low')) {\r\n                errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\r\n            } else {\r\n                errorMessage = 'A network error occurred. Please check your connection and try again.';\r\n            }\r\n        } else if (error.message.includes('User denied')) {\r\n            errorMessage = 'Transaction was cancelled by the user.';\r\n        } else if (error.message.includes('MetaMask')) {\r\n            errorMessage = 'Please ensure MetaMask is installed and unlocked.';\r\n        }\r\n    }\r\n    \r\n    return {\r\n        message: errorMessage,\r\n        context: context,\r\n        originalError: error\r\n    };\r\n};\r\n\r\n// Display error message\r\nexport const displayErrorMessage = (error, context = '') => {\r\n    const processedError = handleWeb3Error(error, context);\r\n    console.error(`${processedError.context}: `, processedError.originalError);\r\n    return processedError.message;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}