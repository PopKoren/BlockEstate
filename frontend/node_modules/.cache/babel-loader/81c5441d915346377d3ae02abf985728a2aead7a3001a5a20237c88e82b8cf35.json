{"ast":null,"code":"// src/utilsApp/web3.js\n\nimport Web3 from 'web3';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\nexport const initializeWeb3 = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\n  }\n  try {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    const web3 = new Web3(window.ethereum);\n\n    // Verify connection\n    const networkId = await web3.eth.net.getId();\n    if (networkId !== 31337) {\n      throw new Error('Please connect to the Hardhat network');\n    }\n    return web3;\n  } catch (error) {\n    console.error('Web3 initialization error:', error);\n    throw new Error(error.message || 'Failed to initialize Web3');\n  }\n};\nexport const initializeContract = async web3 => {\n  if (!web3) {\n    throw new Error('Web3 instance is required');\n  }\n  try {\n    const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\n\n    // Verify contract deployment\n    const code = await web3.eth.getCode(CONTRACT_ADDRESS);\n    if (code === '0x' || code === '0x0') {\n      throw new Error('Contract not found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\n    }\n\n    // Verify contract methods\n    if (!contract.methods.createProperty || !contract.methods.getAllProperties) {\n      throw new Error('Contract methods not found. Please check the ABI configuration.');\n    }\n    return contract;\n  } catch (error) {\n    console.error('Contract initialization error:', error);\n    throw new Error(`Contract initialization failed: ${error.message}`);\n  }\n};\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed');\n  }\n  try {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    if (!accounts || accounts.length === 0) {\n      throw new Error('No accounts found. Please unlock MetaMask.');\n    }\n    return accounts[0];\n  } catch (error) {\n    console.error('Wallet connection error:', error);\n    if (error.code === 4001) {\n      throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\n    }\n    throw new Error('Failed to connect wallet: ' + error.message);\n  }\n};\nexport const switchToHardhatNetwork = async () => {\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: Web3.utils.toHex(31337)\n      }] // Using proper hex conversion\n    });\n  } catch (switchError) {\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: Web3.utils.toHex(31337),\n            chainName: 'Hardhat Local Network',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['http://127.0.0.1:8545'],\n            blockExplorerUrls: null\n          }]\n        });\n      } catch (addError) {\n        throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\n      }\n    } else {\n      throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\n    }\n  }\n};\nexport const formatPrice = (web3Instance, priceInWei) => {\n  if (!web3Instance || !priceInWei) return '0';\n  try {\n    return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\n  } catch (error) {\n    console.error('Price formatting error:', error);\n    return '0';\n  }\n};\nexport const validatePropertyData = property => {\n  if (!property.id || !property.id.trim()) {\n    throw new Error('Property ID is required');\n  }\n  if (!property.title || !property.title.trim()) {\n    throw new Error('Property title is required');\n  }\n  if (!property.price) {\n    throw new Error('Property price is required');\n  }\n  const price = parseFloat(property.price);\n  if (isNaN(price) || price <= 0) {\n    throw new Error('Please enter a valid price greater than 0');\n  }\n  return true;\n};\nexport const validateTransaction = async (web3, account, value) => {\n  try {\n    const balance = await web3.eth.getBalance(account);\n    const gasPrice = await web3.eth.getGasPrice();\n    const estimatedGas = '500000'; // Safe estimate for most transactions\n\n    const totalCost = web3.utils.toBN(value).add(web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas)));\n    if (web3.utils.toBN(balance).lt(totalCost)) {\n      throw new Error('Insufficient funds for transaction and gas fees');\n    }\n    return {\n      gasPrice,\n      estimatedGas\n    };\n  } catch (error) {\n    throw new Error(`Transaction validation failed: ${error.message}`);\n  }\n};","map":{"version":3,"names":["Web3","CONTRACT_ADDRESS","CONTRACT_ABI","initializeWeb3","window","ethereum","Error","request","method","web3","networkId","eth","net","getId","error","console","message","initializeContract","contract","Contract","code","getCode","methods","createProperty","getAllProperties","connectWallet","accounts","length","switchToHardhatNetwork","params","chainId","utils","toHex","switchError","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","formatPrice","web3Instance","priceInWei","fromWei","toString","validatePropertyData","property","id","trim","title","price","parseFloat","isNaN","validateTransaction","account","value","balance","getBalance","gasPrice","getGasPrice","estimatedGas","totalCost","toBN","add","mul","lt"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/web3.js"],"sourcesContent":["// src/utilsApp/web3.js\r\n\r\nimport Web3 from 'web3';\r\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../config/contract';\r\n\r\nexport const initializeWeb3 = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed. Please install MetaMask to use this application.');\r\n    }\r\n\r\n    try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const web3 = new Web3(window.ethereum);\r\n        \r\n        // Verify connection\r\n        const networkId = await web3.eth.net.getId();\r\n        if (networkId !== 31337) {\r\n            throw new Error('Please connect to the Hardhat network');\r\n        }\r\n        \r\n        return web3;\r\n    } catch (error) {\r\n        console.error('Web3 initialization error:', error);\r\n        throw new Error(error.message || 'Failed to initialize Web3');\r\n    }\r\n};\r\n\r\nexport const initializeContract = async (web3) => {\r\n    if (!web3) {\r\n        throw new Error('Web3 instance is required');\r\n    }\r\n    \r\n    try {\r\n        const contract = new web3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n        \r\n        // Verify contract deployment\r\n        const code = await web3.eth.getCode(CONTRACT_ADDRESS);\r\n        if (code === '0x' || code === '0x0') {\r\n            throw new Error('Contract not found at the specified address. Please ensure Hardhat is running and the contract is deployed.');\r\n        }\r\n        \r\n        // Verify contract methods\r\n        if (!contract.methods.createProperty || !contract.methods.getAllProperties) {\r\n            throw new Error('Contract methods not found. Please check the ABI configuration.');\r\n        }\r\n        \r\n        return contract;\r\n    } catch (error) {\r\n        console.error('Contract initialization error:', error);\r\n        throw new Error(`Contract initialization failed: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (!window.ethereum) {\r\n        throw new Error('MetaMask is not installed');\r\n    }\r\n\r\n    try {\r\n        const accounts = await window.ethereum.request({\r\n            method: 'eth_requestAccounts'\r\n        });\r\n\r\n        if (!accounts || accounts.length === 0) {\r\n            throw new Error('No accounts found. Please unlock MetaMask.');\r\n        }\r\n\r\n        return accounts[0];\r\n    } catch (error) {\r\n        console.error('Wallet connection error:', error);\r\n        if (error.code === 4001) {\r\n            throw new Error('Connection rejected. Please approve the connection request in MetaMask.');\r\n        }\r\n        throw new Error('Failed to connect wallet: ' + error.message);\r\n    }\r\n};\r\n\r\nexport const switchToHardhatNetwork = async () => {\r\n    try {\r\n        await window.ethereum.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [{ chainId: Web3.utils.toHex(31337) }] // Using proper hex conversion\r\n        });\r\n    } catch (switchError) {\r\n        if (switchError.code === 4902) {\r\n            try {\r\n                await window.ethereum.request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{\r\n                        chainId: Web3.utils.toHex(31337),\r\n                        chainName: 'Hardhat Local Network',\r\n                        nativeCurrency: {\r\n                            name: 'ETH',\r\n                            symbol: 'ETH',\r\n                            decimals: 18\r\n                        },\r\n                        rpcUrls: ['http://127.0.0.1:8545'],\r\n                        blockExplorerUrls: null\r\n                    }]\r\n                });\r\n            } catch (addError) {\r\n                throw new Error('Failed to add Hardhat network to MetaMask. Please try again.');\r\n            }\r\n        } else {\r\n            throw new Error('Failed to switch to Hardhat network. Please make sure Hardhat is running.');\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const formatPrice = (web3Instance, priceInWei) => {\r\n    if (!web3Instance || !priceInWei) return '0';\r\n    try {\r\n        return web3Instance.utils.fromWei(priceInWei.toString(), 'ether');\r\n    } catch (error) {\r\n        console.error('Price formatting error:', error);\r\n        return '0';\r\n    }\r\n};\r\n\r\nexport const validatePropertyData = (property) => {\r\n    if (!property.id || !property.id.trim()) {\r\n        throw new Error('Property ID is required');\r\n    }\r\n    if (!property.title || !property.title.trim()) {\r\n        throw new Error('Property title is required');\r\n    }\r\n    if (!property.price) {\r\n        throw new Error('Property price is required');\r\n    }\r\n\r\n    const price = parseFloat(property.price);\r\n    if (isNaN(price) || price <= 0) {\r\n        throw new Error('Please enter a valid price greater than 0');\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n\r\nexport const validateTransaction = async (web3, account, value) => {\r\n    try {\r\n        const balance = await web3.eth.getBalance(account);\r\n        const gasPrice = await web3.eth.getGasPrice();\r\n        const estimatedGas = '500000'; // Safe estimate for most transactions\r\n        \r\n        const totalCost = web3.utils.toBN(value).add(\r\n            web3.utils.toBN(gasPrice).mul(web3.utils.toBN(estimatedGas))\r\n        );\r\n        \r\n        if (web3.utils.toBN(balance).lt(totalCost)) {\r\n            throw new Error('Insufficient funds for transaction and gas fees');\r\n        }\r\n        \r\n        return {\r\n            gasPrice,\r\n            estimatedGas\r\n        };\r\n    } catch (error) {\r\n        throw new Error(`Transaction validation failed: ${error.message}`);\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}