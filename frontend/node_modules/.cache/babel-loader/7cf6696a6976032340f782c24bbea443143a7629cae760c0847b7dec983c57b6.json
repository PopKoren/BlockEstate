{"ast":null,"code":"// // src/utils/errors.js\n// // export const handleWeb3Error = (error, context = '') => {\n// //     let errorMessage = 'An unexpected error occurred.';\n\n// //     if (typeof error === 'string') {\n// //         errorMessage = error;\n// //     } else if (error.message) {\n// //         if (error.message.includes('Internal JSON-RPC error')) {\n// //             if (error.message.includes('insufficient funds')) {\n// //                 errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\n// //             } else if (error.message.includes('gas required exceeds allowance')) {\n// //                 errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\n// //             } else if (error.message.includes('nonce too low')) {\n// //                 errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\n// //             } else {\n// //                 errorMessage = 'A network error occurred. Please check your connection and try again.';\n// //             }\n// //         } else if (error.message.includes('User denied')) {\n// //             errorMessage = 'Transaction was cancelled by the user.';\n// //         } else if (error.message.includes('MetaMask')) {\n// //             errorMessage = 'Please ensure MetaMask is installed and unlocked.';\n// //         }\n// //     }\n\n// //     return {\n// //         message: errorMessage,\n// //         context: context,\n// //         originalError: error\n// //     };\n// // };\n\n// export const displayErrorMessage = (error, context = '') => {\n//     const processedError = handleWeb3Error(error, context);\n//     console.error(`${processedError.context}: `, processedError.originalError);\n//     return processedError.message;\n// };\n\n// // Property data validation\n// export const validatePropertyFormData = (property) => {\n//     const errors = {};\n\n//     // ID validation\n//     if (!property.id || !property.id.trim()) {\n//         errors.id = 'Property ID is required';\n//     } else if (property.id.length < 3) {\n//         errors.id = 'Property ID must be at least 3 characters long';\n//     } else if (!/^[a-zA-Z0-9-]+$/.test(property.id)) {\n//         errors.id = 'Property ID can only contain letters, numbers, and hyphens';\n//     }\n\n//     // Title validation\n//     if (!property.title || !property.title.trim()) {\n//         errors.title = 'Title is required';\n//     } else if (property.title.includes('\\n')) {\n//         errors.title = 'Title must be a single line';\n//     } else if (property.title.length > 100) {\n//         errors.title = 'Title cannot exceed 100 characters';\n//     }\n\n//     // Description validation\n//     if (property.description) {\n//         const descriptionLines = property.description.split('\\n').length;\n//         if (descriptionLines > 4) {\n//             errors.description = 'Description cannot exceed 4 lines';\n//         } else if (property.description.length > 500) {\n//             errors.description = 'Description cannot exceed 500 characters';\n//         }\n//     }\n\n//     // Location validation\n//     const validCities = [\n//         'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\n//         'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\n//         'Holon', 'Bnei Brak'\n//     ];\n\n//     if (!property.location) {\n//         errors.location = 'Location is required';\n//     } else if (!validCities.includes(property.location)) {\n//         errors.location = 'Please select a valid city from the list';\n//     }\n\n//     // Price validation\n//     if (!property.price) {\n//         errors.price = 'Price is required';\n//     } else {\n//         const price = parseFloat(property.price);\n//         if (isNaN(price)) {\n//             errors.price = 'Please enter a valid number';\n//         } else if (price <= 0) {\n//             errors.price = 'Price must be greater than 0';\n//         } else if (price > 1000000) {\n//             errors.price = 'Price exceeds maximum allowed value';\n//         }\n//     }\n\n//     return errors;\n// };\n\n// // Property transaction error handling\n// export const handlePropertyTransactionError = (error) => {\n//     let errorMessage = 'An unexpected error occurred during the transaction.';\n//     let errorType = 'TRANSACTION_ERROR';\n//     let errorDetails = {};\n\n//     if (error.message.includes('insufficient funds')) {\n//         errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\n//         errorType = 'INSUFFICIENT_FUNDS';\n//         errorDetails = {\n//             actionRequired: 'Add more funds to your wallet',\n//             severity: 'high'\n//         };\n//     } else if (error.message.includes('Property ID already exists')) {\n//         errorMessage = 'This property ID is already in use. Please choose a different one.';\n//         errorType = 'DUPLICATE_ID';\n//         errorDetails = {\n//             actionRequired: 'Choose a new property ID',\n//             severity: 'medium'\n//         };\n//     } else if (error.message.includes('gas required exceeds allowance')) {\n//         errorMessage = 'The transaction requires more gas than currently allowed. Please try with a higher gas limit.';\n//         errorType = 'GAS_LIMIT_EXCEEDED';\n//         errorDetails = {\n//             actionRequired: 'Increase gas limit',\n//             severity: 'medium'\n//         };\n//     } else if (error.message.includes('User denied')) {\n//         errorMessage = 'Transaction was cancelled by the user.';\n//         errorType = 'USER_REJECTED';\n//         errorDetails = {\n//             actionRequired: 'Retry transaction',\n//             severity: 'low'\n//         };\n//     } else if (error.message.includes('Property is not available')) {\n//         errorMessage = 'This property is no longer available for purchase.';\n//         errorType = 'PROPERTY_UNAVAILABLE';\n//         errorDetails = {\n//             actionRequired: 'Select a different property',\n//             severity: 'medium'\n//         };\n//     } else if (error.message.includes('own property')) {\n//         errorMessage = 'You cannot purchase your own property.';\n//         errorType = 'INVALID_PURCHASE';\n//         errorDetails = {\n//             actionRequired: 'Select a different property',\n//             severity: 'low'\n//         };\n//     }\n\n//     return {\n//         message: errorMessage,\n//         type: errorType,\n//         details: errorDetails\n//     };\n// };\n\n// // Web3 connection error handling\n// export const handleWeb3Error = (error, context = '') => {\n//     let errorMessage = 'An unexpected error occurred.';\n\n//     if (typeof error === 'string') {\n//         errorMessage = error;\n//     } else if (error.message) {\n//         if (error.message.includes('Internal JSON-RPC error')) {\n//             if (error.message.includes('insufficient funds')) {\n//                 errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\n//             } else if (error.message.includes('gas required exceeds allowance')) {\n//                 errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\n//             } else if (error.message.includes('nonce too low')) {\n//                 errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\n//             } else {\n//                 errorMessage = 'A network error occurred. Please check your connection and try again.';\n//             }\n//         } else if (error.message.includes('User denied')) {\n//             errorMessage = 'Transaction was cancelled by the user.';\n//         } else if (error.message.includes('MetaMask')) {\n//             errorMessage = 'Please ensure MetaMask is installed and unlocked.';\n//         }\n//     }\n\n//     return {\n//         message: errorMessage,\n//         context: context,\n//         originalError: error\n//     };\n// };\n\n// // Property validation error messaging\n// export const getPropertyValidationMessage = (errorType) => {\n//     const errorMessages = {\n//         INVALID_ID: 'Invalid property ID format. Use only letters, numbers, and hyphens.',\n//         INVALID_TITLE: 'Invalid property title. Title must be a single line and not exceed 100 characters.',\n//         INVALID_DESCRIPTION: 'Invalid description. Keep it within 4 lines and 500 characters.',\n//         INVALID_LOCATION: 'Please select a valid location from the provided list of Israeli cities.',\n//         INVALID_PRICE: 'Invalid price. Enter a positive number not exceeding 1,000,000 ETH.',\n//         DUPLICATE_PROPERTY: 'A property with this ID already exists in the system.',\n//         PROPERTY_UNAVAILABLE: 'This property is not available for purchase.',\n//         UNAUTHORIZED_PURCHASE: 'You are not authorized to purchase this property.',\n//         INSUFFICIENT_FUNDS: 'Your wallet balance is insufficient for this purchase.',\n//         NETWORK_ERROR: 'Network error. Please check your connection and try again.',\n//         CONTRACT_ERROR: 'Smart contract error. Please try again or contact support.'\n//     };\n\n//     return errorMessages[errorType] || 'An unknown error occurred. Please try again.';\n// };","map":{"version":3,"names":[],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/utilsApp/errors.js"],"sourcesContent":["// // src/utils/errors.js\r\n// // export const handleWeb3Error = (error, context = '') => {\r\n// //     let errorMessage = 'An unexpected error occurred.';\r\n    \r\n// //     if (typeof error === 'string') {\r\n// //         errorMessage = error;\r\n// //     } else if (error.message) {\r\n// //         if (error.message.includes('Internal JSON-RPC error')) {\r\n// //             if (error.message.includes('insufficient funds')) {\r\n// //                 errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\r\n// //             } else if (error.message.includes('gas required exceeds allowance')) {\r\n// //                 errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\r\n// //             } else if (error.message.includes('nonce too low')) {\r\n// //                 errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\r\n// //             } else {\r\n// //                 errorMessage = 'A network error occurred. Please check your connection and try again.';\r\n// //             }\r\n// //         } else if (error.message.includes('User denied')) {\r\n// //             errorMessage = 'Transaction was cancelled by the user.';\r\n// //         } else if (error.message.includes('MetaMask')) {\r\n// //             errorMessage = 'Please ensure MetaMask is installed and unlocked.';\r\n// //         }\r\n// //     }\r\n    \r\n// //     return {\r\n// //         message: errorMessage,\r\n// //         context: context,\r\n// //         originalError: error\r\n// //     };\r\n// // };\r\n\r\n// export const displayErrorMessage = (error, context = '') => {\r\n//     const processedError = handleWeb3Error(error, context);\r\n//     console.error(`${processedError.context}: `, processedError.originalError);\r\n//     return processedError.message;\r\n// };\r\n\r\n\r\n\r\n\r\n// // Property data validation\r\n// export const validatePropertyFormData = (property) => {\r\n//     const errors = {};\r\n    \r\n//     // ID validation\r\n//     if (!property.id || !property.id.trim()) {\r\n//         errors.id = 'Property ID is required';\r\n//     } else if (property.id.length < 3) {\r\n//         errors.id = 'Property ID must be at least 3 characters long';\r\n//     } else if (!/^[a-zA-Z0-9-]+$/.test(property.id)) {\r\n//         errors.id = 'Property ID can only contain letters, numbers, and hyphens';\r\n//     }\r\n\r\n//     // Title validation\r\n//     if (!property.title || !property.title.trim()) {\r\n//         errors.title = 'Title is required';\r\n//     } else if (property.title.includes('\\n')) {\r\n//         errors.title = 'Title must be a single line';\r\n//     } else if (property.title.length > 100) {\r\n//         errors.title = 'Title cannot exceed 100 characters';\r\n//     }\r\n\r\n//     // Description validation\r\n//     if (property.description) {\r\n//         const descriptionLines = property.description.split('\\n').length;\r\n//         if (descriptionLines > 4) {\r\n//             errors.description = 'Description cannot exceed 4 lines';\r\n//         } else if (property.description.length > 500) {\r\n//             errors.description = 'Description cannot exceed 500 characters';\r\n//         }\r\n//     }\r\n\r\n//     // Location validation\r\n//     const validCities = [\r\n//         'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n//         'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n//         'Holon', 'Bnei Brak'\r\n//     ];\r\n    \r\n//     if (!property.location) {\r\n//         errors.location = 'Location is required';\r\n//     } else if (!validCities.includes(property.location)) {\r\n//         errors.location = 'Please select a valid city from the list';\r\n//     }\r\n\r\n//     // Price validation\r\n//     if (!property.price) {\r\n//         errors.price = 'Price is required';\r\n//     } else {\r\n//         const price = parseFloat(property.price);\r\n//         if (isNaN(price)) {\r\n//             errors.price = 'Please enter a valid number';\r\n//         } else if (price <= 0) {\r\n//             errors.price = 'Price must be greater than 0';\r\n//         } else if (price > 1000000) {\r\n//             errors.price = 'Price exceeds maximum allowed value';\r\n//         }\r\n//     }\r\n\r\n//     return errors;\r\n// };\r\n\r\n// // Property transaction error handling\r\n// export const handlePropertyTransactionError = (error) => {\r\n//     let errorMessage = 'An unexpected error occurred during the transaction.';\r\n//     let errorType = 'TRANSACTION_ERROR';\r\n//     let errorDetails = {};\r\n\r\n//     if (error.message.includes('insufficient funds')) {\r\n//         errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\r\n//         errorType = 'INSUFFICIENT_FUNDS';\r\n//         errorDetails = {\r\n//             actionRequired: 'Add more funds to your wallet',\r\n//             severity: 'high'\r\n//         };\r\n//     } else if (error.message.includes('Property ID already exists')) {\r\n//         errorMessage = 'This property ID is already in use. Please choose a different one.';\r\n//         errorType = 'DUPLICATE_ID';\r\n//         errorDetails = {\r\n//             actionRequired: 'Choose a new property ID',\r\n//             severity: 'medium'\r\n//         };\r\n//     } else if (error.message.includes('gas required exceeds allowance')) {\r\n//         errorMessage = 'The transaction requires more gas than currently allowed. Please try with a higher gas limit.';\r\n//         errorType = 'GAS_LIMIT_EXCEEDED';\r\n//         errorDetails = {\r\n//             actionRequired: 'Increase gas limit',\r\n//             severity: 'medium'\r\n//         };\r\n//     } else if (error.message.includes('User denied')) {\r\n//         errorMessage = 'Transaction was cancelled by the user.';\r\n//         errorType = 'USER_REJECTED';\r\n//         errorDetails = {\r\n//             actionRequired: 'Retry transaction',\r\n//             severity: 'low'\r\n//         };\r\n//     } else if (error.message.includes('Property is not available')) {\r\n//         errorMessage = 'This property is no longer available for purchase.';\r\n//         errorType = 'PROPERTY_UNAVAILABLE';\r\n//         errorDetails = {\r\n//             actionRequired: 'Select a different property',\r\n//             severity: 'medium'\r\n//         };\r\n//     } else if (error.message.includes('own property')) {\r\n//         errorMessage = 'You cannot purchase your own property.';\r\n//         errorType = 'INVALID_PURCHASE';\r\n//         errorDetails = {\r\n//             actionRequired: 'Select a different property',\r\n//             severity: 'low'\r\n//         };\r\n//     }\r\n\r\n//     return {\r\n//         message: errorMessage,\r\n//         type: errorType,\r\n//         details: errorDetails\r\n//     };\r\n// };\r\n\r\n// // Web3 connection error handling\r\n// export const handleWeb3Error = (error, context = '') => {\r\n//     let errorMessage = 'An unexpected error occurred.';\r\n    \r\n//     if (typeof error === 'string') {\r\n//         errorMessage = error;\r\n//     } else if (error.message) {\r\n//         if (error.message.includes('Internal JSON-RPC error')) {\r\n//             if (error.message.includes('insufficient funds')) {\r\n//                 errorMessage = 'Your wallet has insufficient funds to complete this transaction.';\r\n//             } else if (error.message.includes('gas required exceeds allowance')) {\r\n//                 errorMessage = 'The transaction requires more gas than currently allowed. Please try with a lower price.';\r\n//             } else if (error.message.includes('nonce too low')) {\r\n//                 errorMessage = 'Transaction sequence error: Please reset your MetaMask account or wait for pending transactions.';\r\n//             } else {\r\n//                 errorMessage = 'A network error occurred. Please check your connection and try again.';\r\n//             }\r\n//         } else if (error.message.includes('User denied')) {\r\n//             errorMessage = 'Transaction was cancelled by the user.';\r\n//         } else if (error.message.includes('MetaMask')) {\r\n//             errorMessage = 'Please ensure MetaMask is installed and unlocked.';\r\n//         }\r\n//     }\r\n    \r\n//     return {\r\n//         message: errorMessage,\r\n//         context: context,\r\n//         originalError: error\r\n//     };\r\n// };\r\n\r\n// // Property validation error messaging\r\n// export const getPropertyValidationMessage = (errorType) => {\r\n//     const errorMessages = {\r\n//         INVALID_ID: 'Invalid property ID format. Use only letters, numbers, and hyphens.',\r\n//         INVALID_TITLE: 'Invalid property title. Title must be a single line and not exceed 100 characters.',\r\n//         INVALID_DESCRIPTION: 'Invalid description. Keep it within 4 lines and 500 characters.',\r\n//         INVALID_LOCATION: 'Please select a valid location from the provided list of Israeli cities.',\r\n//         INVALID_PRICE: 'Invalid price. Enter a positive number not exceeding 1,000,000 ETH.',\r\n//         DUPLICATE_PROPERTY: 'A property with this ID already exists in the system.',\r\n//         PROPERTY_UNAVAILABLE: 'This property is not available for purchase.',\r\n//         UNAUTHORIZED_PURCHASE: 'You are not authorized to purchase this property.',\r\n//         INSUFFICIENT_FUNDS: 'Your wallet balance is insufficient for this purchase.',\r\n//         NETWORK_ERROR: 'Network error. Please check your connection and try again.',\r\n//         CONTRACT_ERROR: 'Smart contract error. Please try again or contact support.'\r\n//     };\r\n\r\n//     return errorMessages[errorType] || 'An unknown error occurred. Please try again.';\r\n// };\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}