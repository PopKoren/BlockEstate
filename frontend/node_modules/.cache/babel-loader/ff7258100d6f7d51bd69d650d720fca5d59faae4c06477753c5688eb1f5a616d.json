{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n// import { Card, CardHeader, CardContent } from './components/ui/card';\n// import { Button } from './components/ui/button';\n// import { Alert, AlertDescription } from './components/ui/alert';\n// import { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\n// import { ScrollArea } from './components/ui/scroll-area';\n// import ContractDetails from './components/ui/ContractDetails';\n// import PropertyForm from './components/ui/PropertyForm';\n\n// // Web3 Utilities\n// import { \n//     initializeWeb3, \n//     initializeContract, \n//     connectWallet, \n//     switchToHardhatNetwork, \n//     formatPrice,\n//     checkPropertyAvailability\n// } from './utilsApp/web3';\n\n// // Error Handling Utilities\n// import { \n//     validatePropertyData,\n//     validateTransaction,\n//     calculatePropertyPurchaseGas,\n//     displayErrorMessage,\n//     validatePropertyFormData\n// } from './utilsApp/errors';\n\n// const RealEstateApp = () => {\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [isProcessing, setIsProcessing] = useState(false);\n//     const [account, setAccount] = useState('');\n//     const [contract, setContract] = useState(null);\n//     const [web3Instance, setWeb3Instance] = useState(null);\n//     const [properties, setProperties] = useState([]);\n//     const [error, setError] = useState('');\n//     const [success, setSuccess] = useState('');\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\n\n//     const initializeBlockchain = async () => {\n//         setIsLoading(true);\n//         setError('');\n\n//         try {\n//             setConnectionStatus('Initializing Web3...');\n//             const web3 = await initializeWeb3();\n//             setWeb3Instance(web3);\n\n//             const accounts = await web3.eth.getAccounts();\n//             if (accounts.length > 0) {\n//                 setAccount(accounts[0]);\n//             }\n\n//             setConnectionStatus('Checking network...');\n//             const chainId = await web3.eth.getChainId();\n\n//             if (chainId !== 31337) {\n//                 setConnectionStatus('Switching to Hardhat network...');\n//                 await switchToHardhatNetwork();\n//             }\n\n//             setConnectionStatus('Initializing contract...');\n//             const contractInstance = await initializeContract(web3);\n//             setContract(contractInstance);\n\n//             await loadProperties(contractInstance);\n//             setConnectionStatus('Connected');\n\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Initialization Error'));\n//             setConnectionStatus('Connection failed');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     const loadProperties = async (contractInstance = contract) => {\n//         try {\n//             if (!contractInstance) throw new Error('Contract not initialized');\n//             const results = await contractInstance.methods.getAllProperties().call();\n//             setProperties(results || []);\n//         } catch (err) {\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\n//         }\n//     };\n//     const handlePropertySubmit = async (propertyData) => {\n//         console.log('Starting property submission:', propertyData);\n//         setIsProcessing(true);\n//         setError('');\n//         setSuccess('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             // Validate property data\n//             await validatePropertyData(propertyData, contract);\n\n//             // Convert price to Wei with proper BigInt handling\n//             const priceString = propertyData.price.toString();\n//             const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\n\n//             // Ensure price is handled as string to avoid BigInt mixing\n//             const transaction = await contract.methods.createProperty(\n//                 propertyData.id,\n//                 propertyData.title,\n//                 propertyData.description,\n//                 priceInWei.toString(), // Convert to string to avoid BigInt mixing\n//                 propertyData.location,\n//                 []\n//             ).send({\n//                 from: account,\n//                 gas: 500000,\n//                 gasPrice: (await web3Instance.eth.getGasPrice()).toString() // Convert gas price to string\n//             });\n\n//             console.log('Transaction successful:', transaction);\n//             await loadProperties();\n//             setSuccess(`Property listed successfully! Transaction hash: ${transaction.transactionHash}`);\n//         } catch (err) {\n//             console.error('Property submission error:', err);\n//             setError(err.message || 'An unexpected error occurred');\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     const handlePurchase = async (propertyId) => {\n//         setIsProcessing(true);\n//         setError('');\n//         setSuccess('');\n\n//         try {\n//             if (!contract || !account || !web3Instance) {\n//                 throw new Error('Please ensure your wallet is connected');\n//             }\n\n//             const allProperties = await contract.methods.getAllProperties().call();\n//             const property = allProperties.find(p => p.id === propertyId);\n\n//             if (!property) {\n//                 throw new Error('Property not found');\n//             }\n\n//             if (!property.isActive) {\n//                 throw new Error('This property is no longer available for purchase');\n//             }\n\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\n//                 throw new Error('You cannot purchase your own property');\n//             }\n\n//             // Ensure we have a valid price value\n//             if (!property.price) {\n//                 throw new Error('Invalid property price');\n//             }\n\n//             const contractId = `${propertyId}-${Date.now()}`;\n//             const propertyPrice = property.price.toString();\n\n//             // Check balance using Web3's utils\n//             const balance = await web3Instance.eth.getBalance(account);\n//             const balanceInEther = web3Instance.utils.fromWei(balance, 'ether');\n//             const priceInEther = web3Instance.utils.fromWei(propertyPrice, 'ether');\n\n//             if (Number(balanceInEther) < Number(priceInEther)) {\n//                 throw new Error('Insufficient funds to complete this purchase');\n//             }\n\n//             // Execute the purchase transaction\n//             const transaction = await contract.methods\n//                 .createContract(contractId, propertyId)\n//                 .send({\n//                     from: account,\n//                     value: propertyPrice,\n//                     gas: '500000',\n//                     gasPrice: await web3Instance.eth.getGasPrice()\n//                 });\n\n//             console.log('Purchase transaction successful:', transaction);\n//             await loadProperties();\n//             setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\n\n//         } catch (err) {\n//             console.error('Purchase error:', err);\n//             setError(err.message || 'Failed to complete purchase. Please try again.');\n//         } finally {\n//             setIsProcessing(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const init = async () => {\n//             await initializeBlockchain();\n//         };\n\n//         init();\n\n//         if (window.ethereum) {\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\n//             window.ethereum.on('chainChanged', () => window.location.reload());\n//         }\n\n//         return () => {\n//             if (window.ethereum) {\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n//                 window.ethereum.removeListener('chainChanged', () => window.location.reload());\n//             }\n//         };\n//     }, []);\n\n//     const handleAccountsChanged = async (accounts) => {\n//         if (accounts.length > 0) {\n//             setAccount(accounts[0]);\n//             await loadProperties(contract);\n//         } else {\n//             setAccount('');\n//             setProperties([]);\n//             setError('Please connect your wallet');\n//         }\n//     };\n\n//     // Render loading state\n//     if (isLoading) {\n//         return (\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\n//                 <div className=\"text-center\">\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\n//                 </div>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"container mx-auto p-4 min-h-screen\">\n//             <Card className=\"mb-6\">\n//                 <CardHeader>\n//                     <div className=\"flex justify-between items-center\">\n//                         <h1 className=\"text-2xl font-bold\">Real Estate Marketplace</h1>\n//                         <div className=\"flex gap-2\">\n//                             <Button \n//                                 onClick={() => loadProperties()} \n//                                 disabled={!contract || isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\n//                                 Refresh\n//                             </Button>\n//                             <Button \n//                                 onClick={async () => {\n//                                     try {\n//                                         const address = await connectWallet();\n//                                         setAccount(address);\n//                                         await loadProperties(contract);\n//                                     } catch (err) {\n//                                         setError(displayErrorMessage(err, 'Wallet Connection Error'));\n//                                     }\n//                                 }}\n//                                 disabled={isProcessing}\n//                                 className=\"flex items-center gap-2\"\n//                             >\n//                                 <Wallet className=\"h-4 w-4\" />\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\n//                             </Button>\n//                         </div>\n//                     </div>\n//                 </CardHeader>\n//             </Card>\n\n//             {error && (\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\n//                     <AlertCircle className=\"h-4 w-4\" />\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             {success && (\n//                 <Alert className=\"mb-6 bg-green-50 border-green-200\">\n//                     <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n//                 </Alert>\n//             )}\n\n//             <div className=\"grid md:grid-cols-2 gap-6\">\n//                 <PropertyForm \n//                     onSubmit={handlePropertySubmit}\n//                     contract={contract}\n//                     isProcessing={isProcessing}\n//                 />\n\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\n//                     <CardHeader>\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                             <Building className=\"h-5 w-5\" />\n//                             Listed Properties\n//                         </h2>\n//                     </CardHeader>\n//                     <CardContent className=\"p-0\">\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n//                             <div className=\"space-y-4 p-6\">\n//                                 {properties.length === 0 ? (\n//                                     <div className=\"text-center text-gray-500 py-8\">\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n//                                         <p>No properties listed yet</p>\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\n//                                     </div>\n//                                 ) : (\n//                                     properties.map((property, index) => (\n//                                         <PropertyCard\n//                                             key={index}\n//                                             property={property}\n//                                             account={account}\n//                                             onPurchase={handlePurchase}\n//                                             isProcessing={isProcessing}\n//                                             web3Instance={web3Instance}\n//                                             formatPrice={formatPrice}\n//                                         />\n//                                     ))\n//                                 )}\n//                             </div>\n//                         </ScrollArea>\n//                     </CardContent>\n//                 </Card>\n//             </div>\n//         </div>\n//     );\n// };\n\n// const PropertyCard = ({ property, account, onPurchase, isProcessing, web3Instance, formatPrice }) => {\n//     return (\n//         <Card className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\n//             <div className=\"space-y-3\">\n//                 <div className=\"flex justify-between items-start\">\n//                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n//                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n//                         property.isActive \n//                             ? 'bg-green-100 text-green-700'\n//                             : 'bg-red-100 text-red-700'\n//                     }`}>\n//                         {property.isActive ? 'Active' : 'Sold'}\n//                     </span>\n//                 </div>\n\n//                 <div className=\"text-sm space-y-2\">\n//                     <p className=\"text-gray-600 italic\">{property.description}</p>\n\n//                     <div className=\"grid grid-cols-2 gap-4\">\n//                         <div>\n//                             <p className=\"font-medium text-gray-600\">Location</p>\n//                             <p>{property.location}</p>\n//                         </div>\n//                         <div>\n//                             <p className=\"font-medium text-gray-600\">Price</p>\n//                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\n//                         </div>\n//                     </div>\n\n//                     <div>\n//                         <p className=\"font-medium text-gray-600\">Owner</p>\n//                         <p className=\"truncate text-xs\">{property.owner}</p>\n//                     </div>\n\n//                     <div className=\"flex justify-between items-center pt-2\">\n//                         <p className=\"text-xs text-gray-500\">\n//                             Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\n//                         </p>\n//                         <ContractDetails \n//                             property={property}\n//                             formatPrice={(price) => formatPrice(web3Instance, price)}\n//                         />\n//                     </div>\n//                 </div>\n\n//                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\n//                     <Button \n//                         onClick={() => onPurchase(property.id)}\n//                         disabled={isProcessing}\n//                         className=\"w-full mt-4\"\n//                         variant=\"outline\"\n//                     >\n//                         {isProcessing ? (\n//                             <div className=\"flex items-center justify-center gap-2\">\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                 Processing Purchase...\n//                             </div>\n//                         ) : 'Purchase Property'}\n//                     </Button>\n//                 )}\n//             </div>\n//         </Card>\n//     );\n// };\n\n// export default RealEstateApp;","map":{"version":3,"names":[],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/RealEstateApp.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Card, CardHeader, CardContent } from './components/ui/card';\r\n// import { Button } from './components/ui/button';\r\n// import { Alert, AlertDescription } from './components/ui/alert';\r\n// import { Building, Wallet, RefreshCw, AlertCircle, Loader2 } from 'lucide-react';\r\n// import { ScrollArea } from './components/ui/scroll-area';\r\n// import ContractDetails from './components/ui/ContractDetails';\r\n// import PropertyForm from './components/ui/PropertyForm';\r\n\r\n// // Web3 Utilities\r\n// import { \r\n//     initializeWeb3, \r\n//     initializeContract, \r\n//     connectWallet, \r\n//     switchToHardhatNetwork, \r\n//     formatPrice,\r\n//     checkPropertyAvailability\r\n// } from './utilsApp/web3';\r\n\r\n// // Error Handling Utilities\r\n// import { \r\n//     validatePropertyData,\r\n//     validateTransaction,\r\n//     calculatePropertyPurchaseGas,\r\n//     displayErrorMessage,\r\n//     validatePropertyFormData\r\n// } from './utilsApp/errors';\r\n\r\n// const RealEstateApp = () => {\r\n//     const [isLoading, setIsLoading] = useState(true);\r\n//     const [isProcessing, setIsProcessing] = useState(false);\r\n//     const [account, setAccount] = useState('');\r\n//     const [contract, setContract] = useState(null);\r\n//     const [web3Instance, setWeb3Instance] = useState(null);\r\n//     const [properties, setProperties] = useState([]);\r\n//     const [error, setError] = useState('');\r\n//     const [success, setSuccess] = useState('');\r\n//     const [connectionStatus, setConnectionStatus] = useState('Initializing...');\r\n\r\n//     const initializeBlockchain = async () => {\r\n//         setIsLoading(true);\r\n//         setError('');\r\n        \r\n//         try {\r\n//             setConnectionStatus('Initializing Web3...');\r\n//             const web3 = await initializeWeb3();\r\n//             setWeb3Instance(web3);\r\n\r\n//             const accounts = await web3.eth.getAccounts();\r\n//             if (accounts.length > 0) {\r\n//                 setAccount(accounts[0]);\r\n//             }\r\n\r\n//             setConnectionStatus('Checking network...');\r\n//             const chainId = await web3.eth.getChainId();\r\n            \r\n//             if (chainId !== 31337) {\r\n//                 setConnectionStatus('Switching to Hardhat network...');\r\n//                 await switchToHardhatNetwork();\r\n//             }\r\n\r\n//             setConnectionStatus('Initializing contract...');\r\n//             const contractInstance = await initializeContract(web3);\r\n//             setContract(contractInstance);\r\n            \r\n//             await loadProperties(contractInstance);\r\n//             setConnectionStatus('Connected');\r\n            \r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Initialization Error'));\r\n//             setConnectionStatus('Connection failed');\r\n//         } finally {\r\n//             setIsLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const loadProperties = async (contractInstance = contract) => {\r\n//         try {\r\n//             if (!contractInstance) throw new Error('Contract not initialized');\r\n//             const results = await contractInstance.methods.getAllProperties().call();\r\n//             setProperties(results || []);\r\n//         } catch (err) {\r\n//             setError(displayErrorMessage(err, 'Failed to load properties'));\r\n//         }\r\n//     };\r\n//     const handlePropertySubmit = async (propertyData) => {\r\n//         console.log('Starting property submission:', propertyData);\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n//         setSuccess('');\r\n    \r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n    \r\n//             // Validate property data\r\n//             await validatePropertyData(propertyData, contract);\r\n    \r\n//             // Convert price to Wei with proper BigInt handling\r\n//             const priceString = propertyData.price.toString();\r\n//             const priceInWei = web3Instance.utils.toWei(priceString, 'ether');\r\n            \r\n//             // Ensure price is handled as string to avoid BigInt mixing\r\n//             const transaction = await contract.methods.createProperty(\r\n//                 propertyData.id,\r\n//                 propertyData.title,\r\n//                 propertyData.description,\r\n//                 priceInWei.toString(), // Convert to string to avoid BigInt mixing\r\n//                 propertyData.location,\r\n//                 []\r\n//             ).send({\r\n//                 from: account,\r\n//                 gas: 500000,\r\n//                 gasPrice: (await web3Instance.eth.getGasPrice()).toString() // Convert gas price to string\r\n//             });\r\n    \r\n//             console.log('Transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setSuccess(`Property listed successfully! Transaction hash: ${transaction.transactionHash}`);\r\n//         } catch (err) {\r\n//             console.error('Property submission error:', err);\r\n//             setError(err.message || 'An unexpected error occurred');\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n//     const handlePurchase = async (propertyId) => {\r\n//         setIsProcessing(true);\r\n//         setError('');\r\n//         setSuccess('');\r\n    \r\n//         try {\r\n//             if (!contract || !account || !web3Instance) {\r\n//                 throw new Error('Please ensure your wallet is connected');\r\n//             }\r\n    \r\n//             const allProperties = await contract.methods.getAllProperties().call();\r\n//             const property = allProperties.find(p => p.id === propertyId);\r\n            \r\n//             if (!property) {\r\n//                 throw new Error('Property not found');\r\n//             }\r\n    \r\n//             if (!property.isActive) {\r\n//                 throw new Error('This property is no longer available for purchase');\r\n//             }\r\n    \r\n//             if (property.owner.toLowerCase() === account.toLowerCase()) {\r\n//                 throw new Error('You cannot purchase your own property');\r\n//             }\r\n    \r\n//             // Ensure we have a valid price value\r\n//             if (!property.price) {\r\n//                 throw new Error('Invalid property price');\r\n//             }\r\n    \r\n//             const contractId = `${propertyId}-${Date.now()}`;\r\n//             const propertyPrice = property.price.toString();\r\n            \r\n//             // Check balance using Web3's utils\r\n//             const balance = await web3Instance.eth.getBalance(account);\r\n//             const balanceInEther = web3Instance.utils.fromWei(balance, 'ether');\r\n//             const priceInEther = web3Instance.utils.fromWei(propertyPrice, 'ether');\r\n            \r\n//             if (Number(balanceInEther) < Number(priceInEther)) {\r\n//                 throw new Error('Insufficient funds to complete this purchase');\r\n//             }\r\n    \r\n//             // Execute the purchase transaction\r\n//             const transaction = await contract.methods\r\n//                 .createContract(contractId, propertyId)\r\n//                 .send({\r\n//                     from: account,\r\n//                     value: propertyPrice,\r\n//                     gas: '500000',\r\n//                     gasPrice: await web3Instance.eth.getGasPrice()\r\n//                 });\r\n    \r\n//             console.log('Purchase transaction successful:', transaction);\r\n//             await loadProperties();\r\n//             setSuccess(`Purchase completed successfully! Transaction hash: ${transaction.transactionHash}`);\r\n            \r\n//         } catch (err) {\r\n//             console.error('Purchase error:', err);\r\n//             setError(err.message || 'Failed to complete purchase. Please try again.');\r\n//         } finally {\r\n//             setIsProcessing(false);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const init = async () => {\r\n//             await initializeBlockchain();\r\n//         };\r\n        \r\n//         init();\r\n        \r\n//         if (window.ethereum) {\r\n//             window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n//             window.ethereum.on('chainChanged', () => window.location.reload());\r\n//         }\r\n\r\n//         return () => {\r\n//             if (window.ethereum) {\r\n//                 window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n//                 window.ethereum.removeListener('chainChanged', () => window.location.reload());\r\n//             }\r\n//         };\r\n//     }, []);\r\n\r\n//     const handleAccountsChanged = async (accounts) => {\r\n//         if (accounts.length > 0) {\r\n//             setAccount(accounts[0]);\r\n//             await loadProperties(contract);\r\n//         } else {\r\n//             setAccount('');\r\n//             setProperties([]);\r\n//             setError('Please connect your wallet');\r\n//         }\r\n//     };\r\n\r\n//     // Render loading state\r\n//     if (isLoading) {\r\n//         return (\r\n//             <div className=\"container mx-auto p-4 min-h-screen flex items-center justify-center\">\r\n//                 <div className=\"text-center\">\r\n//                     <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n//                     <h2 className=\"text-xl font-semibold mb-2\">Connecting to Blockchain</h2>\r\n//                     <p className=\"text-gray-600\">{connectionStatus}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n//     return (\r\n//         <div className=\"container mx-auto p-4 min-h-screen\">\r\n//             <Card className=\"mb-6\">\r\n//                 <CardHeader>\r\n//                     <div className=\"flex justify-between items-center\">\r\n//                         <h1 className=\"text-2xl font-bold\">Real Estate Marketplace</h1>\r\n//                         <div className=\"flex gap-2\">\r\n//                             <Button \r\n//                                 onClick={() => loadProperties()} \r\n//                                 disabled={!contract || isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <RefreshCw className={`h-4 w-4 ${isProcessing ? 'animate-spin' : ''}`} />\r\n//                                 Refresh\r\n//                             </Button>\r\n//                             <Button \r\n//                                 onClick={async () => {\r\n//                                     try {\r\n//                                         const address = await connectWallet();\r\n//                                         setAccount(address);\r\n//                                         await loadProperties(contract);\r\n//                                     } catch (err) {\r\n//                                         setError(displayErrorMessage(err, 'Wallet Connection Error'));\r\n//                                     }\r\n//                                 }}\r\n//                                 disabled={isProcessing}\r\n//                                 className=\"flex items-center gap-2\"\r\n//                             >\r\n//                                 <Wallet className=\"h-4 w-4\" />\r\n//                                 {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'Connect Wallet'}\r\n//                             </Button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </CardHeader>\r\n//             </Card>\r\n\r\n//             {error && (\r\n//                 <Alert variant=\"destructive\" className=\"mb-6\">\r\n//                     <AlertCircle className=\"h-4 w-4\" />\r\n//                     <AlertDescription className=\"ml-2\">{error}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             {success && (\r\n//                 <Alert className=\"mb-6 bg-green-50 border-green-200\">\r\n//                     <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\r\n//                 </Alert>\r\n//             )}\r\n\r\n//             <div className=\"grid md:grid-cols-2 gap-6\">\r\n//                 <PropertyForm \r\n//                     onSubmit={handlePropertySubmit}\r\n//                     contract={contract}\r\n//                     isProcessing={isProcessing}\r\n//                 />\r\n\r\n//                 <Card className=\"h-[calc(100vh-12rem)]\">\r\n//                     <CardHeader>\r\n//                         <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                             <Building className=\"h-5 w-5\" />\r\n//                             Listed Properties\r\n//                         </h2>\r\n//                     </CardHeader>\r\n//                     <CardContent className=\"p-0\">\r\n//                         <ScrollArea className=\"h-[calc(100vh-16rem)]\">\r\n//                             <div className=\"space-y-4 p-6\">\r\n//                                 {properties.length === 0 ? (\r\n//                                     <div className=\"text-center text-gray-500 py-8\">\r\n//                                         <Building className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n//                                         <p>No properties listed yet</p>\r\n//                                         <p className=\"text-sm mt-2\">Create your first property listing to get started</p>\r\n//                                     </div>\r\n//                                 ) : (\r\n//                                     properties.map((property, index) => (\r\n//                                         <PropertyCard\r\n//                                             key={index}\r\n//                                             property={property}\r\n//                                             account={account}\r\n//                                             onPurchase={handlePurchase}\r\n//                                             isProcessing={isProcessing}\r\n//                                             web3Instance={web3Instance}\r\n//                                             formatPrice={formatPrice}\r\n//                                         />\r\n//                                     ))\r\n//                                 )}\r\n//                             </div>\r\n//                         </ScrollArea>\r\n//                     </CardContent>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const PropertyCard = ({ property, account, onPurchase, isProcessing, web3Instance, formatPrice }) => {\r\n//     return (\r\n//         <Card className=\"p-4 hover:shadow-lg transition-shadow duration-200\">\r\n//             <div className=\"space-y-3\">\r\n//                 <div className=\"flex justify-between items-start\">\r\n//                     <h3 className=\"font-semibold text-lg\">{property.title}</h3>\r\n//                     <span className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n//                         property.isActive \r\n//                             ? 'bg-green-100 text-green-700'\r\n//                             : 'bg-red-100 text-red-700'\r\n//                     }`}>\r\n//                         {property.isActive ? 'Active' : 'Sold'}\r\n//                     </span>\r\n//                 </div>\r\n                \r\n//                 <div className=\"text-sm space-y-2\">\r\n//                     <p className=\"text-gray-600 italic\">{property.description}</p>\r\n                    \r\n//                     <div className=\"grid grid-cols-2 gap-4\">\r\n//                         <div>\r\n//                             <p className=\"font-medium text-gray-600\">Location</p>\r\n//                             <p>{property.location}</p>\r\n//                         </div>\r\n//                         <div>\r\n//                             <p className=\"font-medium text-gray-600\">Price</p>\r\n//                             <p>{formatPrice(web3Instance, property.price)} ETH</p>\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <p className=\"font-medium text-gray-600\">Owner</p>\r\n//                         <p className=\"truncate text-xs\">{property.owner}</p>\r\n//                     </div>\r\n\r\n//                     <div className=\"flex justify-between items-center pt-2\">\r\n//                         <p className=\"text-xs text-gray-500\">\r\n//                             Listed: {new Date(Number(property.createdAt) * 1000).toLocaleDateString()}\r\n//                         </p>\r\n//                         <ContractDetails \r\n//                             property={property}\r\n//                             formatPrice={(price) => formatPrice(web3Instance, price)}\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 {property.isActive && property.owner.toLowerCase() !== account.toLowerCase() && (\r\n//                     <Button \r\n//                         onClick={() => onPurchase(property.id)}\r\n//                         disabled={isProcessing}\r\n//                         className=\"w-full mt-4\"\r\n//                         variant=\"outline\"\r\n//                     >\r\n//                         {isProcessing ? (\r\n//                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                 Processing Purchase...\r\n//                             </div>\r\n//                         ) : 'Purchase Property'}\r\n//                     </Button>\r\n//                 )}\r\n//             </div>\r\n//         </Card>\r\n//     );\r\n// };\r\n\r\n// export default RealEstateApp;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}