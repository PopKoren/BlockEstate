{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\evyatar\\\\Documents\\\\Smart contract\\\\website\\\\BlockEstate\\\\frontend\\\\src\\\\real-estate-package\\\\components\\\\ui\\\\PropertyForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Card, CardHeader, CardContent } from './card';\n// import { Button } from './button';\n// import { Input } from './input';\n// import { Textarea } from './textarea';\n// import { Plus, Loader2, ChevronDown } from 'lucide-react';\n// import { validatePropertyFormData } from '../../utilsApp/errors';\n\n// // Security Utilities\n// const sanitizeInput = (input) => {\n//     if (typeof input !== 'string') return input;\n//     return input\n//         .replace(/</g, '&lt;')\n//         .replace(/>/g, '&gt;')\n//         .replace(/\"/g, '&quot;')\n//         .replace(/'/g, '&#039;')\n//         .replace(/javascript:/gi, '')\n//         .replace(/on\\w+=/gi, '')\n//         .replace(/data:/gi, '')\n//         .trim();\n// };\n\n// const validateSecurity = (value, type) => {\n//     if (typeof value !== 'string') return value;\n\n//     switch (type) {\n//         case 'id':\n//             return value.replace(/[^a-zA-Z0-9-]/g, '');\n//         case 'title':\n//             return value.replace(/<\\/?[^>]+(>|$)/g, '');\n//         case 'description':\n//             return value.replace(/<\\/?[^>]+(>|$)/g, '');\n//         case 'price':\n//             return value.replace(/[^0-9.]/g, '');\n//         default:\n//             return sanitizeInput(value);\n//     }\n// };\n\n// const ISRAELI_CITIES = [\n//     'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\n//     'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\n//     'Holon', 'Bnei Brak'\n// ];\n\n// const PropertyForm = ({ onSubmit, contract, isProcessing }) => {\n//     const [showCities, setShowCities] = useState(false);\n//     const [formErrors, setFormErrors] = useState({});\n//     const [property, setProperty] = useState({\n//         id: '',\n//         title: '',\n//         description: '',\n//         location: '',\n//         price: ''\n//     });\n\n//     const validateFormSecurity = (propertyData) => {\n//         const errors = {};\n//         const xssPatterns = [\n//             /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n//             /javascript:/gi,\n//             /on\\w+=/gi,\n//             /data:/gi,\n//             /alert\\(/gi,\n//             /eval\\(/gi,\n//             /Function\\(/gi\n//         ];\n\n//         for (const [field, value] of Object.entries(propertyData)) {\n//             if (typeof value === 'string') {\n//                 // Check for XSS patterns\n//                 for (const pattern of xssPatterns) {\n//                     if (pattern.test(value)) {\n//                         errors[field] = 'Invalid characters or patterns detected';\n//                         break;\n//                     }\n//                 }\n\n//                 // Field-specific validation\n//                 switch (field) {\n//                     case 'id':\n//                         if (!/^[a-zA-Z0-9-]+$/.test(value)) {\n//                             errors[field] = 'ID can only contain letters, numbers, and hyphens';\n//                         }\n//                         break;\n//                     case 'price':\n//                         if (!/^\\d*\\.?\\d*$/.test(value)) {\n//                             errors[field] = 'Price can only contain numbers and decimal point';\n//                         }\n//                         break;\n//                 }\n//             }\n//         }\n\n//         return errors;\n//     };\n\n//     const handleInputChange = (e) => {\n//         const { name, value } = e.target;\n\n//         // Security validation and sanitization\n//         const sanitizedValue = validateSecurity(value, name);\n\n//         if (name === 'description') {\n//             const lines = sanitizedValue.split('\\n');\n//             if (lines.length <= 4) {\n//                 setProperty(prev => ({\n//                     ...prev,\n//                     [name]: sanitizedValue\n//                 }));\n//             }\n//             return;\n//         }\n\n//         if (name === 'price' && sanitizedValue) {\n//             const numValue = parseFloat(sanitizedValue);\n//             if (numValue < 0 || numValue > 1000000) {\n//                 return;\n//             }\n//         }\n\n//         setProperty(prev => ({\n//             ...prev,\n//             [name]: sanitizedValue\n//         }));\n\n//         if (formErrors[name]) {\n//             setFormErrors(prev => ({\n//                 ...prev,\n//                 [name]: ''\n//             }));\n//         }\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         console.log('Form submission initiated');\n\n//         // Security validation\n//         const securityErrors = validateFormSecurity(property);\n//         if (Object.keys(securityErrors).length > 0) {\n//             console.log('Security validation failed:', securityErrors);\n//             setFormErrors(securityErrors);\n//             return;\n//         }\n\n//         // Form validation\n//         const validationErrors = validatePropertyFormData(property);\n//         if (Object.keys(validationErrors).length > 0) {\n//             console.log('Form validation failed:', validationErrors);\n//             setFormErrors(validationErrors);\n//             return;\n//         }\n\n//         try {\n//             // Final sanitization before submission\n//             const sanitizedProperty = {\n//                 id: validateSecurity(property.id, 'id'),\n//                 title: validateSecurity(property.title, 'title'),\n//                 description: validateSecurity(property.description, 'description'),\n//                 location: property.location,\n//                 price: validateSecurity(property.price, 'price')\n//             };\n\n//             console.log('Submitting sanitized property:', sanitizedProperty);\n//             await onSubmit(sanitizedProperty);\n\n//             // Clear form on success\n//             setProperty({\n//                 id: '',\n//                 title: '',\n//                 description: '',\n//                 location: '',\n//                 price: ''\n//             });\n//             setFormErrors({});\n//         } catch (error) {\n//             console.error('Submission error:', error);\n//             setFormErrors({ \n//                 submit: sanitizeInput(error.message) || 'An error occurred during submission' \n//             });\n//         }\n//     };\n\n//     const selectCity = (city) => {\n//         if (ISRAELI_CITIES.includes(city)) {\n//             setProperty(prev => ({\n//                 ...prev,\n//                 location: city\n//             }));\n//             setShowCities(false);\n//             if (formErrors.location) {\n//                 setFormErrors(prev => ({\n//                     ...prev,\n//                     location: ''\n//                 }));\n//             }\n//         }\n//     };\n\n//     return (\n//         <Card>\n//             <CardHeader>\n//                 <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n//                     <Plus className=\"h-5 w-5\" />\n//                     List New Property\n//                 </h2>\n//             </CardHeader>\n//             <CardContent>\n//                 <form onSubmit={handleSubmit} className=\"space-y-4\">\n//                     <div>\n//                         <Input\n//                             name=\"id\"\n//                             placeholder=\"Property ID (letters, numbers, hyphens only)\"\n//                             value={property.id}\n//                             onChange={handleInputChange}\n//                             required\n//                             disabled={isProcessing}\n//                             className={formErrors.id ? 'border-red-500' : ''}\n//                             maxLength={50}\n//                         />\n//                         {formErrors.id && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.id}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Input\n//                             name=\"title\"\n//                             placeholder=\"Property Title (single line)\"\n//                             value={property.title}\n//                             onChange={handleInputChange}\n//                             required\n//                             disabled={isProcessing}\n//                             className={formErrors.title ? 'border-red-500' : ''}\n//                             maxLength={100}\n//                         />\n//                         {formErrors.title && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Textarea\n//                             name=\"description\"\n//                             placeholder=\"Property Description (max 4 lines)\"\n//                             value={property.description}\n//                             onChange={handleInputChange}\n//                             required\n//                             disabled={isProcessing}\n//                             className={`min-h-[100px] ${formErrors.description ? 'border-red-500' : ''}`}\n//                             rows={4}\n//                             maxLength={500}\n//                         />\n//                         {formErrors.description && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>\n//                         )}\n//                     </div>\n\n//                     <div className=\"relative\">\n//                         <div\n//                             className=\"relative cursor-pointer\"\n//                             onClick={() => !isProcessing && setShowCities(!showCities)}\n//                         >\n//                             <Input\n//                                 name=\"location\"\n//                                 placeholder=\"Select Location\"\n//                                 value={property.location}\n//                                 readOnly\n//                                 required\n//                                 disabled={isProcessing}\n//                                 className={formErrors.location ? 'border-red-500' : ''}\n//                             />\n//                             <ChevronDown className=\"absolute right-3 top-3 h-4 w-4\" />\n//                         </div>\n//                         {showCities && (\n//                             <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-auto\">\n//                                 {ISRAELI_CITIES.map((city) => (\n//                                     <div\n//                                         key={city}\n//                                         className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\n//                                         onClick={() => selectCity(city)}\n//                                     >\n//                                         {city}\n//                                     </div>\n//                                 ))}\n//                             </div>\n//                         )}\n//                         {formErrors.location && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.location}</p>\n//                         )}\n//                     </div>\n\n//                     <div>\n//                         <Input\n//                             name=\"price\"\n//                             type=\"number\"\n//                             step=\"0.01\"\n//                             min=\"0\"\n//                             max=\"1000000\"\n//                             placeholder=\"Price (ETH)\"\n//                             value={property.price}\n//                             onChange={handleInputChange}\n//                             required\n//                             disabled={isProcessing}\n//                             className={formErrors.price ? 'border-red-500' : ''}\n//                         />\n//                         {formErrors.price && (\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>\n//                         )}\n//                     </div>\n\n//                     {formErrors.submit && (\n//                         <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n//                             {formErrors.submit}\n//                         </div>\n//                     )}\n\n//                     <Button \n//                         type=\"submit\" \n//                         disabled={isProcessing || !contract}\n//                         className=\"w-full\"\n//                     >\n//                         {isProcessing ? (\n//                             <div className=\"flex items-center justify-center gap-2\">\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                                 Processing...\n//                             </div>\n//                         ) : 'List Property'}\n//                     </Button>\n//                 </form>\n//             </CardContent>\n//         </Card>\n//     );\n// };\n\nimport React, { useState } from 'react';\nimport { Card, CardHeader, CardContent } from './card';\nimport { Button } from './button';\nimport { Input } from './input';\nimport { Textarea } from './textarea';\nimport { Plus, Loader2, ChevronDown } from 'lucide-react';\nimport { sanitizeInput, validateSecurity, validateFormSecurity, validatePropertyField, sanitizeAndValidateInput } from '../../utilsApp/security';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ISRAELI_CITIES = ['Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion', 'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva', 'Holon', 'Bnei Brak'];\nconst PropertyForm = ({\n  onSubmit,\n  contract,\n  isProcessing\n}) => {\n  _s();\n  const [showCities, setShowCities] = useState(false);\n  const [formErrors, setFormErrors] = useState({});\n  const [property, setProperty] = useState({\n    id: '',\n    title: '',\n    description: '',\n    location: '',\n    price: ''\n  });\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Apply field-specific sanitization and validation\n    let sanitizedValue = sanitizeAndValidateInput(value, name === 'price' ? 'number' : name === 'description' ? 'multiline' : 'text', name === 'id' ? 50 : name === 'title' ? 100 : name === 'description' ? 500 : undefined);\n\n    // Additional field-specific validations\n    if (name === 'description') {\n      const MAX_LINE_CHARS = 58; // Length of longest line in example\n      const lines = value.split('\\n');\n      const truncatedLines = lines.slice(0, 4).map(line => line.length > MAX_LINE_CHARS ? line.substring(0, MAX_LINE_CHARS) : line);\n      sanitizedValue = truncatedLines.join('\\n');\n\n      // Set maximum total length based on example\n      const MAX_TOTAL_CHARS = 205; // Total characters in example text\n      if (sanitizedValue.length > MAX_TOTAL_CHARS) {\n        sanitizedValue = sanitizedValue.substring(0, MAX_TOTAL_CHARS);\n      }\n    }\n    if (name === 'price') {\n      const numValue = parseFloat(sanitizedValue);\n      if (numValue > 1000000) return;\n    }\n\n    // Update value and clear any existing error\n    setProperty(prev => ({\n      ...prev,\n      [name]: sanitizedValue\n    }));\n    const error = validatePropertyField(name, sanitizedValue);\n    setFormErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log('Starting form validation');\n\n    // Pre-submission validation for description length\n    const encoder = new TextEncoder();\n    const descriptionBytes = encoder.encode(property.description).length;\n    if (descriptionBytes > 1000) {\n      setFormErrors({\n        description: 'Description length exceeds blockchain storage limit. Please shorten your description.'\n      });\n      return;\n    }\n\n    // Validate all fields\n    const fieldErrors = {};\n    Object.entries(property).forEach(([field, value]) => {\n      const error = validatePropertyField(field, value);\n      if (error) fieldErrors[field] = error;\n    });\n\n    // Perform security validation\n    const securityErrors = validateFormSecurity(property);\n    const allErrors = {\n      ...fieldErrors,\n      ...securityErrors\n    };\n    if (Object.keys(allErrors).length > 0) {\n      console.log('Validation errors found:', allErrors);\n      setFormErrors(allErrors);\n      return;\n    }\n    try {\n      // Final security sanitization before submission\n      const sanitizedProperty = {\n        id: validateSecurity(property.id, 'id'),\n        title: validateSecurity(property.title, 'title'),\n        description: validateSecurity(property.description, 'description'),\n        location: property.location,\n        // Location is safe as it's from a predefined list\n        price: validateSecurity(property.price, 'price')\n      };\n      await onSubmit(sanitizedProperty);\n\n      // Reset form on successful submission\n      setProperty({\n        id: '',\n        title: '',\n        description: '',\n        location: '',\n        price: ''\n      });\n      setFormErrors({});\n    } catch (error) {\n      console.error('Form submission error:', error);\n      setFormErrors({\n        submit: sanitizeInput(error.message) || 'An error occurred during submission'\n      });\n    }\n  };\n  const selectCity = city => {\n    if (ISRAELI_CITIES.includes(city)) {\n      setProperty(prev => ({\n        ...prev,\n        location: city\n      }));\n      setShowCities(false);\n      setFormErrors(prev => ({\n        ...prev,\n        location: ''\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          className: \"h-5 w-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this), \"List New Property\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            name: \"id\",\n            placeholder: \"Property ID (letters, numbers, hyphens only)\",\n            value: property.id,\n            onChange: handleInputChange,\n            required: true,\n            disabled: isProcessing,\n            className: formErrors.id ? 'border-red-500' : '',\n            maxLength: 50,\n            pattern: \"[a-zA-Z0-9-]+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 25\n          }, this), formErrors.id && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            name: \"title\",\n            placeholder: \"Property Title (single line)\",\n            value: property.title,\n            onChange: handleInputChange,\n            required: true,\n            disabled: isProcessing,\n            className: formErrors.title ? 'border-red-500' : '',\n            maxLength: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this), formErrors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Textarea, {\n            name: \"description\",\n            placeholder: \"Property Description (4 lines max, 58 characters per line)\",\n            value: property.description,\n            onChange: handleInputChange,\n            required: true,\n            disabled: isProcessing,\n            className: `min-h-[100px] resize-none ${formErrors.description ? 'border-red-500' : ''}`,\n            rows: 4,\n            maxLength: 205,\n            onKeyDown: e => {\n              const lines = e.target.value.split('\\n');\n              if (e.key === 'Enter' && lines.length >= 4) {\n                e.preventDefault();\n              }\n              const currentLine = lines[lines.length - 1] || '';\n              if (currentLine.length >= 58 && e.key !== 'Backspace' && e.key !== 'Delete' && e.key !== 'Enter') {\n                e.preventDefault();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 25\n          }, this), formErrors.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative cursor-pointer\",\n            onClick: () => !isProcessing && setShowCities(!showCities),\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              name: \"location\",\n              placeholder: \"Select Location\",\n              value: property.location,\n              readOnly: true,\n              required: true,\n              disabled: isProcessing,\n              className: formErrors.location ? 'border-red-500' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ChevronDown, {\n              className: \"absolute right-3 top-3 h-4 w-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 25\n          }, this), showCities && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-auto\",\n            children: ISRAELI_CITIES.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"px-4 py-2 hover:bg-gray-100 cursor-pointer\",\n              onClick: () => selectCity(city),\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 29\n          }, this), formErrors.location && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            name: \"price\",\n            type: \"number\",\n            step: \"0.01\",\n            min: \"0\",\n            max: \"1000000\",\n            placeholder: \"Price (ETH)\",\n            value: property.price,\n            onChange: handleInputChange,\n            required: true,\n            disabled: isProcessing,\n            className: formErrors.price ? 'border-red-500' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 25\n          }, this), formErrors.price && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors.price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 21\n        }, this), formErrors.submit && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\",\n          children: formErrors.submit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: isProcessing || !contract,\n          className: \"w-full\",\n          children: isProcessing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(Loader2, {\n              className: \"h-4 w-4 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 624,\n              columnNumber: 33\n            }, this), \"Processing...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 29\n          }, this) : 'List Property'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 489,\n    columnNumber: 9\n  }, this);\n};\n_s(PropertyForm, \"rmkrm+qYNG1c3vqBjqnwvBP/2Ss=\");\n_c = PropertyForm;\nexport default PropertyForm;\nvar _c;\n$RefreshReg$(_c, \"PropertyForm\");","map":{"version":3,"names":["React","useState","Card","CardHeader","CardContent","Button","Input","Textarea","Plus","Loader2","ChevronDown","sanitizeInput","validateSecurity","validateFormSecurity","validatePropertyField","sanitizeAndValidateInput","jsxDEV","_jsxDEV","ISRAELI_CITIES","PropertyForm","onSubmit","contract","isProcessing","_s","showCities","setShowCities","formErrors","setFormErrors","property","setProperty","id","title","description","location","price","handleInputChange","e","name","value","target","sanitizedValue","undefined","MAX_LINE_CHARS","lines","split","truncatedLines","slice","map","line","length","substring","join","MAX_TOTAL_CHARS","numValue","parseFloat","prev","error","handleSubmit","preventDefault","console","log","encoder","TextEncoder","descriptionBytes","encode","fieldErrors","Object","entries","forEach","field","securityErrors","allErrors","keys","sanitizedProperty","submit","message","selectCity","city","includes","children","className","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","required","disabled","maxLength","pattern","rows","onKeyDown","key","currentLine","onClick","readOnly","type","step","min","max","_c","$RefreshReg$"],"sources":["C:/Users/evyatar/Documents/Smart contract/website/BlockEstate/frontend/src/real-estate-package/components/ui/PropertyForm.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Card, CardHeader, CardContent } from './card';\r\n// import { Button } from './button';\r\n// import { Input } from './input';\r\n// import { Textarea } from './textarea';\r\n// import { Plus, Loader2, ChevronDown } from 'lucide-react';\r\n// import { validatePropertyFormData } from '../../utilsApp/errors';\r\n\r\n// // Security Utilities\r\n// const sanitizeInput = (input) => {\r\n//     if (typeof input !== 'string') return input;\r\n//     return input\r\n//         .replace(/</g, '&lt;')\r\n//         .replace(/>/g, '&gt;')\r\n//         .replace(/\"/g, '&quot;')\r\n//         .replace(/'/g, '&#039;')\r\n//         .replace(/javascript:/gi, '')\r\n//         .replace(/on\\w+=/gi, '')\r\n//         .replace(/data:/gi, '')\r\n//         .trim();\r\n// };\r\n\r\n// const validateSecurity = (value, type) => {\r\n//     if (typeof value !== 'string') return value;\r\n\r\n//     switch (type) {\r\n//         case 'id':\r\n//             return value.replace(/[^a-zA-Z0-9-]/g, '');\r\n//         case 'title':\r\n//             return value.replace(/<\\/?[^>]+(>|$)/g, '');\r\n//         case 'description':\r\n//             return value.replace(/<\\/?[^>]+(>|$)/g, '');\r\n//         case 'price':\r\n//             return value.replace(/[^0-9.]/g, '');\r\n//         default:\r\n//             return sanitizeInput(value);\r\n//     }\r\n// };\r\n\r\n// const ISRAELI_CITIES = [\r\n//     'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n//     'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n//     'Holon', 'Bnei Brak'\r\n// ];\r\n\r\n// const PropertyForm = ({ onSubmit, contract, isProcessing }) => {\r\n//     const [showCities, setShowCities] = useState(false);\r\n//     const [formErrors, setFormErrors] = useState({});\r\n//     const [property, setProperty] = useState({\r\n//         id: '',\r\n//         title: '',\r\n//         description: '',\r\n//         location: '',\r\n//         price: ''\r\n//     });\r\n\r\n//     const validateFormSecurity = (propertyData) => {\r\n//         const errors = {};\r\n//         const xssPatterns = [\r\n//             /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n//             /javascript:/gi,\r\n//             /on\\w+=/gi,\r\n//             /data:/gi,\r\n//             /alert\\(/gi,\r\n//             /eval\\(/gi,\r\n//             /Function\\(/gi\r\n//         ];\r\n\r\n//         for (const [field, value] of Object.entries(propertyData)) {\r\n//             if (typeof value === 'string') {\r\n//                 // Check for XSS patterns\r\n//                 for (const pattern of xssPatterns) {\r\n//                     if (pattern.test(value)) {\r\n//                         errors[field] = 'Invalid characters or patterns detected';\r\n//                         break;\r\n//                     }\r\n//                 }\r\n\r\n//                 // Field-specific validation\r\n//                 switch (field) {\r\n//                     case 'id':\r\n//                         if (!/^[a-zA-Z0-9-]+$/.test(value)) {\r\n//                             errors[field] = 'ID can only contain letters, numbers, and hyphens';\r\n//                         }\r\n//                         break;\r\n//                     case 'price':\r\n//                         if (!/^\\d*\\.?\\d*$/.test(value)) {\r\n//                             errors[field] = 'Price can only contain numbers and decimal point';\r\n//                         }\r\n//                         break;\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//         return errors;\r\n//     };\r\n\r\n//     const handleInputChange = (e) => {\r\n//         const { name, value } = e.target;\r\n\r\n//         // Security validation and sanitization\r\n//         const sanitizedValue = validateSecurity(value, name);\r\n\r\n//         if (name === 'description') {\r\n//             const lines = sanitizedValue.split('\\n');\r\n//             if (lines.length <= 4) {\r\n//                 setProperty(prev => ({\r\n//                     ...prev,\r\n//                     [name]: sanitizedValue\r\n//                 }));\r\n//             }\r\n//             return;\r\n//         }\r\n\r\n//         if (name === 'price' && sanitizedValue) {\r\n//             const numValue = parseFloat(sanitizedValue);\r\n//             if (numValue < 0 || numValue > 1000000) {\r\n//                 return;\r\n//             }\r\n//         }\r\n\r\n//         setProperty(prev => ({\r\n//             ...prev,\r\n//             [name]: sanitizedValue\r\n//         }));\r\n\r\n//         if (formErrors[name]) {\r\n//             setFormErrors(prev => ({\r\n//                 ...prev,\r\n//                 [name]: ''\r\n//             }));\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         console.log('Form submission initiated');\r\n\r\n//         // Security validation\r\n//         const securityErrors = validateFormSecurity(property);\r\n//         if (Object.keys(securityErrors).length > 0) {\r\n//             console.log('Security validation failed:', securityErrors);\r\n//             setFormErrors(securityErrors);\r\n//             return;\r\n//         }\r\n\r\n//         // Form validation\r\n//         const validationErrors = validatePropertyFormData(property);\r\n//         if (Object.keys(validationErrors).length > 0) {\r\n//             console.log('Form validation failed:', validationErrors);\r\n//             setFormErrors(validationErrors);\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             // Final sanitization before submission\r\n//             const sanitizedProperty = {\r\n//                 id: validateSecurity(property.id, 'id'),\r\n//                 title: validateSecurity(property.title, 'title'),\r\n//                 description: validateSecurity(property.description, 'description'),\r\n//                 location: property.location,\r\n//                 price: validateSecurity(property.price, 'price')\r\n//             };\r\n\r\n//             console.log('Submitting sanitized property:', sanitizedProperty);\r\n//             await onSubmit(sanitizedProperty);\r\n\r\n//             // Clear form on success\r\n//             setProperty({\r\n//                 id: '',\r\n//                 title: '',\r\n//                 description: '',\r\n//                 location: '',\r\n//                 price: ''\r\n//             });\r\n//             setFormErrors({});\r\n//         } catch (error) {\r\n//             console.error('Submission error:', error);\r\n//             setFormErrors({ \r\n//                 submit: sanitizeInput(error.message) || 'An error occurred during submission' \r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const selectCity = (city) => {\r\n//         if (ISRAELI_CITIES.includes(city)) {\r\n//             setProperty(prev => ({\r\n//                 ...prev,\r\n//                 location: city\r\n//             }));\r\n//             setShowCities(false);\r\n//             if (formErrors.location) {\r\n//                 setFormErrors(prev => ({\r\n//                     ...prev,\r\n//                     location: ''\r\n//                 }));\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <Card>\r\n//             <CardHeader>\r\n//                 <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n//                     <Plus className=\"h-5 w-5\" />\r\n//                     List New Property\r\n//                 </h2>\r\n//             </CardHeader>\r\n//             <CardContent>\r\n//                 <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"id\"\r\n//                             placeholder=\"Property ID (letters, numbers, hyphens only)\"\r\n//                             value={property.id}\r\n//                             onChange={handleInputChange}\r\n//                             required\r\n//                             disabled={isProcessing}\r\n//                             className={formErrors.id ? 'border-red-500' : ''}\r\n//                             maxLength={50}\r\n//                         />\r\n//                         {formErrors.id && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.id}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"title\"\r\n//                             placeholder=\"Property Title (single line)\"\r\n//                             value={property.title}\r\n//                             onChange={handleInputChange}\r\n//                             required\r\n//                             disabled={isProcessing}\r\n//                             className={formErrors.title ? 'border-red-500' : ''}\r\n//                             maxLength={100}\r\n//                         />\r\n//                         {formErrors.title && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Textarea\r\n//                             name=\"description\"\r\n//                             placeholder=\"Property Description (max 4 lines)\"\r\n//                             value={property.description}\r\n//                             onChange={handleInputChange}\r\n//                             required\r\n//                             disabled={isProcessing}\r\n//                             className={`min-h-[100px] ${formErrors.description ? 'border-red-500' : ''}`}\r\n//                             rows={4}\r\n//                             maxLength={500}\r\n//                         />\r\n//                         {formErrors.description && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div className=\"relative\">\r\n//                         <div\r\n//                             className=\"relative cursor-pointer\"\r\n//                             onClick={() => !isProcessing && setShowCities(!showCities)}\r\n//                         >\r\n//                             <Input\r\n//                                 name=\"location\"\r\n//                                 placeholder=\"Select Location\"\r\n//                                 value={property.location}\r\n//                                 readOnly\r\n//                                 required\r\n//                                 disabled={isProcessing}\r\n//                                 className={formErrors.location ? 'border-red-500' : ''}\r\n//                             />\r\n//                             <ChevronDown className=\"absolute right-3 top-3 h-4 w-4\" />\r\n//                         </div>\r\n//                         {showCities && (\r\n//                             <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-auto\">\r\n//                                 {ISRAELI_CITIES.map((city) => (\r\n//                                     <div\r\n//                                         key={city}\r\n//                                         className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\r\n//                                         onClick={() => selectCity(city)}\r\n//                                     >\r\n//                                         {city}\r\n//                                     </div>\r\n//                                 ))}\r\n//                             </div>\r\n//                         )}\r\n//                         {formErrors.location && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.location}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     <div>\r\n//                         <Input\r\n//                             name=\"price\"\r\n//                             type=\"number\"\r\n//                             step=\"0.01\"\r\n//                             min=\"0\"\r\n//                             max=\"1000000\"\r\n//                             placeholder=\"Price (ETH)\"\r\n//                             value={property.price}\r\n//                             onChange={handleInputChange}\r\n//                             required\r\n//                             disabled={isProcessing}\r\n//                             className={formErrors.price ? 'border-red-500' : ''}\r\n//                         />\r\n//                         {formErrors.price && (\r\n//                             <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>\r\n//                         )}\r\n//                     </div>\r\n\r\n//                     {formErrors.submit && (\r\n//                         <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\r\n//                             {formErrors.submit}\r\n//                         </div>\r\n//                     )}\r\n\r\n//                     <Button \r\n//                         type=\"submit\" \r\n//                         disabled={isProcessing || !contract}\r\n//                         className=\"w-full\"\r\n//                     >\r\n//                         {isProcessing ? (\r\n//                             <div className=\"flex items-center justify-center gap-2\">\r\n//                                 <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n//                                 Processing...\r\n//                             </div>\r\n//                         ) : 'List Property'}\r\n//                     </Button>\r\n//                 </form>\r\n//             </CardContent>\r\n//         </Card>\r\n//     );\r\n// };\r\n\r\nimport React, { useState } from 'react';\r\nimport { Card, CardHeader, CardContent } from './card';\r\nimport { Button } from './button';\r\nimport { Input } from './input';\r\nimport { Textarea } from './textarea';\r\nimport { Plus, Loader2, ChevronDown } from 'lucide-react';\r\nimport {\r\n    sanitizeInput,\r\n    validateSecurity,\r\n    validateFormSecurity,\r\n    validatePropertyField,\r\n    sanitizeAndValidateInput\r\n} from '../../utilsApp/security';\r\n\r\nconst ISRAELI_CITIES = [\r\n    'Jerusalem', 'Tel Aviv', 'Haifa', 'Rishon LeZion',\r\n    'Petah Tikva', 'Ashdod', 'Netanya', 'Beer Sheva',\r\n    'Holon', 'Bnei Brak'\r\n];\r\n\r\nconst PropertyForm = ({ onSubmit, contract, isProcessing }) => {\r\n    const [showCities, setShowCities] = useState(false);\r\n    const [formErrors, setFormErrors] = useState({});\r\n    const [property, setProperty] = useState({\r\n        id: '',\r\n        title: '',\r\n        description: '',\r\n        location: '',\r\n        price: ''\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        \r\n        // Apply field-specific sanitization and validation\r\n        let sanitizedValue = sanitizeAndValidateInput(value, \r\n            name === 'price' ? 'number' : \r\n            name === 'description' ? 'multiline' : 'text',\r\n            name === 'id' ? 50 : \r\n            name === 'title' ? 100 : \r\n            name === 'description' ? 500 : undefined\r\n        );\r\n\r\n        // Additional field-specific validations\r\n        if (name === 'description') {\r\n            const MAX_LINE_CHARS = 58; // Length of longest line in example\r\n            const lines = value.split('\\n');\r\n            const truncatedLines = lines.slice(0, 4).map(line => \r\n                line.length > MAX_LINE_CHARS ? line.substring(0, MAX_LINE_CHARS) : line\r\n            );\r\n            sanitizedValue = truncatedLines.join('\\n');\r\n            \r\n            // Set maximum total length based on example\r\n            const MAX_TOTAL_CHARS = 205; // Total characters in example text\r\n            if (sanitizedValue.length > MAX_TOTAL_CHARS) {\r\n                sanitizedValue = sanitizedValue.substring(0, MAX_TOTAL_CHARS);\r\n            }\r\n        }\r\n\r\n        if (name === 'price') {\r\n            const numValue = parseFloat(sanitizedValue);\r\n            if (numValue > 1000000) return;\r\n        }\r\n\r\n        // Update value and clear any existing error\r\n        setProperty(prev => ({\r\n            ...prev,\r\n            [name]: sanitizedValue\r\n        }));\r\n\r\n        const error = validatePropertyField(name, sanitizedValue);\r\n        setFormErrors(prev => ({\r\n            ...prev,\r\n            [name]: error\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log('Starting form validation');\r\n\r\n        // Pre-submission validation for description length\r\n        const encoder = new TextEncoder();\r\n        const descriptionBytes = encoder.encode(property.description).length;\r\n        if (descriptionBytes > 1000) {\r\n            setFormErrors({\r\n                description: 'Description length exceeds blockchain storage limit. Please shorten your description.'\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Validate all fields\r\n        const fieldErrors = {};\r\n        Object.entries(property).forEach(([field, value]) => {\r\n            const error = validatePropertyField(field, value);\r\n            if (error) fieldErrors[field] = error;\r\n        });\r\n\r\n        // Perform security validation\r\n        const securityErrors = validateFormSecurity(property);\r\n        const allErrors = { ...fieldErrors, ...securityErrors };\r\n\r\n        if (Object.keys(allErrors).length > 0) {\r\n            console.log('Validation errors found:', allErrors);\r\n            setFormErrors(allErrors);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Final security sanitization before submission\r\n            const sanitizedProperty = {\r\n                id: validateSecurity(property.id, 'id'),\r\n                title: validateSecurity(property.title, 'title'),\r\n                description: validateSecurity(property.description, 'description'),\r\n                location: property.location, // Location is safe as it's from a predefined list\r\n                price: validateSecurity(property.price, 'price')\r\n            };\r\n\r\n            await onSubmit(sanitizedProperty);\r\n\r\n            // Reset form on successful submission\r\n            setProperty({\r\n                id: '',\r\n                title: '',\r\n                description: '',\r\n                location: '',\r\n                price: ''\r\n            });\r\n            setFormErrors({});\r\n        } catch (error) {\r\n            console.error('Form submission error:', error);\r\n            setFormErrors({\r\n                submit: sanitizeInput(error.message) || 'An error occurred during submission'\r\n            });\r\n        }\r\n    };\r\n\r\n    const selectCity = (city) => {\r\n        if (ISRAELI_CITIES.includes(city)) {\r\n            setProperty(prev => ({\r\n                ...prev,\r\n                location: city\r\n            }));\r\n            setShowCities(false);\r\n            setFormErrors(prev => ({\r\n                ...prev,\r\n                location: ''\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <h2 className=\"text-xl font-semibold flex items-center gap-2\">\r\n                    <Plus className=\"h-5 w-5\" />\r\n                    List New Property\r\n                </h2>\r\n            </CardHeader>\r\n            <CardContent>\r\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n                    <div>\r\n                        <Input\r\n                            name=\"id\"\r\n                            placeholder=\"Property ID (letters, numbers, hyphens only)\"\r\n                            value={property.id}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            disabled={isProcessing}\r\n                            className={formErrors.id ? 'border-red-500' : ''}\r\n                            maxLength={50}\r\n                            pattern=\"[a-zA-Z0-9-]+\"\r\n                        />\r\n                        {formErrors.id && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{formErrors.id}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Input\r\n                            name=\"title\"\r\n                            placeholder=\"Property Title (single line)\"\r\n                            value={property.title}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            disabled={isProcessing}\r\n                            className={formErrors.title ? 'border-red-500' : ''}\r\n                            maxLength={100}\r\n                        />\r\n                        {formErrors.title && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{formErrors.title}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Textarea\r\n                            name=\"description\"\r\n                            placeholder=\"Property Description (4 lines max, 58 characters per line)\"\r\n                            value={property.description}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            disabled={isProcessing}\r\n                            className={`min-h-[100px] resize-none ${formErrors.description ? 'border-red-500' : ''}`}\r\n                            rows={4}\r\n                            maxLength={205}\r\n                            onKeyDown={(e) => {\r\n                                const lines = e.target.value.split('\\n');\r\n                                if (e.key === 'Enter' && lines.length >= 4) {\r\n                                    e.preventDefault();\r\n                                }\r\n                                const currentLine = lines[lines.length - 1] || '';\r\n                                if (currentLine.length >= 58 && e.key !== 'Backspace' && e.key !== 'Delete' && e.key !== 'Enter') {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }}\r\n                        />\r\n                        {formErrors.description && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{formErrors.description}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"relative\">\r\n                        <div\r\n                            className=\"relative cursor-pointer\"\r\n                            onClick={() => !isProcessing && setShowCities(!showCities)}\r\n                        >\r\n                            <Input\r\n                                name=\"location\"\r\n                                placeholder=\"Select Location\"\r\n                                value={property.location}\r\n                                readOnly\r\n                                required\r\n                                disabled={isProcessing}\r\n                                className={formErrors.location ? 'border-red-500' : ''}\r\n                            />\r\n                            <ChevronDown className=\"absolute right-3 top-3 h-4 w-4\" />\r\n                        </div>\r\n                        {showCities && (\r\n                            <div className=\"absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-auto\">\r\n                                {ISRAELI_CITIES.map((city) => (\r\n                                    <div\r\n                                        key={city}\r\n                                        className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\r\n                                        onClick={() => selectCity(city)}\r\n                                    >\r\n                                        {city}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                        {formErrors.location && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{formErrors.location}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Input\r\n                            name=\"price\"\r\n                            type=\"number\"\r\n                            step=\"0.01\"\r\n                            min=\"0\"\r\n                            max=\"1000000\"\r\n                            placeholder=\"Price (ETH)\"\r\n                            value={property.price}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            disabled={isProcessing}\r\n                            className={formErrors.price ? 'border-red-500' : ''}\r\n                        />\r\n                        {formErrors.price && (\r\n                            <p className=\"text-red-500 text-sm mt-1\">{formErrors.price}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    {formErrors.submit && (\r\n                        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\r\n                            {formErrors.submit}\r\n                        </div>\r\n                    )}\r\n\r\n                    <Button \r\n                        type=\"submit\" \r\n                        disabled={isProcessing || !contract}\r\n                        className=\"w-full\"\r\n                    >\r\n                        {isProcessing ? (\r\n                            <div className=\"flex items-center justify-center gap-2\">\r\n                                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                                Processing...\r\n                            </div>\r\n                        ) : 'List Property'}\r\n                    </Button>\r\n                </form>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PropertyForm;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}